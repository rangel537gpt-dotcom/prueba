/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caja.frm.caja;

import caja.bo.DocumentoPagoBO;
import caja.bo.FinanciamientoBO;
import caja.mapeo.entidades.Cliente;
import caja.mapeo.entidades.DocumentoPago;
import caja.mapeo.entidades.Financiamiento;
import caja.frm.frmPrincipal;
import caja.mapeo.entidades.TipoDocSerie;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author user
 */
public class frmCabeceraFinanciamiento extends javax.swing.JInternalFrame {

    private String tipoCliente;
    private int idTipoDocPag; // LO USO PARA EL DIALOGO dPreguntaFinanciamiento;
    private String nroSerie; // LO USO PARA EL DIALOGO dPreguntaFinanciamiento;
    private int diasProrroga; // LO USO PARA EL DIALOGO dPreguntaFinanciamiento;
    private int nroDocumento; // LO USO PARA EL DIALOGO dPreguntaFinanciamiento;
    private String fechaDocumento; // LO USO PARA EL DIALOGO dPreguntaFinanciamiento;

    /**
     * Creates new form frmCabeceraFinanciamiento
     */
    public frmCabeceraFinanciamiento() {
        initComponents();
    }

    public void CargarDatos(String ptipoCliente) {
        //cbCodigo.setSize(new Dimension(67, 20));
        this.tipoCliente = ptipoCliente;
        /*DocumentoPagoBO dBO = DocumentoPagoBO.getInstance();
         List<Cliente> lClientes = dBO.ObtenerTodosClientes();
         for (Cliente cli : lClientes) {
         if (cli.getTipoCliente().equals(tipoCliente) && tipoCliente.equals("C")) {
         cbCodigo.addItem(cli.getCcodigoCole());
         cbNombre.addItem(cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre());
         }
         if (cli.getTipoCliente().equals(tipoCliente) && tipoCliente.equals("S")) {
         cbCodigo.addItem(cli.getScodigoSoc());
         cbNombre.addItem(cli.getSnombreSociedad());
         }
         }*/
        cbCodigo.setSelectedIndex(-1);
        cbNombre.setSelectedIndex(-1);
        cbCodigo.setSize(new Dimension(67, 20));
    }

    public int getIdTipoDocPag() {
        return idTipoDocPag;
    }

    public void setIdTipoDocPag(int idTipoDocPag) {
        this.idTipoDocPag = idTipoDocPag;
    }

    public String getNroSerie() {
        return nroSerie;
    }

    public void setNroSerie(String nroSerie) {
        this.nroSerie = nroSerie;
    }

    public int getDiasProrroga() {
        return diasProrroga;
    }

    public void setDiasProrroga(int diasProrroga) {
        this.diasProrroga = diasProrroga;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbCodigo = new javax.swing.JComboBox();
        cbCodigo.getEditor().getEditorComponent().addKeyListener(
            new KeyAdapter(){
                //@Override
                public void keyReleased (KeyEvent e){
                    if (e.getKeyCode() < 37 || e.getKeyCode() > 40 ) {
                        String txt = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
                        if( e.getKeyCode() == KeyEvent.VK_ENTER && !txt.isEmpty() ){
                            cbNombre.requestFocus();
                        }else{
                            BuscarContadorPorCodigo();}
                    }
                }} );
                jLabel4 = new javax.swing.JLabel();
                jLabel5 = new javax.swing.JLabel();
                cbNombre = new javax.swing.JComboBox();
                cbNombre.getEditor().getEditorComponent().addKeyListener(
                    new KeyAdapter(){
                        //@Override
                        public void keyReleased (KeyEvent e){
                            if (e.getKeyCode() < 37 || e.getKeyCode() > 40 ) {
                                if( e.getKeyCode() !=KeyEvent.VK_ENTER )
                                {
                                    BuscarContadorPorNombre();
                                }
                                else
                                {
                                    String txt = ((JTextField) cbNombre.getEditor().getEditorComponent()).getText();
                                    if( !txt.isEmpty() ){
                                        //CargarFinanciamiento();
                                        txtDeudaAnterior.requestFocus();
                                    }
                                }
                            }
                        }} );
                        jLabel8 = new javax.swing.JLabel();
                        btnGenerarDocumentoPago = new javax.swing.JButton();
                        btnCancelar = new javax.swing.JButton();
                        jLabel1 = new javax.swing.JLabel();
                        lbMontoNOFinanciado = new javax.swing.JLabel();
                        lbRangoFechaTitulo = new javax.swing.JLabel();
                        txtCuotaInicial = new javax.swing.JTextField();
                        jLabel3 = new javax.swing.JLabel();
                        txtSaldo = new javax.swing.JTextField();
                        jLabel7 = new javax.swing.JLabel();
                        txtNroCuotas = new javax.swing.JTextField();
                        jLabel9 = new javax.swing.JLabel();
                        txtCadaCuota = new javax.swing.JTextField();
                        jLabel2 = new javax.swing.JLabel();
                        lbMontoSIFinanciado = new javax.swing.JLabel();
                        lbRangoFecha = new javax.swing.JLabel();
                        jLabel6 = new javax.swing.JLabel();
                        txtDeudaAnterior = new javax.swing.JTextField();
                        jPanel1 = new javax.swing.JPanel();
                        txtMontoSobrante = new javax.swing.JTextField();
                        jLabel10 = new javax.swing.JLabel();

                        setClosable(true);
                        setTitle("FINANCIAMIENTO");
                        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/icono.png"))); // NOI18N

                        cbCodigo.setEditable(true);
                        cbCodigo.addItemListener(new java.awt.event.ItemListener() {
                            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                                cbCodigoItemStateChanged(evt);
                            }
                        });

                        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                        jLabel4.setText("CODIGO:");

                        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                        jLabel5.setText("NOMBRE:");

                        cbNombre.setEditable(true);
                        cbNombre.addItemListener(new java.awt.event.ItemListener() {
                            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                                cbNombreItemStateChanged(evt);
                            }
                        });

                        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                        jLabel8.setText("CANCELA:");

                        btnGenerarDocumentoPago.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/financiamiento.png"))); // NOI18N
                        btnGenerarDocumentoPago.setText("GENERAR FINANCIAMIENTO");
                        btnGenerarDocumentoPago.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnGenerarDocumentoPagoActionPerformed(evt);
                            }
                        });

                        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/cancelar.png"))); // NOI18N
                        btnCancelar.setText("CANCELAR");
                        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnCancelarActionPerformed(evt);
                            }
                        });

                        jLabel1.setText("M. NO FINAN:");

                        lbMontoNOFinanciado.setText("S/. 0.00");
                        lbMontoNOFinanciado.setPreferredSize(new java.awt.Dimension(79, 14));

                        lbRangoFechaTitulo.setText("CORRESPONDIENTE:");
                        lbRangoFechaTitulo.setPreferredSize(new java.awt.Dimension(306, 14));

                        txtCuotaInicial.addKeyListener(new java.awt.event.KeyAdapter() {
                            public void keyPressed(java.awt.event.KeyEvent evt) {
                                txtCuotaInicialKeyPressed(evt);
                            }
                            public void keyTyped(java.awt.event.KeyEvent evt) {
                                txtCuotaInicialKeyTyped(evt);
                            }
                        });

                        jLabel3.setText("SALDO:");

                        txtSaldo.setEditable(false);

                        jLabel7.setText("Nro:");

                        txtNroCuotas.addKeyListener(new java.awt.event.KeyAdapter() {
                            public void keyPressed(java.awt.event.KeyEvent evt) {
                                txtNroCuotasKeyPressed(evt);
                            }
                            public void keyTyped(java.awt.event.KeyEvent evt) {
                                txtNroCuotasKeyTyped(evt);
                            }
                        });

                        jLabel9.setText("C/C:");

                        txtCadaCuota.addKeyListener(new java.awt.event.KeyAdapter() {
                            public void keyPressed(java.awt.event.KeyEvent evt) {
                                txtCadaCuotaKeyPressed(evt);
                            }
                            public void keyTyped(java.awt.event.KeyEvent evt) {
                                txtCadaCuotaKeyTyped(evt);
                            }
                        });

                        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                        jLabel2.setText("M. FINAN:");

                        lbMontoSIFinanciado.setText("S/. 0.00");

                        lbRangoFecha.setText("...");

                        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                        jLabel6.setText("DEUDA:");

                        txtDeudaAnterior.setToolTipText("");
                        txtDeudaAnterior.addKeyListener(new java.awt.event.KeyAdapter() {
                            public void keyPressed(java.awt.event.KeyEvent evt) {
                                txtDeudaAnteriorKeyPressed(evt);
                            }
                            public void keyTyped(java.awt.event.KeyEvent evt) {
                                txtDeudaAnteriorKeyTyped(evt);
                            }
                        });

                        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

                        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                        jPanel1.setLayout(jPanel1Layout);
                        jPanel1Layout.setHorizontalGroup(
                            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGap(0, 0, Short.MAX_VALUE)
                        );
                        jPanel1Layout.setVerticalGroup(
                            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGap(0, 18, Short.MAX_VALUE)
                        );

                        txtMontoSobrante.setEditable(false);
                        txtMontoSobrante.setText("0.0");

                        jLabel10.setText("Exc.:");

                        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                        getContentPane().setLayout(layout);
                        layout.setHorizontalGroup(
                            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(lbMontoSIFinanciado, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lbMontoNOFinanciado, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                                    .addComponent(cbCodigo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtDeudaAnterior))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel5)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(cbNombre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(lbRangoFechaTitulo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(lbRangoFecha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addGap(0, 0, Short.MAX_VALUE)))
                                                .addGap(9, 9, 9))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtCuotaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtNroCuotas, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtCadaCuota)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel10)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtMontoSobrante, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap())))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnGenerarDocumentoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap())))
                        );
                        layout.setVerticalGroup(
                            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(cbCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(cbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbMontoNOFinanciado, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbRangoFechaTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(lbMontoSIFinanciado)
                                    .addComponent(lbRangoFecha))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtDeudaAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6))
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtCuotaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3)
                                        .addComponent(txtSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7)
                                        .addComponent(txtNroCuotas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel9)
                                        .addComponent(txtCadaCuota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtMontoSobrante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel10)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnGenerarDocumentoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        );

                        pack();
                    }// </editor-fold>//GEN-END:initComponents

    private void cbCodigoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCodigoItemStateChanged
        //String codigo = (String) evt.getItem();
        String codigo = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
        this.ObtenerDatosSegunCodigo(codigo);
    }//GEN-LAST:event_cbCodigoItemStateChanged

    private void cbNombreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbNombreItemStateChanged
        //String nombre = (String) evt.getItem();
        String nombre = ((JTextField) cbNombre.getEditor().getEditorComponent()).getText();
        this.ObtenerDatosSegunNombre(nombre);
    }//GEN-LAST:event_cbNombreItemStateChanged

    private void BuscarContadorPorCodigo() {
        String txt = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
        txt = txt.toUpperCase();
        cbCodigo.removeAllItems();
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        for (Cliente cli : lClientes) {
            if (cli.getTipoCliente().equals("C") && this.tipoCliente.equals("C")) {
                if (cli.getCcodigoCole().contains(txt)) {
                    cbCodigo.addItem(cli.getCcodigoCole());
                }
            }
            if (cli.getTipoCliente().equals("S") && this.tipoCliente.equals("S")) {
                if (cli.getScodigoSoc().contains(txt)) {
                    cbCodigo.addItem(cli.getScodigoSoc());
                }
            }
        }
        cbCodigo.setSelectedIndex(-1);
        cbCodigo.hidePopup();
        cbCodigo.showPopup();
        ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(txt);
        txtCadaCuota.setText("");
        txtNroCuotas.setText("");
        txtDeudaAnterior.setText("");
        txtCuotaInicial.setText("");
        txtSaldo.setText("");
    }

    private void BuscarContadorPorNombre() {
        String txt = ((JTextField) cbNombre.getEditor().getEditorComponent()).getText();
        txt = txt.toUpperCase();
        cbNombre.removeAllItems();
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        for (Cliente cli : lClientes) {
            if (cli.getTipoCliente().equals("C") && this.tipoCliente.equals("C")) {
                String nombre = cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                if (nombre.contains(txt)) {
                    cbNombre.addItem(cli.getCcodigoCole() + " | " + cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre());
                }
            }
            if (cli.getTipoCliente().equals("S") && this.tipoCliente.equals("S")) {
                if (cli.getSnombreSociedad().contains(txt)) {
                    cbNombre.addItem(cli.getScodigoSoc() + " | " + cli.getSnombreSociedad());
                }
            }
        }
        cbNombre.setSelectedIndex(-1);
        cbNombre.hidePopup();
        cbNombre.showPopup();
        ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(txt);
    }

    private void ObtenerDatosSegunCodigo(String codigo) {
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        for (Cliente cli : lClientes) {
            if (this.tipoCliente.equals("C") && cli.getTipoCliente().equals("C")) {
                if (cli.getCcodigoCole().equals(codigo)) {
                    String nombre = cli.getCcodigoCole() + " | " + cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                    ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(nombre);
                    //this.CargarFinanciamiento(cli);
                    return;
                }
            }
            if (this.tipoCliente.equals("S") && cli.getTipoCliente().equals("S")) {
                if (cli.getScodigoSoc().equals(codigo)) {
                    ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(cli.getSnombreSociedad());
                    //this.CargarFinanciamiento(cli);
                    return;
                }
            }
        }
        ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
        ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");

    }

    private void ObtenerDatosSegunNombre(String nombre) {
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        for (Cliente cli : lClientes) {
            if (this.tipoCliente.equals("C") && cli.getTipoCliente().equals("C")) {
                String nombreContador = cli.getCcodigoCole() + " | " + cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                if (nombreContador.equals(nombre)) {
                    ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(cli.getCcodigoCole());
                    //this.CargarFinanciamiento(c);
                    return;
                }
            }
            if (this.tipoCliente.equals("S") && cli.getTipoCliente().equals("S")) {
                if (cli.getSnombreSociedad().equals(nombre)) {
                    ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(cli.getScodigoSoc());
                    //this.CargarFinanciamiento(c);
                    return;
                }
            }
        }
        ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
        ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
        txtCadaCuota.setText("");
        txtCuotaInicial.setText("");
        txtNroCuotas.setText("");
        txtSaldo.setText("");
        lbMontoNOFinanciado.setText("S/.0.00");
        lbRangoFechaTitulo.setText("CORRESPONDIENTE A:");
    }

    private void CargarFinanciamiento() {
        String nombre = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
        Cliente cliente = null;
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        for (Cliente cli : lClientes) {
            if (this.tipoCliente.equals("C") && cli.getTipoCliente().equals("C")) {
                if (cli.getCcodigoCole() != null && cli.getCcodigoCole().equals(nombre)) {
                    cliente = cli;
                    break;
                }
            }
            if (this.tipoCliente.equals("S") && cli.getTipoCliente().equals("S")) {
                if (cli.getScodigoSoc() != null && cli.getScodigoSoc().equals(nombre)) {
                    cliente = cli;
                    break;
                }
            }
        }
        List listado = dpBO.ObtenerDeudaNoFinanciadas(cliente.getIdCliente());
        if (listado.size() > 0) {
            JOptionPane.showMessageDialog(this, "NO SE PUEDE GENERAR EL FINANCIAMIENTO, EL MIEMBRO TIENE DEUDAS PENDIENTES", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        this.CargarDatosFinanciamientoFormulario(cliente);
    }

    private void CargarDatosFinanciamientoFormulario(Cliente cliente) {
        FinanciamientoBO fBO = FinanciamientoBO.getInstance();
        fBO.ObtenerDeudaTotal(cliente);
        lbMontoNOFinanciado.setText("S/." + String.valueOf(fBO.getMontoNOFinanciado()));
        lbMontoSIFinanciado.setText("S/." + String.valueOf(fBO.getMontoSIFinanciado()));
        double cuotaInicial = (fBO.getMontoSIFinanciado() + fBO.getDeudaAnterior()) * 20 / 100;
        cuotaInicial = Math.round(cuotaInicial * Math.pow(10, 2)) / Math.pow(10, 2);
        double saldo = fBO.getMontoSIFinanciado() - cuotaInicial;
        txtSaldo.setText(String.valueOf(saldo));
        txtCuotaInicial.setText(String.valueOf(cuotaInicial));
        lbRangoFecha.setText("DESDE " + fBO.getRangoFechaDeuda());
    }

    private boolean VerificarMontos(double primerPago, double saldo, int nroCuotas, double cadaCuotas, double montoSobrante) {
        FinanciamientoBO fBO = FinanciamientoBO.getInstance();
//        if (fBO.getMontoFinanPendiente() <= 1000) {
//            if (primerPago < fBO.getMontoFinanPendiente() / 2) {
//                JOptionPane.showMessageDialog(this,
//                        "EL MONTO INICIAL DEBE SER MAYOR AL 50% DEL SALDO DE FINANCIAMIENTO PENDIENTE",
//                        "ERROR",
//                        JOptionPane.ERROR_MESSAGE);
//                return false;
//            }
//        }

//        if (fBO.getMontoFinanPendiente() > 1000) {
//            if (primerPago < fBO.getMontoFinanPendiente() * 0.3) {
//                JOptionPane.showMessageDialog(this,
//                        "EL MONTO INICIAL DEBE SER MAYOR AL 30% DEL SALDO DE FINANCIAMIENTO PENDIENTE",
//                        "ERROR",
//                        JOptionPane.ERROR_MESSAGE);
//                return false;
//            }
//        }
        if (cadaCuotas < 20) {
            JOptionPane.showMessageDialog(this,
                    "EL MONTO DE LA CUOTA NO PUEDE SER MENOR QUE 20",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        double saldoCalculado = (cadaCuotas * nroCuotas) + montoSobrante;
        if (saldoCalculado != saldo) {
            JOptionPane.showMessageDialog(this,
                    "EL NRO DE CUOTAS MULTIPLICADO POR EL MONTO DE CADA CUOTA NO COINCIDE CON EL SALDO",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        double deudaAnterior = Double.valueOf(txtDeudaAnterior.getText());
        double montoTotal = primerPago + saldo + deudaAnterior;
        double montoSistema = fBO.getMontoSIFinanciado();
        if (montoTotal != montoSistema) {
            JOptionPane.showMessageDialog(this,
                    "LA SUMA DE LOS VALORES NO COINCIDEN CON EL MONTO A FINANCIAR",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private void GenerarFinanciamiento() {
        try {
            if (txtCuotaInicial.getText().isEmpty() || txtSaldo.getText().isEmpty() || txtNroCuotas.getText().isEmpty() || txtCadaCuota.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "DEBE LLENAR LOS CAMPOS",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            double primerPago = Double.valueOf(txtCuotaInicial.getText());
            double saldo = Double.valueOf(txtSaldo.getText());
            int nroCuotas = Integer.valueOf(txtNroCuotas.getText());
            double cadaCuotas = Double.valueOf(txtCadaCuota.getText());
            double montoSobrante = Double.valueOf(txtMontoSobrante.getText());
            FinanciamientoBO fBO = FinanciamientoBO.getInstance();
            if (fBO.getMontoNOFinanciado() <= 0 && fBO.getMontoSIFinanciado() <= 0) {
                JOptionPane.showMessageDialog(this,
                        "NO HAY MONTO A FINANCIAR",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (primerPago >= 0 && saldo > 0 && nroCuotas > 0 && cadaCuotas > 0) {
                if (!this.VerificarMontos(primerPago, saldo, nroCuotas, cadaCuotas, montoSobrante)) {
                    return;
                }
                DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
                String codigoColegiado = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
                List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
                Cliente cliente = null;
                for (Cliente cli : lClientes) {
                    if (this.tipoCliente.equals("C") && cli.getTipoCliente().equals("C") && cli.getCcodigoCole().equals(codigoColegiado)) {
                        cliente = cli;
                        break;
                    }
                }
                for (Cliente cli : lClientes) {
                    if (this.tipoCliente.equals("S") && cli.getTipoCliente().equals("S") && cli.getScodigoSoc().equals(codigoColegiado)) {
                        cliente = cli;
                        break;
                    }
                }
                if (cliente == null) {
                    JOptionPane.showMessageDialog(this,
                            "DEBE ELEGIR UN CONTADOR",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }

                frmPrincipal fPrin = (frmPrincipal) this.getParent().getParent().getParent().getParent().getParent();
                fPrin.AbrirFormularioPreguntaFinanciamiento();
                //FinanciamientoBO fBO = FinanciamientoBO.getInstance();
                Financiamiento f = new Financiamiento();
                f.setCliente(cliente);
                f.setPrimerPago(primerPago);
                f.setSaldo(saldo);
                f.setNroCuotas(nroCuotas);
                f.setMontoCadaCuota(cadaCuotas);
                f.setMontoSobrante(montoSobrante);
                DocumentoPago doc = new DocumentoPago();
                TipoDocSerie tds = dpBO.ObtenerTipoDocSerie(this.idTipoDocPag, this.nroSerie);
                doc.setTipoDocSerie(tds);
                doc.setNroDocumentoPago(this.nroDocumento);
                SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
                doc.setFechaPago(formato.parse(this.fechaDocumento));
                doc.setNroSerie(this.nroSerie);
                boolean seGuardo = fBO.GuardarFinanciamiento(doc, f, this.idTipoDocPag, this.nroSerie, this.diasProrroga);
                if (seGuardo) {
                    //----------------------------------------------------------
//                    DocumentoPago documento = dpBO.getDocumentoPago();
                    dpBO.GenerarArchivosElectronico_ComprobantePago(doc);
                    //----------------------------------------------------------
                    JOptionPane.showMessageDialog(this,
                            "GENERO EL COMPROBANTE DE PAGO NRO: " + doc.getNroDocumentoPago().toString() + " SERIE: " + doc.getNroSerie().toString(),
                            "OK",
                            JOptionPane.INFORMATION_MESSAGE);
                    txtCadaCuota.setText("");
                    txtCuotaInicial.setText("");
                    txtNroCuotas.setText("");
                    txtSaldo.setText("");
                    cbCodigo.requestFocus();
                    txtDeudaAnterior.setText("");
                    ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
                    ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
                    this.diasProrroga = 0;
                    this.nroSerie = "";
                    this.idTipoDocPag = 0;
                    lbMontoNOFinanciado.setText("S/. 0.00");
                    lbMontoSIFinanciado.setText("S/. 0.00");
                } else {
                    JOptionPane.showMessageDialog(this,
                            "NO SE GENERO EL COMPROBANTE DE PAGO",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "DEBE LLENAR LOS CAMPOS",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void btnGenerarDocumentoPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarDocumentoPagoActionPerformed
        frmPrincipal fPrin = (frmPrincipal) this.getParent().getParent().getParent().getParent().getParent();
        Thread queryThread = new Thread() {
            public void run() {
                frmCargando fCargando = new frmCargando();
                fPrin.AgregarFormulario(fCargando);
                int x = (fPrin.getWidth() - fCargando.getWidth()) / 2;
                int y = (fPrin.getHeight() - fCargando.getHeight()) / 2;
                fCargando.setLocation(x, y);
                fCargando.setVisible(true);
                fCargando.toFront();
                GenerarFinanciamiento();
                fCargando.dispose();
            }
        };
        queryThread.start();
    }//GEN-LAST:event_btnGenerarDocumentoPagoActionPerformed

    private void txtCuotaInicialKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCuotaInicialKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            if (!txtCuotaInicial.getText().isEmpty()) {
                double cuotaInicial = Double.valueOf(txtCuotaInicial.getText());
                FinanciamientoBO fBO = FinanciamientoBO.getInstance();
                double montoDeuda = fBO.getMontoSIFinanciado();
                double saldo = montoDeuda - cuotaInicial;
                saldo = Math.round(saldo * Math.pow(10, 2)) / Math.pow(10, 2);
                txtSaldo.setText(String.valueOf(saldo));
                txtNroCuotas.requestFocus();
            } else {
                JOptionPane.showMessageDialog(this,
                        "DEBE PONER UNA CANTIDAD",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_txtCuotaInicialKeyPressed

    private void txtCuotaInicialKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCuotaInicialKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            if (c != '.') {
                getToolkit().beep();
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtCuotaInicialKeyTyped

    private void txtNroCuotasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroCuotasKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            getToolkit().beep();
            evt.consume();
            //Error.setText("Ingresa Solo Numeros";
        }
    }//GEN-LAST:event_txtNroCuotasKeyTyped

    private void txtNroCuotasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroCuotasKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            if (!txtNroCuotas.getText().isEmpty()) {
                double saldo = Double.valueOf(txtSaldo.getText());
                double nroCuotas = Double.valueOf(txtNroCuotas.getText());
                double cuota = saldo / nroCuotas;
                cuota = Math.round(cuota * Math.pow(10, 2)) / Math.pow(10, 2);
                int cadaCuota = (int) cuota;
                txtCadaCuota.setText(String.valueOf(cadaCuota));
                double montoSobrante = saldo - nroCuotas * cadaCuota;
                montoSobrante = Math.round(montoSobrante * Math.pow(10, 2)) / Math.pow(10, 2);
                txtMontoSobrante.setText(String.valueOf(montoSobrante));
                //txtCadaCuota.setText(String.valueOf(cuota));
                btnGenerarDocumentoPago.requestFocus();
            } else {
                JOptionPane.showMessageDialog(this,
                        "DEBE PONER EL NRO DE CUOTAS",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_txtNroCuotasKeyPressed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void txtCadaCuotaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCadaCuotaKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            if (!txtCadaCuota.getText().isEmpty() && !txtSaldo.getText().isEmpty()) {
                double saldo = Double.valueOf(txtSaldo.getText());
                double cadaCuota = Double.valueOf(txtCadaCuota.getText());
                double nroCuotas = saldo / cadaCuota;
                double decimales = nroCuotas - (int) nroCuotas;
                decimales = Math.round(decimales * Math.pow(10, 2)) / Math.pow(10, 2);
                if (decimales >= 0.50) {
                    nroCuotas = Math.ceil(nroCuotas);
                } else {
                    nroCuotas = Math.floor(nroCuotas);
                }
                //int nroCuotasEntero = (int) nroCuotas;
                txtNroCuotas.setText(String.valueOf((int) nroCuotas));
                saldo = Math.round(nroCuotas * cadaCuota * Math.pow(10, 2)) / Math.pow(10, 2);
                txtSaldo.setText(String.valueOf(saldo));
                FinanciamientoBO fBO = FinanciamientoBO.getInstance();
                double montoDeuda = fBO.getMontoSIFinanciado() + fBO.getDeudaAnterior();
                txtCuotaInicial.setText(String.valueOf(montoDeuda - saldo));
                txtMontoSobrante.setText("0.0");
                btnGenerarDocumentoPago.requestFocus();
            } else {
                JOptionPane.showMessageDialog(this,
                        "DEBE PONER UN MONTO",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_txtCadaCuotaKeyPressed

    private void txtCadaCuotaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCadaCuotaKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            //if (c != '.') {
            getToolkit().beep();
            evt.consume();
            //}
        }
    }//GEN-LAST:event_txtCadaCuotaKeyTyped

    private void txtDeudaAnteriorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDeudaAnteriorKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            if (c != '.') {
                getToolkit().beep();
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtDeudaAnteriorKeyTyped

    private void txtDeudaAnteriorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDeudaAnteriorKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            double deudaAnterior = 0;
            if (!txtDeudaAnterior.getText().isEmpty()) {
                deudaAnterior = Double.valueOf(txtDeudaAnterior.getText());
            } else {
                txtDeudaAnterior.setText("0.0");
            }
            FinanciamientoBO fBO = FinanciamientoBO.getInstance();
            fBO.setDeudaAnterior(deudaAnterior);
            CargarFinanciamiento();
            txtCadaCuota.setText("");
            txtNroCuotas.setText("");
            txtCuotaInicial.requestFocus();
        }
    }//GEN-LAST:event_txtDeudaAnteriorKeyPressed

    public int getNroDocumento() {
        return nroDocumento;
    }

    public void setNroDocumento(int nroDocumento) {
        this.nroDocumento = nroDocumento;
    }

    public String getFechaDocumento() {
        return fechaDocumento;
    }

    public void setFechaDocumento(String fechaDocumento) {
        this.fechaDocumento = fechaDocumento;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGenerarDocumentoPago;
    private javax.swing.JComboBox cbCodigo;
    private javax.swing.JComboBox cbNombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbMontoNOFinanciado;
    private javax.swing.JLabel lbMontoSIFinanciado;
    private javax.swing.JLabel lbRangoFecha;
    private javax.swing.JLabel lbRangoFechaTitulo;
    private javax.swing.JTextField txtCadaCuota;
    private javax.swing.JTextField txtCuotaInicial;
    private javax.swing.JTextField txtDeudaAnterior;
    private javax.swing.JTextField txtMontoSobrante;
    private javax.swing.JTextField txtNroCuotas;
    private javax.swing.JTextField txtSaldo;
    // End of variables declaration//GEN-END:variables
}
