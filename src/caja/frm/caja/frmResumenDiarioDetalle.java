/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caja.frm.caja;

import caja.bo.DocumentoPagoBO;
import caja.bo.NotaBO;
import caja.bo.SeguridadBO;
import caja.bo.TipoDocPagoBO;
import caja.mapeo.entidades.DocumentoPago;
import caja.mapeo.entidades.Nota;
import caja.mapeo.entidades.NotaDetalle;
import caja.mapeo.entidades.ResumenDiario;
import caja.mapeo.entidades.ResumenDiarioDetalle;
import caja.mapeo.entidades.Serie;
import caja.mapeo.entidades.TipoDocPago;
import caja.mapeo.entidades.TipoDocSerie;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import units.DatePicker;

/**
 *
 * @author user
 */
public class frmResumenDiarioDetalle extends javax.swing.JInternalFrame {

    private ResumenDiario resumenDiario = null;
    private boolean accesoGuardar = false;

    /**
     * Creates new form frmNota
     */
    public frmResumenDiarioDetalle() {
        initComponents();
        Date fechaActual = new Date();
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        txtFechaEmision.setText(format.format(fechaActual));
        TableColumn columna = tDetalle.getColumn("NRO");
        columna.setPreferredWidth(40);
        columna.setMinWidth(40);
        columna.setMaxWidth(40);
        columna = tDetalle.getColumn("OBJ");
        columna.setPreferredWidth(0);
        columna.setMinWidth(0);
        columna.setMaxWidth(0);
        columna = tDetalle.getColumn("FECHA PAGO");
        columna.setPreferredWidth(100);
        columna.setMinWidth(100);
        columna.setMaxWidth(100);
        columna = tDetalle.getColumn("MONTO");
        columna.setPreferredWidth(100);
        columna.setMinWidth(100);
        columna.setMaxWidth(100);
        SeguridadBO sBO = SeguridadBO.getInstance();
        if (sBO.getUsuario().getRolUsuario().equals("SA")) {
            accesoGuardar = true;
        } else {
            if (sBO.getUsuario().getRolUsuario().equals("A")) {
                accesoGuardar = true;
            } else {
                accesoGuardar = false;
            }
        }
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<TipoDocPago> lTipoDocPago = dpBO.ObtenerTodosTipoDocPago();
        for (TipoDocPago td : lTipoDocPago) {
            cbTipoDocumento.addItem(td);
        }
        this.btnEliminar.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tDetalle = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtFechaEmision = new javax.swing.JTextField();
        btnFecha = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtObservacion = new javax.swing.JTextField();
        btnEliminar = new javax.swing.JButton();
        btnEliminar1 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtNro = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cbTipoDocumento = new javax.swing.JComboBox();
        cbSerie = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNroDocumento = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 0));
        setClosable(true);
        setTitle("RESUMEN DIARIO");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/icono.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(900, 600));

        tDetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "OBJ", "NRO", "DOCUMENTO PAGO", "FECHA PAGO", "MONTO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tDetalle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tDetalleMouseClicked(evt);
            }
        });
        tDetalle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tDetalleKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tDetalle);

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/ok_mediano.png"))); // NOI18N
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("FECHA:");

        txtFechaEmision.setEditable(false);
        txtFechaEmision.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtFechaEmision.setForeground(new java.awt.Color(0, 102, 204));

        btnFecha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/calendario.png"))); // NOI18N
        btnFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFechaActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("OBSERVACIÓN:");

        txtObservacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtObservacion.setForeground(new java.awt.Color(0, 102, 204));
        txtObservacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtObservacionKeyReleased(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/eliminar1.png"))); // NOI18N
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnEliminar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/cambiar.png"))); // NOI18N
        btnEliminar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminar1ActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("NRO:");

        txtNro.setEditable(false);
        txtNro.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNro.setForeground(new java.awt.Color(0, 102, 204));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("TIPO DOCUME:");

        cbTipoDocumento.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbTipoDocumento.setForeground(new java.awt.Color(0, 102, 204));
        cbTipoDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoDocumentoActionPerformed(evt);
            }
        });

        cbSerie.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbSerie.setForeground(new java.awt.Color(0, 102, 204));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("SERIE:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("NRO:");

        txtNroDocumento.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNroDocumento.setForeground(new java.awt.Color(0, 102, 204));

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/add_mini.png"))); // NOI18N
        btnAgregar.setText("AGREGAR");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtObservacion)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtNro, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFechaEmision, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFecha)
                                .addGap(382, 382, 382))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbTipoDocumento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNroDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel2)
                    .addComponent(txtFechaEmision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtObservacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cbTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cbSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtNroDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("RESUMEN DIARIO");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFechaActionPerformed
        DatePicker dtp = new DatePicker(this);
        if (!dtp.setPickedDate().isEmpty()) {
            txtFechaEmision.setText(dtp.setPickedDate());
        }
    }//GEN-LAST:event_btnFechaActionPerformed

    private void txtObservacionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtObservacionKeyReleased
        int p = txtObservacion.getCaretPosition();
        txtObservacion.setText(txtObservacion.getText().toUpperCase());
        txtObservacion.setCaretPosition(p);
    }//GEN-LAST:event_txtObservacionKeyReleased

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        DefaultTableModel modelDetalle = (DefaultTableModel) tDetalle.getModel();
        if (modelDetalle.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this,
                    "EL RESUMEN DIARIO DEBE CONTENER DETALLE",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        List<ResumenDiarioDetalle> l = new ArrayList<ResumenDiarioDetalle>();
        int numFilas = modelDetalle.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            ResumenDiarioDetalle ncd = (ResumenDiarioDetalle) modelDetalle.getValueAt(i, 0);
            l.add(ncd);
        }
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        SeguridadBO sBO = SeguridadBO.getInstance();
        Date fecha = sBO.ObtenerFechaHoraServidor();
        this.resumenDiario.setFecha(fecha);
        this.resumenDiario.setObservacion(txtObservacion.getText());
        this.resumenDiario.setEstado("C");
        boolean guardo = dpBO.GuardarResumenDiario(this.resumenDiario, l);
        if (!guardo) {
            JOptionPane.showMessageDialog(this,
                    "NO SE PUDO GUARDAR LOS DATOS",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            JOptionPane.showMessageDialog(this,
                    "SE GUARDÓ LOS DATOS CORRECTAMENTE",
                    "OK",
                    JOptionPane.INFORMATION_MESSAGE);
        }
        this.GenerarArchivoElectronicoSUNAT_TXT();
        this.CargarDatos(this.resumenDiario);
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void habilitarParticipantesEvento(List<Object> l) {
        NotaBO ncBO = NotaBO.getInstance();
        for (Object obj : l) {
            int idParticipante = (int) obj;
            ncBO.actualizarBorradoPartipantes(idParticipante, "1");
        }
    }

    private void GenerarArchivoElectronicoSUNAT_TXT() {
//        String rutaBase = "D:\\";
        String rutaBase = "\\\\192.168.1.67\\DATA\\";
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        FileWriter w1001 = null;
        try {
            SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat formatoHora = new SimpleDateFormat("HH:mm:ss");
            SimpleDateFormat formatoJson = new SimpleDateFormat("yyyyMMdd");
            SimpleDateFormat fAnio = new SimpleDateFormat("yyyy");
            SimpleDateFormat fMes = new SimpleDateFormat("MM");
            SimpleDateFormat fDia = new SimpleDateFormat("dd");
            BufferedWriter bw1001 = null;
            PrintWriter wr1001 = null;
            File f1001;
            SimpleDateFormat f = new SimpleDateFormat("yyyyMMdd");
            SimpleDateFormat frdi = new SimpleDateFormat("yyyy-MM-dd");
            String nombreArchivo = "20174327026-RC-" + f.format(this.resumenDiario.getFecha()) + "-" + String.format("%03d", this.resumenDiario.getNro());
            f1001 = new File(rutaBase + nombreArchivo + ".RDI");
            w1001 = new FileWriter(f1001);
            bw1001 = new BufferedWriter(w1001);
            wr1001 = new PrintWriter(bw1001);
            List<ResumenDiarioDetalle> l = dpBO.ObtenerResumenDiarioDetalle(this.resumenDiario.getId());
            String rdi = "";
            for (ResumenDiarioDetalle d : l) {
                rdi = rdi + frdi.format(d.getDocumentoPago().getFechaPago()) + "|";
                rdi = rdi + frdi.format(this.resumenDiario.getFecha()) + "|";
                rdi = rdi + "03|";
                rdi = rdi + d.getDocumentoPago().getTipoDocSerie().getSerie().getSerie() + "-" + String.format("%08d", d.getDocumentoPago().getNroDocumentoPago()) + "|";
                if (d.getDocumentoPago().getCliente().getTipoCliente().equals("C")) {
                    rdi = rdi + "1|"; // tipDocUsuario
                    rdi = rdi + d.getDocumentoPago().getCliente().getPnroDocumento() + "|"; // numDocUsuario
                } else {
                    if (d.getDocumentoPago().getCliente().getTipoCliente().equals("S")) {
                        rdi = rdi + "6|"; // tipDocUsuario
                        rdi = rdi + d.getDocumentoPago().getCliente().getSruc() +"|"; // numDocUsuario
                    } else {
                        if (d.getDocumentoPago().getCliente().getTipoCliente().equals("E")) {
                            rdi = rdi + "6|"; // tipDocUsuario
                            rdi = rdi + d.getDocumentoPago().getCliente().getEruc() + "|"; // numDocUsuario
                        } else {
                            if (d.getDocumentoPago().getCliente().getTipoCliente().equals("P")) {
                                rdi = rdi + "1|"; // tipDocUsuario
                                rdi = rdi + d.getDocumentoPago().getCliente().getPnroDocumento() + "|"; // numDocUsuario
                            }
                        }
                    }
                }
                rdi = rdi + "PEN|"; // tipMoneda
                double montoGravado = 0.0;
                double montoExonerado = 0.0;
                double montoInafecto = 0.0;
                //--------------------------------------------------------------
                List<Object> lTributos = dpBO.ObtenerTributosGenerales(d.getDocumentoPago().getIdDocumentoPago());
                for (Object pobj : lTributos) {
                    Object[] obj = (Object[]) pobj;
                    double montoBase = Math.round(((double) obj[3]) * Math.pow(10, 2)) / Math.pow(10, 2);
                    double montoTributo = Math.round(((double) obj[4]) * Math.pow(10, 2)) / Math.pow(10, 2);
                    if (((String) obj[0]).equals("1000")) {
                        montoGravado = montoBase + montoTributo;
                    }
                    if (((String) obj[0]).equals("9997")) {
                        montoExonerado = montoBase;
                    }
                    if (((String) obj[0]).equals("9998")) {
                        montoInafecto = montoBase;
                    }
                }
                //--------------------------------------------------------------
                rdi = rdi + montoGravado + "|"; // totValGrabado
                rdi = rdi + montoExonerado + "|"; // totValExoneado
                rdi = rdi + montoInafecto + "|"; // totValInafecto
                rdi = rdi + "0.0|"; // totValExportado
                rdi = rdi + "0.0|"; // totValGratuito
                rdi = rdi + "0.0|"; // totOtroCargo
                double montoTotal = Math.round((montoGravado + montoExonerado + montoInafecto) * Math.pow(10, 2)) / Math.pow(10, 2);
                rdi = rdi + montoTotal + "|"; // totImpCpe
                rdi = rdi + "|"; // tipDocModifico
                rdi = rdi + "|"; // serDocModifico
                rdi = rdi + "|"; // numDocModifico
                rdi = rdi + "|"; // tipRegPercepcion
                rdi = rdi + "|"; // porPercepcion
                rdi = rdi + "|"; // monBasePercepcion
                rdi = rdi + "|"; // monPercepcion
                rdi = rdi + "|"; // monTotIncPercepcion
                rdi = rdi + "1"; // monTotIncPercepcion
                wr1001.write(rdi + "\r\n");
            }
            wr1001.close();
            bw1001.close();
            //------------------------------------------------------------------
            f1001 = new File(rutaBase + nombreArchivo + ".TRD");
            w1001 = new FileWriter(f1001);
            bw1001 = new BufferedWriter(w1001);
            wr1001 = new PrintWriter(bw1001);
            int contador = 1;
            for (ResumenDiarioDetalle d : l) {
                boolean existe1000 = false;
                List<Object> lTributos = dpBO.ObtenerTributosGenerales(d.getDocumentoPago().getIdDocumentoPago());
                for (Object pobj : lTributos) {
                    Object[] obj = (Object[]) pobj;
                    String trd = "";
                    trd = trd + contador + "|";
                    trd = trd + obj[0] + "|";
                    trd = trd + obj[1] + "|";
                    trd = trd + obj[2] + "|";
                    double montoBase = Math.round(((double) obj[3]) * Math.pow(10, 2)) / Math.pow(10, 2);
                    double montoTributo = Math.round(((double) obj[4]) * Math.pow(10, 2)) / Math.pow(10, 2);
                    trd = trd + String.valueOf(montoBase) + "|";
                    trd = trd + String.valueOf(montoTributo) + "|";
                    wr1001.write(trd + "\r\n");
                    if (((String) obj[0]).equals("1000")) {
                        existe1000 = true;
                    }
                }
                if (!existe1000) {
                    String codigo1000 = contador + "|1000|IGV|VAT|0.0|0.0|";
                    wr1001.write(codigo1000 + "\r\n");
                }
                contador++;
            }
            wr1001.close();
            bw1001.close();
        } catch (IOException ex) {
            Logger.getLogger(frmResumenDiarioDetalle.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void tDetalleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tDetalleKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE && this.resumenDiario.getEstado().equals("A")) {
            int fila = tDetalle.getSelectedRow();
            if (fila >= 0) {
                int opcion = JOptionPane.showConfirmDialog(null, "¿ DESEA ELIMINAR EL ÍTEM ?");
                if (opcion == JOptionPane.YES_OPTION) {
//                    NotaDetalle ncd = (NotaDetalle) tDetalle.getValueAt(fila, 0);
//                    if (ncd.getId() != 0) {
//                        NotaBO npBO = NotaBO.getInstance();
//                        npBO.EliminarNotaDetalle(ncd);
//                    }
                    DefaultTableModel model = (DefaultTableModel) tDetalle.getModel();
                    model.removeRow(fila);
//                    this.ObtenerMontoTotal();
                }
            }
        }
    }//GEN-LAST:event_tDetalleKeyPressed

    public void ObtenerIGV(NotaDetalle ncd) {
//        ArticuloBO aBO = ArticuloBO.getInstance();
//        ArticuloUnidad au = aBO.ObtenerArticuloUnidad(ncd.getComprobantePagoDetalle().getArticulo().getId(), ncd.getComprobantePagoDetalle().getUnidadMedida().getId());
//        if (ncd.getComprobantePagoDetalle().getTipoAfectacion().getTipo().equals("G")) {
//            if (au.getTieneIgv().equals("S")) {
//                ncd.setIgv(au.getIgv());
//            } else {
//                ncd.setPercepcion(0.0);
//                ncd.setIgv(0.0);
//            }
//        } else {
//            if (ncd.getComprobantePagoDetalle().getTipoAfectacion().getTipo().equals("I")) {
//                ncd.setPercepcion(0.0);
//                ncd.setIgv(0.0);
//            } else {
//                if (ncd.getComprobantePagoDetalle().getTipoAfectacion().getTipo().equals("E")) {
//                    ncd.setPercepcion(0.0);
//                    ncd.setIgv(0.0);
//                }
//            }
//        }
    }

    public void ModificarDetalle(NotaDetalle ncd) {
        int fila = tDetalle.getSelectedRow();
        if (fila >= 0) {
            double total = ncd.getValorVenta() + ncd.getIgv();
            total = Math.round(total * Math.pow(10, 2)) / Math.pow(10, 2);
            tDetalle.setValueAt(ncd.getCantidad(), fila, 5);
            tDetalle.setValueAt(ncd.getValorVenta(), fila, 6);
            tDetalle.setValueAt(ncd.getIgv(), fila, 7);
            tDetalle.setValueAt(total, fila, 8);
//            this.ObtenerMontoTotal();
        }
    }

    private void tDetalleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tDetalleMouseClicked
//        if (evt.getClickCount() == 2) {
//            if (this.notaCredito.getEstado().equals("A")) {
//                int fila = tDetalle.getSelectedRow();
//                if (fila > -1) {
//                    NotaDetalle ncd = (NotaDetalle) tDetalle.getValueAt(fila, 0);
//                    frmPrincipal f = (frmPrincipal) this.getParent().getParent().getParent().getParent().getParent();
//                    f.abrirFormularioModificarArticulo_NotaCredito(this, ncd, tDetalle, 1);
//                }
//            }
//        }
    }//GEN-LAST:event_tDetalleMouseClicked

    private void EliminarArchivoXML(Nota nota) {
        String nombreArchivo = "\\\\192.168.1.67\\firma\\" + "20174327026-07-" + nota.getNroSerie() + "-" + String.format("%08d", nota.getNro()) + ".xml";;
        File fichero = new File(nombreArchivo);
        if (!fichero.exists()) {
            System.out.println("El archivo jsonno existe.");
        } else {
            fichero.delete();
            System.out.println("El archivo json fue eliminado.");
        }
    }


    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
//        int opcion = JOptionPane.showConfirmDialog(null, "¿ DESEA ELIMINAR EL RESUMEN DIARIO ?");
//        if (opcion == JOptionPane.YES_OPTION) {
//            NotaBO nBO = NotaBO.getInstance();
//            List<Object> l = nBO.ObtenerIdParticipantes_SegunNotaCredito(this.notaCredito.getId());
//            boolean seElimino = nBO.EliminarNota(this.notaCredito);
//            if (seElimino) {
//                this.habilitarParticipantesEvento(l);
//                this.EliminarArchivoJSON(this.notaCredito);
//                this.EliminarArchivoXML(this.notaCredito);
//                JOptionPane.showMessageDialog(this,
//                        "SE ELIMINÓ EL COMPROBANTE",
//                        "OK",
//                        JOptionPane.INFORMATION_MESSAGE);
//            } else {
//                JOptionPane.showMessageDialog(this,
//                        "NO SE PUDO ELIMINAR EL COMPROBANTE",
//                        "ERROR",
//                        JOptionPane.ERROR_MESSAGE);
//            }
//            this.dispose();
//        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnEliminar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminar1ActionPerformed
        this.GenerarArchivoElectronicoSUNAT_TXT();
    }//GEN-LAST:event_btnEliminar1ActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        DocumentoPago dp = dpBO.ObtenerComprobantePago_SegunTipoDocumentoSerieNro(((TipoDocPago) cbTipoDocumento.getSelectedItem()).getIdTipoDocPago(), cbSerie.getSelectedItem().toString(), Integer.valueOf(txtNroDocumento.getText()));
        if (dp != null) {
            SeguridadBO sBO = SeguridadBO.getINSTANCE();
            ResumenDiarioDetalle rd = new ResumenDiarioDetalle();
            rd.setDocumentoPago(dp);
            rd.setResumenDiario(this.resumenDiario);
            TipoDocSerie ts = (TipoDocSerie) sBO.CargarObjeto("TipoDocSerie", rd.getDocumentoPago().getTipoDocSerie().getId());
            rd.getDocumentoPago().setTipoDocSerie(ts);
            TipoDocPago td = (TipoDocPago) sBO.CargarObjeto("TipoDocPago", rd.getDocumentoPago().getTipoDocSerie().getTipoDocPago().getIdTipoDocPago());
            rd.getDocumentoPago().getTipoDocSerie().setTipoDocPago(td);
            Serie s = (Serie) sBO.CargarObjeto("Serie", rd.getDocumentoPago().getTipoDocSerie().getSerie().getIdSerie());
            rd.getDocumentoPago().getTipoDocSerie().setSerie(s);
            SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd");
            DefaultTableModel modelDetalle = (DefaultTableModel) tDetalle.getModel();
            int numFilas = modelDetalle.getRowCount();
            modelDetalle.setNumRows(numFilas);
            modelDetalle.addRow(new Object[numFilas]);
            tDetalle.setValueAt(rd, numFilas, 0);
            tDetalle.setValueAt(numFilas + 1, numFilas, 1);
            tDetalle.setValueAt(rd.getDocumentoPago().getTipoDocSerie().getTipoDocPago().getNombreDocPago() + " " + rd.getDocumentoPago().getTipoDocSerie().getSerie().getSerie() + " " + String.format("%07d", rd.getDocumentoPago().getNroDocumentoPago()), numFilas, 2);
            tDetalle.setValueAt(f.format(rd.getDocumentoPago().getFechaPago()), numFilas, 3);
            double montoTotal = dpBO.ObtenerMontoTotalComprobante(rd.getDocumentoPago().getIdDocumentoPago());
            montoTotal = Math.round(montoTotal * Math.pow(10, 2)) / Math.pow(10, 2);
            tDetalle.setValueAt(montoTotal, numFilas, 4);
        } else {
            JOptionPane.showMessageDialog(this, "NO EXISTE EL NRO EL COMPROBANTE", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void cbTipoDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoDocumentoActionPerformed
        cbSerie.removeAllItems();
        TipoDocPagoBO tdBO = TipoDocPagoBO.getInstance();
        List<Serie> l = tdBO.ObtenerSeries(((TipoDocPago) cbTipoDocumento.getSelectedItem()).getIdTipoDocPago());
        for (Serie s : l) {
            cbSerie.addItem(s);
        }
    }//GEN-LAST:event_cbTipoDocumentoActionPerformed

    public void CargarDatos(ResumenDiario nc) {
        this.resumenDiario = nc;
        if (nc.getEstado().equals("A")) {
            btnGuardar.setEnabled(true);
            btnFecha.setEnabled(true);
        } else {
            if (nc.getEstado().equals("C")) {
                btnGuardar.setEnabled(false);
                btnFecha.setEnabled(false);
            } else {
                btnGuardar.setEnabled(false);
                btnFecha.setEnabled(false);
            }
        }
        if (nc.getId() != 0) {
            txtNro.setText(String.format("%06d", nc.getNro()));
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            txtFechaEmision.setText(format.format(nc.getFecha()));
            txtObservacion.setText(nc.getObservacion());
            DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
            List<ResumenDiarioDetalle> ldetalle = dpBO.ObtenerResumenDiarioDetalle(nc.getId());
            DefaultTableModel model = (DefaultTableModel) tDetalle.getModel();
            int contador = 0;
            model.setNumRows(0);
            SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd");
            for (ResumenDiarioDetalle ncd : ldetalle) {
                model.addRow(new Object[contador]);
                model.setValueAt(ncd, contador, 0);
                model.setValueAt(contador + 1, contador, 1);
                model.setValueAt(ncd.getDocumentoPago().getTipoDocSerie().getTipoDocPago().getNombreDocPago() + " " + ncd.getDocumentoPago().getTipoDocSerie().getSerie().getSerie() + " " + String.format("%07d", ncd.getDocumentoPago().getNroDocumentoPago()), contador, 2);
                model.setValueAt(f.format(ncd.getDocumentoPago().getFechaPago()), contador, 3);
                double montoTotal = dpBO.ObtenerMontoTotalComprobante(ncd.getDocumentoPago().getIdDocumentoPago());
                montoTotal = Math.round(montoTotal * Math.pow(10, 2)) / Math.pow(10, 2);
                model.setValueAt(montoTotal, contador, 4);
                contador = contador + 1;
            }
        }
        if (this.accesoGuardar) {
            btnEliminar.setEnabled(true);
        } else {
            btnEliminar.setEnabled(false);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnEliminar1;
    private javax.swing.JButton btnFecha;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox cbSerie;
    private javax.swing.JComboBox cbTipoDocumento;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tDetalle;
    private javax.swing.JTextField txtFechaEmision;
    private javax.swing.JTextField txtNro;
    private javax.swing.JTextField txtNroDocumento;
    private javax.swing.JTextField txtObservacion;
    // End of variables declaration//GEN-END:variables
}
