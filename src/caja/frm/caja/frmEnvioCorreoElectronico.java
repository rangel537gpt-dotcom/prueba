/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caja.frm.caja;

import caja.bo.AlumnoBO;
import caja.bo.DocumentoPagoBO;
import caja.bo.ManagerBO;
import caja.bo.NumeroLetras;
import caja.bo.SeguridadBO;
import caja.mapeo.entidades.Cliente;
import caja.mapeo.entidades.CodigoBienServicioDetraccion;
import caja.mapeo.entidades.CodigoMedioPago;
import caja.mapeo.entidades.DocumentoPago;
import caja.mapeo.entidades.DocumentoPagoDet;
import caja.mapeo.entidades.Serie;
import caja.mapeo.entidades.TipoDocPago;
import caja.mapeo.entidades.TipoDocSerie;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

/**
 *
 * @author user
 */
public class frmEnvioCorreoElectronico extends javax.swing.JDialog {

    private String ruc = "20174327026";
    private DocumentoPago documentoPago;

    /**
     * Creates new form frmEnvioCorreoElectronico
     */
    public frmEnvioCorreoElectronico(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        btnAceptar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCorreos = new javax.swing.JTextArea();
        chkAdicionarEnvio = new javax.swing.JCheckBox();
        lbTitular = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("SE ENVIARÁ EL DOCUMENTO ELECTRONICO AL SIGUIENTE CORREO:");

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/cancel_mediano.png"))); // NOI18N
        btnCancelar.setText("CANCELAR");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/ok_mediano.png"))); // NOI18N
        btnAceptar.setText("ACEPTAR");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        txtCorreos.setEditable(false);
        txtCorreos.setColumns(20);
        txtCorreos.setRows(5);
        jScrollPane1.setViewportView(txtCorreos);

        chkAdicionarEnvio.setSelected(true);
        chkAdicionarEnvio.setText("¿DESEA ENVIAR TAMBIEN A LA EMPRESA / TITULAR?");

        lbTitular.setText(".");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1))
                    .addComponent(chkAdicionarEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(lbTitular, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkAdicionarEnvio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbTitular)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void CargarDatos(DocumentoPago dp) {
        this.documentoPago = dp;
        DocumentoPago documento = this.documentoPago;
//        String correoElectronico = "";
//        if (documento.getCliente() != null) {
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<DocumentoPagoDet> lDetalle = dpBO.ObtenerDetalleComprobante(documento.getIdDocumentoPago());
        SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
        String correos = "";
        btnAceptar.setEnabled(false);
        for (DocumentoPagoDet d : lDetalle) {
            AlumnoBO aBO = AlumnoBO.getInstance();
            List<Object> lCorreos = (List<Object>) aBO.ObtenerCorreoParticipantes_SegunIdDocumentoPago(d.getIdDocumentoPagoDet());
            for (Object pobj : lCorreos) {
                Object[] obj = (Object[]) pobj;
                if (obj[0] != null) {
                    if (!((String) obj[0]).isEmpty()) {
                        correos = correos + (String) obj[0] + "\n";
                        btnAceptar.setEnabled(true);
                    }
                }
            }
        }
        txtCorreos.setText(correos);
        SeguridadBO sBO = SeguridadBO.getInstance();
        Cliente cliente = (Cliente) sBO.CargarObjeto("Cliente", documento.getCliente().getIdCliente());
        if (cliente.getTipoCliente() != null) {
            if (cliente.getTipoCliente().equals("P")) {
                lbTitular.setText((cliente.getPemail() != null ? cliente.getPemail() : ""));
            } else {
                if (cliente.getTipoCliente().equals("C")) {
                    lbTitular.setText((cliente.getCemail() != null ? cliente.getCemail() : ""));
                } else {
                    if (cliente.getTipoCliente().equals("S")) {
                        lbTitular.setText((cliente.getSemail() != null ? cliente.getSemail() : ""));
                    } else {
                        if (cliente.getTipoCliente().equals("E")) {
                            lbTitular.setText((cliente.getEemail() != null ? cliente.getEemail() : ""));
                        } else {
                            lbTitular.setText("");
                        }
                    }
                }
            }
        }
        if (lbTitular.getText().isEmpty()) {
//            lbCorreoElectronico.setText("");
            btnAceptar.setEnabled(false);
        } else {
//            lbCorreoElectronico.setText(correoElectronico);
            btnAceptar.setEnabled(true);
        }
//        } else {
//            lbCorreoElectronico.setText("");
//            btnAceptar.setEnabled(false);
//        }
    }

    private String ObtenerValorResumen(DocumentoPago dp) {
        try {
//            InputStream inputStream = new FileInputStream("CDR/20100194601-01-F001-000000031.xml");
            String nombreArchivo = "\\\\192.168.1.67\\firma\\" + "20174327026-" + dp.getTipoDocSerie().getTipoDocPago().getCodigoDocPago() + "-" + dp.getNroSerie() + "-" + String.format("%08d", dp.getNroDocumentoPago()) + ".xml";;
//            String nombreArchivo = "factura_electronica/prueba.xml";
//            String nombreArchivo = "\\\\192.168.1.100\\d\\data0\\facturador\\FIRMA\\" + "20174327026-" + dp.getTipoDocSerie().getTipoDocPago().getCodigoSunat() + "-" + dp.getTipoDocSerie().getTipoDocPago().getCodigoSunat() + "001-" + String.format("%08d", dp.getNroDocumentoPago()) + ".xml";
            InputStream inputStream = new FileInputStream(nombreArchivo);
            Reader reader = new InputStreamReader(inputStream, "ISO-8859-1");
            InputSource is = new InputSource(reader);
            is.setEncoding("UTF-8");

//            File fXmlFile = new File(nombreArchivo);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(is);
//            Document doc = dBuilder.parse(fXmlFile);

            TransformerFactory tf = TransformerFactory.newInstance();
            Transformer transformer = tf.newTransformer();
            transformer.setOutputProperty(OutputKeys.ENCODING, "ISO-8859-1");

            StringWriter writer = new StringWriter();
            transformer.transform(new DOMSource(doc), new StreamResult(writer));
            String output = writer.getBuffer().toString().replaceAll("\n|\r", "");
            output = output.substring(output.indexOf("<ds:DigestValue>") + 16);
            output = output.substring(0, output.indexOf("</ds:DigestValue>"));

            doc.getDocumentElement().normalize();
            System.out.println("ValoResumen:" + doc.getElementsByTagName("DigestValue"));
            NodeList nodo = doc.getElementsByTagName("ds:DigestValue");
            System.out.println("ValoResumen:" + nodo.item(0).getNodeValue());
            System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
            System.out.println("ValoResumen:" + doc.getElementById("ds:digestmethod"));
            System.out.println("ValoResumen:" + doc.getElementById("ds:digestvalue"));
            NodeList nList = doc.getElementsByTagName("staff");
            System.out.println("----------------------------");
            for (int temp = 0; temp < nList.getLength(); temp++) {
                Node nNode = nList.item(temp);
                System.out.println("\nCurrent Element :" + nNode.getNodeName());
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element eElement = (Element) nNode;
                    System.out.println("Staff id : " + eElement.getAttribute("id"));
                    System.out.println("First Name : " + eElement.getElementsByTagName("firstname").item(0).getTextContent());
                    System.out.println("Last Name : " + eElement.getElementsByTagName("lastname").item(0).getTextContent());
                    System.out.println("Nick Name : " + eElement.getElementsByTagName("nickname").item(0).getTextContent());
                    System.out.println("Salary : " + eElement.getElementsByTagName("salary").item(0).getTextContent());
                }
            }
            return output;
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    private String GenerarPdfEnvio(int imprimirParticipantes, DocumentoPago documento) {
        try {
            File carpeta = new File("DOCUMENTOS_ELECTRONICOS/");
            carpeta.mkdirs();
            String jdbcDriver = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
            Class.forName(jdbcDriver);
            SeguridadBO sBO = SeguridadBO.getInstance();
            String url = sBO.getUrlReporte();
            //String url = "jdbc:sqlserver://localhost;databaseName=caja";
            String user = sBO.getUsuarioReporte();
            String pass = sBO.getPasswordReporte();
            Connection con = DriverManager.getConnection(url, user, pass);
            String fullPath = "reportes/comprobante_electronico.jasper";
            Map param;
            DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
            DocumentoPago doc = this.documentoPago;
            doc = (DocumentoPago) sBO.CargarObjeto("DocumentoPago", doc.getIdDocumentoPago());
            Cliente cliente = (Cliente) sBO.CargarObjeto("Cliente", doc.getCliente().getIdCliente());
            doc.setCliente(cliente);
            TipoDocSerie tds = (TipoDocSerie) sBO.CargarObjeto("TipoDocSerie", doc.getTipoDocSerie().getId());
            doc.setTipoDocSerie(tds);
            TipoDocPago td = (TipoDocPago) sBO.CargarObjeto("TipoDocPago", doc.getTipoDocSerie().getTipoDocPago().getIdTipoDocPago());
            doc.getTipoDocSerie().setTipoDocPago(td);
            param = new HashMap();
            double montoTotalIgv = dpBO.ObtenerSumaTotalIGV(doc.getIdDocumentoPago());
            double montoTotalComprobante = dpBO.ObtenerMontoTotalComprobante(doc.getIdDocumentoPago());
            SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
            String fechaEmision = f.format(doc.getFechaSunat());
            String tipoDocumentoAdquiriente = "";
            String nrodocumentoAdquiriente = "";
            String nombreTipoDocumento = "";
            if (doc.getCliente().getTipoCliente().equals("C")) {
                tipoDocumentoAdquiriente = "1";
                nrodocumentoAdquiriente = doc.getCliente().getPnroDocumento();
                nombreTipoDocumento = "NRO DOC:";
            } else {
                if (doc.getCliente().getTipoCliente().equals("P")) {
                    tipoDocumentoAdquiriente = "1";
                    nrodocumentoAdquiriente = doc.getCliente().getPnroDocumento();
                    nombreTipoDocumento = "NRO DOC:";
                } else {
                    if (doc.getCliente().getTipoCliente().equals("E")) {
                        tipoDocumentoAdquiriente = "6";
                        nrodocumentoAdquiriente = doc.getCliente().getEruc();
                        nombreTipoDocumento = "NRO RUC:";
                    } else {
                        if (doc.getCliente().getTipoCliente().equals("S")) {
                            tipoDocumentoAdquiriente = "6";
                            nrodocumentoAdquiriente = doc.getCliente().getSruc();
                            nombreTipoDocumento = "NRO RUC:";
                        }
                    }
                }
            }
            String valorResumen = this.ObtenerValorResumen(doc);
            if (valorResumen.isEmpty()) {
                JOptionPane.showMessageDialog(this, "NO SE ENCUENTRA VALOR RESUMEN", "ERROR", JOptionPane.ERROR_MESSAGE);
                return "";
            }
            String nombreComprobante = "";
            String representacionImpresa = "";
            if (doc.getTipoDocSerie().getTipoDocPago().getCodigoDocPago() != null) {
                if (doc.getTipoDocSerie().getTipoDocPago().getCodigoDocPago().equals("01")) {
                    nombreComprobante = "FACTURA ELECTRÓNICA";
                    representacionImpresa = "Representación impresa de la " + nombreComprobante;
                } else {
                    if (doc.getTipoDocSerie().getTipoDocPago().getCodigoDocPago().equals("03")) {
                        nombreComprobante = "BOLETA ELECTRÓNICA";
                        representacionImpresa = "Representación impresa de la " + nombreComprobante;
                    }
                }
            }
            String valorQR = "20174327026|" + doc.getTipoDocSerie().getTipoDocPago().getCodigoDocPago() + "|" + doc.getNroSerie() + "|" + String.format("%06d", doc.getNroDocumentoPago()) + "|";
            valorQR = valorQR + String.valueOf(montoTotalIgv) + "|" + String.valueOf(montoTotalComprobante) + "|" + fechaEmision + "|" + tipoDocumentoAdquiriente + "|" + nrodocumentoAdquiriente + "|" + valorResumen;
            param.put("IDDOCUMENTOPAGO", doc.getIdDocumentoPago());
            param.put("TOTALENLETRAS", NumeroLetras.convertirNumerosALetras(String.valueOf(montoTotalComprobante), doc.getMoneda()));
            param.put("REPRESENTACIONIMPRESA", representacionImpresa);
            param.put("VALORQR", valorQR);
            param.put("VALORRESUMEN", valorResumen);
            param.put("NOMBRETIPODOCUMENTO", nombreTipoDocumento);
            param.put("NOMBRECOMPROBANTE", nombreComprobante);
            param.put("PARTICIPANTES", imprimirParticipantes);

            if (!Objects.isNull(doc.getTieneDetraccion())) {
                if (doc.getTieneDetraccion().equals("S")) {
                    ManagerBO mgBO = ManagerBO.getInstance();
                    Double montoDetraccion = 0.0;
                    List<DocumentoPagoDet> detalle = dpBO.ObtenerDetalleComprobante(doc.getIdDocumentoPago());
                    if (detalle.size() > 0) {
                        for (DocumentoPagoDet dpd : detalle) {
                            montoDetraccion = montoDetraccion + dpd.getMontoDetraccion();
                        }
                        DocumentoPagoDet dpd = (DocumentoPagoDet) detalle.get(0);
                        param.put("detraccion", "Detracción S/." + montoDetraccion + (!Objects.isNull(dpd.getPorcentajeDetraccion()) ? " ( " + dpd.getPorcentajeDetraccion() + "% )" : ""));
                        if (!Objects.isNull(dpd.getCodigoBienServicioDetraccion())) {
                            CodigoMedioPago codigoMP = mgBO.obtenerCodigoMedioPago(doc.getCodigoMedioPago());
                            CodigoBienServicioDetraccion codigoBSD = mgBO.obtenerCodigoBienServicioDetraccion(dpd.getCodigoBienServicioDetraccion());
                            param.put("codigoBien", (!Objects.isNull(codigoBSD) ? codigoBSD.getDescripcion() + " (" + codigoBSD.getCodigo() + ")" : "") + ", " + (!Objects.isNull(codigoMP) ? codigoMP.getDescripcion() + " (" + codigoMP.getCodigo() + ")" : ""));
                        }
                    }
//                    CodigoMedioPago codigoMP = mgBO.obtenerCodigoMedioPago(doc.getCodigoMedioPago());
                    param.put("cuentaBancoNacion", "Cta Banco de la Nación: 00101150550");
                    Double montoTotalMenosDetraccion = montoTotalComprobante - montoDetraccion;
                    montoTotalMenosDetraccion = Math.round(montoTotalMenosDetraccion * Math.pow(10, 2)) / Math.pow(10, 2);
                    param.put("montoDetraccion", "Importe a Cobrar: S/. " + montoTotalMenosDetraccion);
                    fullPath = "reportes/comprobante_electronico_detraccion.jasper";
                }
            }
            if (doc.getTipoDocSerie().getTipoDocPago().getCodigoDocPago().equals("01")) {
                if (doc.getFormaPagoSunat() != null) {
                    param.put("FORMAPAGO", (doc.getFormaPagoSunat().equals("Credito") ? "Crédito" : doc.getFormaPagoSunat()));
                } else {
                    param.put("FORMAPAGO", "");
                }
            } else {
                param.put("FORMAPAGO", "");
            }

            param.put("REPORT_LOCALE", new Locale("en", "EN"));
            JasperPrint JPrint = JasperFillManager.fillReport(fullPath, param, con);
//            JasperPrintManager.printPage(JPrint, 0, true);
            JasperExportManager.exportReportToPdfFile(JPrint, "DOCUMENTOS_ELECTRONICOS/" + nombreComprobante);
            String rutaDocumento = "DOCUMENTOS_ELECTRONICOS/" + nombreComprobante;
            return rutaDocumento;
        } catch (Exception ex) {
            System.out.println(ex.toString());
            return "";
        }
    }

    private String ObtenerNombreComprobanteElectronico(DocumentoPago documento) {
        SeguridadBO sBO = SeguridadBO.getINSTANCE();
        TipoDocSerie tds = (TipoDocSerie) sBO.CargarObjeto("TipoDocSerie", documento.getTipoDocSerie().getId());
        documento.setTipoDocSerie(tds);
        Serie s = (Serie) sBO.CargarObjeto("Serie", documento.getTipoDocSerie().getSerie().getIdSerie());
        documento.getTipoDocSerie().setSerie(s);
        TipoDocPago td = (TipoDocPago) sBO.CargarObjeto("TipoDocPago", documento.getTipoDocSerie().getTipoDocPago().getIdTipoDocPago());
        documento.getTipoDocSerie().setTipoDocPago(td);
        String nombreArchivo = this.ruc + "-" + documento.getTipoDocSerie().getTipoDocPago().getCodigoDocPago() + "-" + documento.getNroSerie() + "-" + String.format("%08d", documento.getNroDocumentoPago());
        return nombreArchivo;
    }


    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        try {
            DocumentoPago documento = this.documentoPago;
            DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
            List<DocumentoPagoDet> lDetalle = dpBO.ObtenerDetalleComprobante(documento.getIdDocumentoPago());
            SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
            boolean tieneCurso = dpBO.ComprobanteTieneCurso(this.documentoPago.getIdDocumentoPago());
            int imprimirParticipantes = 0;
            if (tieneCurso) {
                int resp = JOptionPane.showConfirmDialog(null, "¿Desea imprimir el(los) participante(s)?", "Pregunta", JOptionPane.YES_NO_OPTION);
                if (resp == 0) {
                    imprimirParticipantes = 1;
                } else {
                    imprimirParticipantes = 0;
                }
            } else {
                imprimirParticipantes = 0;
            }
            for (DocumentoPagoDet d : lDetalle) {
                AlumnoBO aBO = AlumnoBO.getInstance();
                List<Object> lCorreos = (List<Object>) aBO.ObtenerCorreoParticipantes_SegunIdDocumentoPago(d.getIdDocumentoPagoDet());
                if (!lCorreos.isEmpty()) {
                    for (Object pobj : lCorreos) {
                        Object[] obj = (Object[]) pobj;
                        if (obj[0] != null) {
                            if (!((String) obj[0]).isEmpty()) {
                                String correoElectronico = (String) obj[0];
                                String pass = "";
                                if (obj[1] != null) {
                                    pass = (String) obj[1];
                                }
                                String evento = "";
                                if (obj[2] != null) {
                                    evento = (String) obj[2];
                                }
                                String fechaInicio = "";
                                if (obj[3] != null) {
                                    fechaInicio = f.format((Date) obj[3]);
                                }
                                Properties props = new Properties();
                                props.setProperty("mail.smtp.host", "smtp-legacy.office365.com");
                                props.setProperty("mail.smtp.starttls.enable", "true");
                                props.setProperty("mail.smtp.port", "587");
                                props.setProperty("mail.smtp.user", "ccpaqp@ccpaqp.org.pe");
                                props.setProperty("mail.smtp.auth", "true");
                                props.put("mail.smtp.ssl.trust", "smtp-legacy.office365.com");
                                Session session = Session.getDefaultInstance(props);
                                session.setDebug(true);
                                BodyPart texto = new MimeBodyPart();
                                String contenidoCorreo = "Le remito el comprobante electronico \n COLEGIO CONTADORES PUBLICOS - AREQUIPA\n";
                                texto.setText(contenidoCorreo);
                                String bienvenidaCurso = "";
                                bienvenidaCurso = "Estimado(a) participante:\n"
                                        + "Nos complace darle la bienvenida al " + evento + ", con fecha de inicio " + fechaInicio + ".\n"
                                        + "Adjuntamos el comprobante electrónico que confirma la inscripción.\n"
                                        + "\n"
                                        + "Puede acceder al link, material y grabación de las clases online mediante nuestro App 'CCPA móvil',\n"
                                        + "más información de la aplicación en https://www.ccpaqp.org.pe/appCCPA\n"
                                        + "\n"
                                        + "Sus datos de acceso al App son:\n"
                                        + "\n"
                                        + "Usuario: " + correoElectronico + "\n"
                                        + "Password: " + pass + "\n"
                                        + "\n"
                                        + "Saludos,\n"
                                        + "\n"
                                        + "Dirección de Educación y Desarrollo Profesional\n"
                                        + "Teléfonos (054) 215015, 285530 o 231385 anexo 115\n"
                                        + "Email: desarrollo@ccpaqp.org.pe\n"
                                        + "web: www.ccpaqp.org.pe\n";
                                texto.setText(bienvenidaCurso);
                                String nombreComprobante = this.ObtenerNombreComprobanteElectronico(documento);
//---------------------INICIO COMPROBANTE ELECTRONICO IMPRESO----------------------
                                BodyPart comprobante = new MimeBodyPart();
//            String nombreComprobante = this.ruc + "-" + documento.getTipoDocumento().getCodigo() + "-" + this.comprobantePago.getTipoDocumento().getCodigoSerieSunat() + "001-" + String.format("%08d", this.comprobantePago.getNro()) + ".pdf";
                                String rutaComprobante = this.GenerarPdfEnvio(imprimirParticipantes, documento);
                                comprobante.setDataHandler(new DataHandler(new FileDataSource(rutaComprobante)));
                                comprobante.setFileName(nombreComprobante + ".pdf");
//---------------------FIN COMPROBANTE ELECTRONICO IMPRESO----------------------
//---------------------INICIO ARCHIVO XML----------------------
                                BodyPart adjuntoXML = new MimeBodyPart();
                                String rutaArchivoXML = "\\\\192.168.1.67\\firma\\" + nombreComprobante + ".xml";
                                adjuntoXML.setDataHandler(new DataHandler(new FileDataSource(rutaArchivoXML)));
                                adjuntoXML.setFileName(nombreComprobante + ".xml");
//---------------------FIN ARCHIVO COMPROBANTE ELECTRONICO----------------------

                                MimeMultipart multiParte = new MimeMultipart();
                                multiParte.addBodyPart(texto);
                                multiParte.addBodyPart(adjuntoXML);
                                multiParte.addBodyPart(comprobante);
                                MimeMessage message = new MimeMessage(session);
// Se rellena el From
                                message.setFrom(new InternetAddress("ccpaqp@ccpaqp.org.pe"));
// Se rellenan los destinatarios
// Se rellena el subject
                                message.addRecipient(Message.RecipientType.TO, new InternetAddress(correoElectronico));
                                message.setSubject("Comprobante Electrónico - " + nombreComprobante);
// Se mete el texto y la foto adjunta.
                                message.setContent(multiParte);
                                Transport t = session.getTransport("smtp");
// Aqui usuario y password de gmail
                                t.connect("ccpaqp@ccpaqp.org.pe", "Rsy314564");
                                t.sendMessage(message, message.getAllRecipients());
                                t.close();
//                                JOptionPane.showMessageDialog(this, "SE ENVIÓ EL CORREO ELECTRÓNICO \n " + correoElectronico, "OK", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                    }
                }
            }
            if (chkAdicionarEnvio.isSelected() && !lbTitular.getText().isEmpty()) {
                String correoElectronico = "";
                SeguridadBO sBO = SeguridadBO.getInstance();
                Cliente cliente = (Cliente) sBO.CargarObjeto("Cliente", documento.getCliente().getIdCliente());
                if (cliente.getTipoCliente() != null) {
                    if (cliente.getTipoCliente().equals("P")) {
                        correoElectronico = (cliente.getPemail() != null ? cliente.getPemail() : "");
                    } else {
                        if (cliente.getTipoCliente().equals("C")) {
                            correoElectronico = (cliente.getCemail() != null ? cliente.getCemail() : "");
                        } else {
                            if (cliente.getTipoCliente().equals("S")) {
                                correoElectronico = (cliente.getSemail() != null ? cliente.getSemail() : "");
                            } else {
                                if (cliente.getTipoCliente().equals("E")) {
                                    correoElectronico = (cliente.getEemail() != null ? cliente.getEemail() : "");
                                } else {
                                }
                            }
                        }
                    }
                }
                Properties props = new Properties();
                props.setProperty("mail.smtp.host", "smtp-legacy.office365.com");
                props.setProperty("mail.smtp.starttls.enable", "true");
                props.setProperty("mail.smtp.port", "587");
                props.setProperty("mail.smtp.user", "ccpaqp@ccpaqp.org.pe");
                props.setProperty("mail.smtp.auth", "true");
                props.put("mail.smtp.ssl.trust", "smtp-legacy.office365.com");
                Session session = Session.getDefaultInstance(props);
                session.setDebug(true);
                BodyPart texto = new MimeBodyPart();
                String contenidoCorreo = "Le remito el comprobante electronico \n COLEGIO CONTADORES PUBLICOS - AREQUIPA\n";
                texto.setText(contenidoCorreo);
                String bienvenidaCurso = "";
                bienvenidaCurso = "Estimado(a):\n"
                        + "Adjuntamos Comprobante de pago Electrónico\n"
                        + "Saludos,\n"
                        + "\n"
                        + "COLEGIO DE CONTADORES PÚBLICOS DE AREQUIPA";
                texto.setText(bienvenidaCurso);
                String nombreComprobante = this.ObtenerNombreComprobanteElectronico(documento);
//---------------------INICIO COMPROBANTE ELECTRONICO IMPRESO----------------------
                BodyPart comprobante = new MimeBodyPart();
//            String nombreComprobante = this.ruc + "-" + documento.getTipoDocumento().getCodigo() + "-" + this.comprobantePago.getTipoDocumento().getCodigoSerieSunat() + "001-" + String.format("%08d", this.comprobantePago.getNro()) + ".pdf";
                String rutaComprobante = this.GenerarPdfEnvio(imprimirParticipantes, documento);
                comprobante.setDataHandler(new DataHandler(new FileDataSource(rutaComprobante)));
                comprobante.setFileName(nombreComprobante + ".pdf");
                //---------------------INICIO ARCHIVO XML----------------------
                BodyPart adjuntoXML = new MimeBodyPart();
                String rutaArchivoXML = "\\\\192.168.1.67\\firma\\" + nombreComprobante + ".xml";
                adjuntoXML.setDataHandler(new DataHandler(new FileDataSource(rutaArchivoXML)));
                adjuntoXML.setFileName(nombreComprobante + ".xml");
//---------------------FIN ARCHIVO COMPROBANTE ELECTRONICO----------------------

                MimeMultipart multiParte = new MimeMultipart();
                multiParte.addBodyPart(texto);
//            multiParte.addBodyPart(adjunto);
                multiParte.addBodyPart(adjuntoXML);
                multiParte.addBodyPart(comprobante);
                MimeMessage message = new MimeMessage(session);
// Se rellena el From
                message.setFrom(new InternetAddress("ccpaqp@ccpaqp.org.pe"));
                message.addRecipient(Message.RecipientType.TO, new InternetAddress(correoElectronico));
                message.setSubject("Comprobante Electrónico - " + nombreComprobante);
// Se mete el texto y la foto adjunta.
                message.setContent(multiParte);
                Transport t = session.getTransport("smtp");
// Aqui usuario y password de gmail
                t.connect("ccpaqp@ccpaqp.org.pe", "Rsy314564");
                t.sendMessage(message, message.getAllRecipients());
                t.close();
//                JOptionPane.showMessageDialog(this, "SE ENVIÓ EL CORREO ELECTRÓNICO \n " + correoElectronico, "OK", JOptionPane.INFORMATION_MESSAGE);
            }
            JOptionPane.showMessageDialog(this, "SE ENVIÓ EL CORREO ELECTRÓNICO", "OK", JOptionPane.INFORMATION_MESSAGE);
        } catch (MessagingException ex) {
            JOptionPane.showMessageDialog(this, "NO SE PUDO ENVIAR EL CORREO ELECTRÓNICO", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        this.dispose();
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmEnvioCorreoElectronico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmEnvioCorreoElectronico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmEnvioCorreoElectronico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmEnvioCorreoElectronico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmEnvioCorreoElectronico dialog = new frmEnvioCorreoElectronico(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JCheckBox chkAdicionarEnvio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbTitular;
    private javax.swing.JTextArea txtCorreos;
    // End of variables declaration//GEN-END:variables
}
