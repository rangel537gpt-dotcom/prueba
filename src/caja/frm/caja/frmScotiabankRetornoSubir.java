/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caja.frm.caja;

import caja.bo.AnioMesBO;
import caja.bo.ClienteBO;
//import caja.bo.DocumentoPagoBO;
//import caja.bo.SeguridadBO;
import caja.frm.frmPrincipal;
import caja.mapeo.entidades.AnioMes;
import caja.mapeo.entidades.Bbva;
import caja.mapeo.entidades.BbvaRetorno;
import caja.mapeo.entidades.BbvaRetornoDetalle;
import caja.mapeo.entidades.Cliente;
import caja.mapeo.entidades.Scotiabank;
import caja.mapeo.entidades.ScotiabankRetorno;
import caja.mapeo.entidades.ScotiabankRetornoDetalle;
//import caja.mapeo.entidades.ConceptoPagoDetalle;
//import caja.mapeo.entidades.DocumentoPago;
//import caja.mapeo.entidades.DocumentoPagoDet;
//import caja.mapeo.entidades.TipoDocSerie;
//import caja.mapeo.entidades.BbvaContador;
//import java.awt.Desktop;
//import java.io.BufferedWriter;
import java.io.File;
//import java.io.FileWriter;
//import java.io.IOException;
//import java.io.PrintWriter;
//import java.text.SimpleDateFormat;
//import java.util.Calendar;
//import java.util.Date;
import java.util.List;
//import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
//import java.util.logging.Level;
//import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author user
 */
public class frmScotiabankRetornoSubir extends javax.swing.JInternalFrame {

//    private int nroOperacion = 0;
    private Scotiabank scotiabank = null;
    private ScotiabankRetorno scotiabankRetorno = null;
    private List<ScotiabankRetornoDetalle> lista = null;

    /**
     * Creates new form frmBBVA
     */
    public frmScotiabankRetornoSubir() {
        initComponents();
        tDetalle.setAutoResizeMode(tDetalle.AUTO_RESIZE_OFF);
        TableColumn columna = tDetalle.getColumn("NRO");
        columna.setPreferredWidth(40);
        columna.setMinWidth(40);
        columna.setMaxWidth(40);
        columna = tDetalle.getColumn("NOMBRE");
        columna.setPreferredWidth(200);
        columna.setMinWidth(200);
        columna.setMaxWidth(200);
        columna = tDetalle.getColumn("REFERENCIA");
        columna.setPreferredWidth(140);
        columna.setMinWidth(140);
        columna.setMaxWidth(140);
        columna = tDetalle.getColumn("IMPORTE");
        columna.setPreferredWidth(70);
        columna.setMinWidth(70);
        columna.setMaxWidth(70);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbUbicacion = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tDetalle = new javax.swing.JTable();
        txtFiltroNombre = new javax.swing.JTextField();
        txtFiltroNombre.addKeyListener(
            new KeyAdapter(){
                public void keyReleased (KeyEvent e){
                    FiltrarContadorNombre();
                }} );
                jScrollPane3 = new javax.swing.JScrollPane();
                txtCabecera = new javax.swing.JTextArea();

                setClosable(true);
                setTitle("Scotiabank");
                setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/icono.png"))); // NOI18N
                setPreferredSize(new java.awt.Dimension(758, 605));

                lbUbicacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                lbUbicacion.setText("DATOS:");

                jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/opciones.png"))); // NOI18N
                jButton2.setText("OPCIONES");
                jButton2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton2ActionPerformed(evt);
                    }
                });

                tDetalle.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {

                    },
                    new String [] {
                        "NRO", "NOMBRE", "REFERENCIA", "IMPORTE", "NRO RECIBO", "M. PAGO", "NRO OPE.", "H. PAGO", "FEC. PAGO", "CANAL"
                    }
                ) {
                    boolean[] canEdit = new boolean [] {
                        false, false, false, false, false, false, false, false, false, false
                    };

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                jScrollPane2.setViewportView(tDetalle);

                txtCabecera.setColumns(20);
                txtCabecera.setRows(5);
                jScrollPane3.setViewportView(txtCabecera);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtFiltroNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3))
                        .addContainerGap())
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbUbicacion)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFiltroNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                        .addContainerGap())
                );

                pack();
            }// </editor-fold>//GEN-END:initComponents

    public void SubirArchivo() {
        Object[] o = null;
        if (this.lista != null) {
            ClienteBO cBO = ClienteBO.getInstance();
            this.scotiabankRetorno.setSeSubioArchivo("S");
            cBO.GuardarScotiabankRetorno(this.scotiabankRetorno);
            for (ScotiabankRetornoDetalle rd : this.lista) {
                rd.setIdScotiabankRetorno(this.scotiabankRetorno.getId());
                cBO.GuardarScotiabankRetornoDetalle(rd);
            }
            JOptionPane.showMessageDialog(this, "SE SUBIÃ“ LOS DATOS", "OK", JOptionPane.INFORMATION_MESSAGE);
        }
    }

//    private void GenerarComprobantes() {
//        ClienteBO cBO = ClienteBO.getInstance();
//        List l = cBO.ObtenerBbvaRetornoDetalle_SegunIdBbvaRetorno(this.bbvaRetorno.getId());
//        for (Object pobj : l) {
//            Object[] obj = (Object[]) pobj;
//            int idCliente = (int) obj[0];
//            Date fechaPago = (Date) obj[1];
//            cBO.GenerarComprobantePago_SegunBbvaRetorno(this.bbvaRetorno.getId(), idCliente, fechaPago);
//        }
//    }
    public void GenerarComprobante() {
        frmPrincipal f = (frmPrincipal) this.getParent().getParent().getParent().getParent().getParent();
        if (this.scotiabankRetorno != null) {
            if (this.scotiabankRetorno.getSeGeneroComprobantes() != null) {
                if (this.scotiabankRetorno.getId() != 0) {
                    if (this.scotiabankRetorno.getSeGeneroComprobantes().equals("N")) {
                        f.AbrirFormularioGenerarOperacionScotiabank(this, this.scotiabank, this.scotiabankRetorno, 2);
                    } else {
                        JOptionPane.showMessageDialog(this, "NO SE PUEDE VOLVER A GENERAR LOS COMPROBANTES", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "PRIMERO DEBE SUBIR LA INFORMACIÃ“N", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                f.AbrirFormularioGenerarOperacionScotiabank(this, this.scotiabank, this.scotiabankRetorno, 2);
            }
        }
    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        frmPrincipal fPrin = (frmPrincipal) this.getParent().getParent().getParent().getParent().getParent();
        fPrin.AbrirFormularioScotiabankOpciones(this, 1, this.scotiabankRetorno);
    }//GEN-LAST:event_jButton2ActionPerformed

    public void CargarDatos(Scotiabank b) {
        this.scotiabank = b;
//        ClienteBO cBO = ClienteBO.getInstance();
//        Bbva b = cBO.ObtenerBbva(this.nroOperacion);
        lbUbicacion.setText("NRO OP: " + b.getNroOperacion() + " | FECHA OP: " + b.getFechaOperacion());
//        this.lista = cBO.ObtenerBbvaContador_SegunOperacion(b.getNroOperacion());
//        DefaultTableModel model = (DefaultTableModel) tRetorno.getModel();
//        model.setNumRows(0);
//        int contador = 0;
//        for (Object c : lista) {
//            Object[] o = (Object[]) c;
//            String cod = (String) o[0];
//            String apePat = (String) o[1];
//            String apeMat = (String) o[2];
//            String nombre = (String) o[3];
//            int id = (int) o[4];
//            model.addRow(new Object[contador]);
//            tRetorno.setValueAt(contador + 1, contador, 0);
//            tRetorno.setValueAt(cod, contador, 1);
//            tRetorno.setValueAt(apePat + " " + apeMat + " " + nombre, contador, 2);
//            tRetorno.setValueAt(id, contador, 3);
//            contador = contador + 1;
//        }
    }

    public void GenerarOperacionBbva(int aDesde, int aHasta, int mDesde, int mHasta) {
        Thread queryThread = new Thread() {
            public void run() {
                ClienteBO cBO = ClienteBO.getInstance();
                String[] Movimientos = {"Carga Parcial", "Carga Total", "Eliminacion de Registros"};
                String TipoMovimiento = (String) JOptionPane.showInputDialog(null,
                        "Cual es el tipo de Movimiento?",
                        "Elegir",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        Movimientos,
                        Movimientos[0]);
                if (TipoMovimiento.equals("Carga Parcial")) {
                    TipoMovimiento = "P";
                } else {
                    if (TipoMovimiento.equals("Carga Total")) {
                        TipoMovimiento = "T";
                    } else {
                        TipoMovimiento = "E";
                    }
                }
                AnioMesBO amBO = AnioMesBO.getInstance();
                AnioMes amDesde = amBO.ObtenerAnioMes(aDesde, mDesde);
                AnioMes amHasta = amBO.ObtenerAnioMes(aHasta, mHasta);
//                cBO.GenerarEstructuraDatosCobranzaInstitucional_BBVA(jProgressBar1, TipoMovimiento, amDesde.getNroOrden(), amHasta.getNroOrden(), TipoMovimiento);
            }
        };
        queryThread.start();
    }

    private void FiltrarContadorNombre() {
        if (lista != null) {
            String pFiltro = txtFiltroNombre.getText();
            pFiltro = pFiltro.toUpperCase();
            txtFiltroNombre.setText(pFiltro);
            DefaultTableModel model = (DefaultTableModel) tDetalle.getModel();
            model.setNumRows(0);
            int contador = 0;
            for (ScotiabankRetornoDetalle o : lista) {
                String nombreCompleto = o.getNombre();
                if (nombreCompleto.contains(pFiltro)) {
                    model.addRow(new Object[contador]);
                    tDetalle.setValueAt(contador + 1, contador, 0);
                    tDetalle.setValueAt(o.getNombre(), contador, 1);
                    tDetalle.setValueAt(o.getReferencia(), contador, 2);
                    tDetalle.setValueAt(o.getImporteOrigen(), contador, 3);
                    tDetalle.setValueAt(o.getImporteDeposito(), contador, 4);
                    tDetalle.setValueAt(o.getImporteMora(), contador, 5);
                    tDetalle.setValueAt(o.getOficinaPago(), contador, 6);
                    tDetalle.setValueAt(o.getNroMovimiento(), contador, 7);
                    tDetalle.setValueAt(o.getFechaPago(), contador, 8);
                    tDetalle.setValueAt(o.getTipoValor(), contador, 9);
                    tDetalle.setValueAt(o.getCanalEntrada(), contador, 10);
                    tDetalle.setValueAt(o, contador, 11);
                    contador = contador + 1;
                }
            }
        }
    }

    private void LeerRegistro(File abre, String registro) throws FileNotFoundException, IOException {
        AnioMesBO amBO = AnioMesBO.getInstance();
        ClienteBO cBO = ClienteBO.getInstance();
        String tipoRegistro = registro.substring(0, 1);
        if (tipoRegistro.equals("H")) {
            try {
                //            DefaultTableModel modelDetalle = (DefaultTableModel) tRetorno.getModel();
//            int contador = modelDetalle.getRowCount();
                String cuentaEmpresa = registro.substring(1, 14);
                String secServicio = registro.substring(15, 18);
                String cantRegistros = registro.substring(18, 25);
                String totalSoles = registro.substring(25, 40);
                String totalDolares = registro.substring(40, 52);
                String fechaMovimiento = registro.substring(52, 60);
//                String fecEnvio = registro.substring(59, 70);
//                String fecVigencia = registro.substring(78, 86);

                ScotiabankRetorno c = new ScotiabankRetorno();
                FileInputStream ficheroStream = new FileInputStream(abre);
                byte contenido[] = new byte[(int) abre.length()];
                ficheroStream.read(contenido);
                c.setArchivo(contenido);
                c.setNombreArchivo(abre.getName());
                c.setIdScotiabank(this.scotiabank.getId());
                c.setSeGeneroComprobantes("N");
                c.setCuentaEmpresa(cuentaEmpresa);
                c.setSecuenciaServicio(secServicio);
//                c.setRuc(rucEmpresa);
                SimpleDateFormat f = new SimpleDateFormat("yyyyMMdd");
                c.setFecha(f.parse(fechaMovimiento));
                c.setTotalPagos(Double.valueOf(totalSoles));
                c.setTotalPagos(c.getTotalPagos() / 100);
                c.setTotalPagos(Math.round(c.getTotalPagos() * Math.pow(10, 2)) / Math.pow(10, 2));
                c.setTotalRegistros(Integer.valueOf(cantRegistros));
                String cabecera = txtCabecera.getText();
                cabecera = "CUENTA EMPRESA:" + cuentaEmpresa + "\n";
                cabecera = cabecera + "SEC/SER: " + secServicio + "\n";
                cabecera = cabecera + "CANT REGISTROS: " + c.getTotalRegistros() + "\n";
                cabecera = cabecera + "FECHA ENVIO: " + c.getFecha() + "\n";
                cabecera = cabecera + "TOTAL SOLES: " + c.getTotalPagos() + "\n";
                txtCabecera.setText(cabecera);
                this.scotiabankRetorno = c;
            } catch (ParseException ex) {
                Logger.getLogger(frmScotiabankRetornoSubir.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (tipoRegistro.equals("D")) {
            DefaultTableModel modelDetalle = (DefaultTableModel) tDetalle.getModel();
            int contador = modelDetalle.getRowCount();
            //------------------------------------------------------------------
            String cuentaEmpresa = registro.substring(2, 15);
            String cuentaServicio = registro.substring(15, 18);
            String codigoUsuario = registro.substring(18, 33);
            String nroRecibo = registro.substring(33, 48);
            String nombreUsuario = registro.substring(48, 68);
            String monedaCobro = registro.substring(68, 72);
            String importe1 = registro.substring(72, 83);
            String importe2 = registro.substring(83, 94);
            String importe3 = registro.substring(94, 105);
            String importe4 = registro.substring(105, 116);
            String importe5 = registro.substring(116, 127);
            String importe6 = registro.substring(127, 138);
            String fechaVencimiento = registro.substring(138, 146);
            String fechaPago = registro.substring(146, 154);
            String tipoPago = registro.substring(154, 155);
            String medioPago = registro.substring(155, 156);
            String nroOperacion = registro.substring(156, 169);
            String referenciaCobro = registro.substring(169, 199);
            String horaPago = registro.substring(199, 207);
            String fechaRealPago = registro.substring(207, 215);
            String canal = registro.substring(215, 217);
            //------------------------------------------------------------------
            codigoUsuario = codigoUsuario.trim();
            String codColegiado = String.format("%05d", Integer.valueOf(codigoUsuario));
            referenciaCobro = referenciaCobro.trim();
            String tipoCobranza = referenciaCobro.substring(0, 5);
            String mes = referenciaCobro.substring(6, 9);
            String anio = referenciaCobro.substring(9, 13);
            int nroMes = this.ObtenerNroMes(mes);
            AnioMes am = amBO.ObtenerAnioMes(Integer.valueOf(anio), nroMes);
//            String importeOrigen = registro.substring(80, 95);
            double monto1 = Double.valueOf(importe1) / 100;
            monto1 = Math.round(monto1 * Math.pow(10, 2)) / Math.pow(10, 2);
//            String importeDestino = registro.substring(95, 110);
//            double iDestino = Double.valueOf(importeDestino) / 100;
//            iDestino = Math.round(iDestino * Math.pow(10, 2)) / Math.pow(10, 2);
//            String importeMora = registro.substring(110, 125);
//            double iMora = Double.valueOf(importeMora) / 100;
//            iMora = Math.round(iMora * Math.pow(10, 2)) / Math.pow(10, 2);

            Cliente c = cBO.ObtenerClienteSegunCodigoContador(codColegiado);
            ScotiabankRetornoDetalle r = new ScotiabankRetornoDetalle();
            r.setCuentaEmpresa(cuentaEmpresa);
            r.setSecuenciaServicio(cuentaServicio);
            r.setCodigoUsuario(codigoUsuario);
            r.setNumeroRecibo(nroRecibo);
            r.setNombreUsuario(nombreUsuario);
            r.setMonedaCobro(monedaCobro);
            r.setTipoPago(tipoPago);
            r.setMedioPago(medioPago);
            r.setNumeroOperacion(nroOperacion);
            r.setReferenciaCobro(referenciaCobro);
            r.setHoraPago(horaPago);
            r.setCanal(canal);
            r.setIdCliente(c.getIdCliente());
            r.setImporteOrigen(monto1);
            r.setImporteDeposito(monto1);
            r.setReferencia(codColegiado + referenciaCobro);
            r.setIdAnioMes(am.getId());
            SimpleDateFormat f = new SimpleDateFormat("yyyyMMdd");
            try {
                r.setFechaVencimiento(f.parse(fechaVencimiento));
                r.setFechaRealPago(f.parse(fechaRealPago));
            } catch (ParseException ex) {
                Date d = new Date();
                d.setYear(1900);
                d.setMonth(01);
                d.setDate(01);
                r.setFechaPago(d);
            }
            this.lista.add(r);
//            cBO.GuardarBbvaRetornoDetalle(r);
//            modelDetalle.setNumRows(contador);
            modelDetalle.addRow(new Object[contador]);
            tDetalle.setValueAt(contador + 1, contador, 0);
            tDetalle.setValueAt(nombreUsuario, contador, 1);
            tDetalle.setValueAt(referenciaCobro, contador, 2);
            tDetalle.setValueAt(monto1, contador, 3);
            tDetalle.setValueAt(nroRecibo, contador, 4);
            tDetalle.setValueAt(medioPago, contador, 5);
            tDetalle.setValueAt(nroOperacion, contador, 6);
            tDetalle.setValueAt(horaPago, contador, 7);
            tDetalle.setValueAt(fechaPago, contador, 8);
            tDetalle.setValueAt(canal, contador, 9);
//            tDetalle.setValueAt(r, contador, 11);
        }
        if (tipoRegistro.equals("T")) {
            String cuentaEmpresa = registro.substring(2, 15);
            String secuenciaServicio = registro.substring(15, 18);
            String codigoConcepto = registro.substring(18, 20);
            String descripcionConcepto = registro.substring(20, 50);
            String cuentaAbono = registro.substring(50, 64);
            String importe = registro.substring(64, 79);
            double monto = Double.valueOf(importe) / 100;
            monto = Math.round(monto * Math.pow(10, 2)) / Math.pow(10, 2);
            String cabecera = txtCabecera.getText();
            this.scotiabankRetorno.setCuentaEmpresa(cuentaEmpresa);
            this.scotiabankRetorno.setSecuenciaServicio(secuenciaServicio);
            this.scotiabankRetorno.setDescripcionConcepto(descripcionConcepto);
            this.scotiabankRetorno.setCodigoConcepto(codigoConcepto);
            this.scotiabankRetorno.setCuentaAbono(cuentaAbono);
            this.scotiabankRetorno.setImporte(monto);
            cabecera = cabecera + "IMPORTE:" + importe + "\n";
//            cabecera = cabecera + "TOTAL PAGOS:" + totalPagos + "\n";
//            cabecera = cabecera + "TOTAL DEPOSITOS:" + totalDeposito + "\n";
            txtCabecera.setText(cabecera);
        }
    }

    private void CargarArchivo() {
        try {
            JFileChooser file = new JFileChooser();
            file.showOpenDialog(this);
            File abre = file.getSelectedFile();
            DefaultTableModel modelDetalle = (DefaultTableModel) tDetalle.getModel();
            modelDetalle.setRowCount(0);
            if (abre != null) {
                if (abre.getName().endsWith(".txt") || abre.getName().endsWith(".TXT")) {
                    this.lista = new ArrayList();
                    txtCabecera.setText("UBICACION ARCHIVO: " + abre.toString());
                    String cadena;
                    FileReader f = new FileReader(abre.toString());
                    BufferedReader b = new BufferedReader(f);
                    while ((cadena = b.readLine()) != null) {
                        this.LeerRegistro(abre, cadena);
                    }
                    b.close();
                } else {
                    JOptionPane.showMessageDialog(null, "DEBE SELECCIONAR ARCHIVOS CON EXTENSION .PDF");
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex + ""
                    + "\nNo se ha encontrado el archivo",
                    "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        }
    }

    public void CargarArchivo(File abre) {
        try {
            DefaultTableModel modelDetalle = (DefaultTableModel) tDetalle.getModel();
            modelDetalle.setRowCount(0);
            if (abre != null) {
                if (abre.getName().endsWith(".txt") || abre.getName().endsWith(".TXT")) {
                    this.lista = new ArrayList();
                    txtCabecera.setText("UBICACION ARCHIVO: " + abre.toString());
                    String cadena;
                    FileReader f = new FileReader(abre.toString());
                    BufferedReader b = new BufferedReader(f);
                    while ((cadena = b.readLine()) != null) {
                        this.LeerRegistro(abre, cadena);
                    }
                    b.close();
                } else {
                    JOptionPane.showMessageDialog(null, "DEBE SELECCIONAR ARCHIVOS CON EXTENSION .PDF");
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex + ""
                    + "\nNo se ha encontrado el archivo",
                    "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        }
    }

    private String RellenarEspacionBlanco(String cadena, int cant) {
        int contador = cadena.length();
        while (contador < cant) {
            cadena = cadena + " ";
            contador++;
        }
        return cadena;
    }

    private String RellenarCeros(String cadena, int cant) {
        int contador = 0;
        while (contador < cant) {
            cadena = cadena + "0";
            contador++;
        }
        return cadena;
    }

    private String ObtenerMes(int mes) {
        String m = "";
        if (mes == 1) {
            m = "ENE";
        }
        if (mes == 2) {
            m = "FEB";
        }
        if (mes == 3) {
            m = "MAR";
        }
        if (mes == 4) {
            m = "ABR";
        }
        if (mes == 5) {
            m = "MAY";
        }
        if (mes == 6) {
            m = "JUN";
        }
        if (mes == 7) {
            m = "JUL";
        }
        if (mes == 8) {
            m = "AGO";
        }
        if (mes == 9) {
            m = "SEP";
        }
        if (mes == 10) {
            m = "OCT";
        }
        if (mes == 11) {
            m = "NOV";
        }
        if (mes == 12) {
            m = "DIC";
        }
        return m;
    }

    private int ObtenerNroMes(String mes) {
        int m = 1;
        if (mes.equals("ENE")) {
            m = 1;
        }
        if (mes.equals("FEB")) {
            m = 2;
        }
        if (mes.equals("MAR")) {
            m = 3;
        }
        if (mes.equals("ABR")) {
            m = 4;
        }
        if (mes.equals("MAY")) {
            m = 5;
        }
        if (mes.equals("JUN")) {
            m = 6;
        }
        if (mes.equals("JUL")) {
            m = 7;
        }
        if (mes.equals("AGO")) {
            m = 8;
        }
        if (mes.equals("SEP")) {
            m = 9;
        }
        if (mes.equals("OCT")) {
            m = 10;
        }
        if (mes.equals("NOV")) {
            m = 11;
        }
        if (mes.equals("DIC")) {
            m = 11;
        }
        return m;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbUbicacion;
    private javax.swing.JTable tDetalle;
    private javax.swing.JTextArea txtCabecera;
    private javax.swing.JTextField txtFiltroNombre;
    // End of variables declaration//GEN-END:variables
}
