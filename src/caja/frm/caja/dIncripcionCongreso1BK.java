/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caja.frm.caja;

import caja.bo.CongresoBO;
import caja.bo.DocumentoPagoBO;
import caja.frm.frmPrincipal;
import caja.mapeo.entidades.Cliente;
import caja.mapeo.entidades.Congreso;
import caja.mapeo.entidades.CongresoParticipantes;
import caja.mapeo.entidades.DocumentoPagoDet;
import caja.mapeo.entidades.TipoDocIdentidad;
//import caja.mapeo.entidades.TipoDocIdentidad;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.event.KeyEvent;
import java.awt.event.KeyAdapter;
import javax.swing.JTextField;

/**
 *
 * @author user
 */
public class dIncripcionCongreso1BK extends javax.swing.JDialog {

    private frmComprobantePagoDetalle fDetalle;
    private DocumentoPagoDet detalle;

    /**
     * Creates new form dIncripcionCongreso
     */
    public dIncripcionCongreso1BK(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        TableColumn columna = tDetalle.getColumn("NRO");
        columna.setPreferredWidth(40);
        columna.setMinWidth(40);
        columna.setMaxWidth(40);
        columna = tDetalle.getColumn("PARTICIPANTEOBJ");
        columna.setPreferredWidth(0);
        columna.setMinWidth(0);
        columna.setMaxWidth(0);
    }

    public void CargarDatos(frmComprobantePagoDetalle f, DocumentoPagoDet dpd, List<Congreso> lCongreso) {
        this.fDetalle = f;
        this.detalle = dpd;
        txtNombreConcepto.setText(dpd.getConceptoPagoDetalle().getDescripcion());
//        txtNombre.setText(dpd.getDocumentoPago().getCliente().getPapePat() + " " + dpd.getDocumentoPago().getCliente().getPapeMat() + " " + dpd.getDocumentoPago().getCliente().getPnombre());
        for (Congreso c : lCongreso) {
            cbCongreso.addItem(c);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbCongreso = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tDetalle = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        cbTipoParticipante = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtNombreConcepto = new javax.swing.JTextField();
        cbNombre = new javax.swing.JComboBox();
        cbNombre.getEditor().getEditorComponent().addKeyListener(
            new KeyAdapter(){
                //@Override
                public void keyReleased (KeyEvent e){
                    if (e.getKeyCode() < 37 || e.getKeyCode() > 40 ) {
                        if( e.getKeyCode() !=KeyEvent.VK_ENTER )
                        {
                            BuscarContadorPorNombre();
                        }
                        else
                        {
                            String txt = ((JTextField) cbNombre.getEditor().getEditorComponent()).getText();
                            if( !txt.isEmpty() ){
                                cbTipoParticipante.requestFocus();
                            }
                        }
                    }
                }} );
                cbTipoPersona = new javax.swing.JComboBox();
                jLabel2 = new javax.swing.JLabel();
                cbCodigo = new javax.swing.JComboBox();
                cbCodigo.getEditor().getEditorComponent().addKeyListener(
                    new KeyAdapter(){
                        //@Override
                        public void keyReleased (KeyEvent e){
                            if (e.getKeyCode() < 37 || e.getKeyCode() > 40 ) {
                                String txt = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
                                if( e.getKeyCode() == KeyEvent.VK_ENTER && !txt.isEmpty() ){
                                    cbNombre.requestFocus();
                                }else{
                                    BuscarContadorPorCodigo();}
                            }
                        }} );
                        btnCrearPersona = new javax.swing.JButton();

                        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

                        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                        jLabel1.setText("CONGRESO:");

                        tDetalle.setModel(new javax.swing.table.DefaultTableModel(
                            new Object [][] {

                            },
                            new String [] {
                                "NRO", "DNI", "APE PAT", "APE MAT", "NOMBRES", "TIPO", "PARTICIPANTEOBJ"
                            }
                        ) {
                            boolean[] canEdit = new boolean [] {
                                false, false, false, false, false, false, false
                            };

                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                            }
                        });
                        tDetalle.addKeyListener(new java.awt.event.KeyAdapter() {
                            public void keyPressed(java.awt.event.KeyEvent evt) {
                                tDetalleKeyPressed(evt);
                            }
                        });
                        jScrollPane1.setViewportView(tDetalle);

                        jLabel3.setText("DNI/COD:");

                        btnAgregar.setText("AGREGAR");
                        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnAgregarActionPerformed(evt);
                            }
                        });

                        cbTipoParticipante.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ORDINARIO", "OBSERVADOR", "ACOMPAÃ‘ANTE", "ESTUDIANTE" }));

                        jLabel6.setText("TIPO:");

                        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/Guardar2.png"))); // NOI18N
                        btnGuardar.setText("GUARDAR");
                        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnGuardarActionPerformed(evt);
                            }
                        });

                        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                        jLabel7.setText("CONCEPTO:");

                        txtNombreConcepto.setEditable(false);

                        cbNombre.setEditable(true);
                        cbNombre.addItemListener(new java.awt.event.ItemListener() {
                            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                                cbNombreItemStateChanged(evt);
                            }
                        });

                        cbTipoPersona.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CONTADOR", "PERSONA" }));
                        cbTipoPersona.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cbTipoPersonaActionPerformed(evt);
                            }
                        });

                        jLabel2.setText("NOMBRE:");

                        cbCodigo.setEditable(true);
                        cbCodigo.addItemListener(new java.awt.event.ItemListener() {
                            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                                cbCodigoItemStateChanged(evt);
                            }
                        });

                        btnCrearPersona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/addPerson.png"))); // NOI18N
                        btnCrearPersona.setText("CREAR PERSONA");
                        btnCrearPersona.setEnabled(false);
                        btnCrearPersona.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnCrearPersonaActionPerformed(evt);
                            }
                        });

                        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                        getContentPane().setLayout(layout);
                        layout.setHorizontalGroup(
                            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cbTipoPersona, 0, 87, Short.MAX_VALUE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbCongreso, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel3)
                                                    .addComponent(cbCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel2)
                                                    .addComponent(cbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel6)
                                                        .addGap(0, 0, Short.MAX_VALUE))
                                                    .addComponent(cbTipoParticipante, 0, 87, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnAgregar))
                                            .addComponent(txtNombreConcepto, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCrearPersona)
                                        .addGap(183, 183, 183)
                                        .addComponent(btnGuardar)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
                        );
                        layout.setVerticalGroup(
                            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(txtNombreConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(cbCongreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnAgregar)
                                    .addComponent(cbTipoParticipante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbTipoPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnCrearPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        );

                        pack();
                    }// </editor-fold>//GEN-END:initComponents

    private void BuscarContadorPorCodigo() {
        String txt = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
        txt = txt.toUpperCase();
        cbCodigo.removeAllItems();
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        if (this.cbTipoPersona.getSelectedItem().toString().equals("CONTADOR")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("C")) {
                    if (cli.getCcodigoCole().contains(txt)) {
                        cbCodigo.addItem(cli.getCcodigoCole());
                    }
                }
            }
            cbCodigo.setSelectedIndex(-1);
            cbCodigo.hidePopup();
            cbCodigo.showPopup();
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(txt);
        }
        if (this.cbTipoPersona.getSelectedItem().toString().equals("PERSONA")) {
            for (Cliente cli : lClientes) {
                //System.out.println("ID: " + cli.getIdCliente());
                if (cli.getTipoCliente().equals("P")) {
                    if (cli.getPnroDocumento() != null) {
                        if (cli.getPnroDocumento().contains(txt)) {
                            cbCodigo.addItem(cli.getPnroDocumento());
                        }
                    }
                }
            }
            cbCodigo.setSelectedIndex(-1);
            cbCodigo.hidePopup();
            cbCodigo.showPopup();
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(txt);
        }
    }

    private void BuscarContadorPorNombre() {
        String txt = ((JTextField) cbNombre.getEditor().getEditorComponent()).getText();
        txt = txt.toUpperCase();
        cbNombre.removeAllItems();
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        if (this.cbTipoPersona.getSelectedItem().toString().equals("CONTADOR")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("C")) {
                    String nombre = cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                    if (nombre.contains(txt)) {
                        cbNombre.addItem(cli.getCcodigoCole() + " | " + cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre());
                    }
                }
            }
            cbNombre.setSelectedIndex(-1);
            cbNombre.hidePopup();
            cbNombre.showPopup();
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(txt);
        }
        if (this.cbTipoPersona.getSelectedItem().toString().equals("PERSONA")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("P")) {
                    String nombre = cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                    if (nombre.contains(txt)) {
                        cbNombre.addItem(cli.getPnroDocumento() + " | " + nombre);
                    }
                }
            }
            cbNombre.setSelectedIndex(-1);
            cbNombre.hidePopup();
            cbNombre.showPopup();
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(txt);
        }
    }

    public void AgregarPersona(Cliente c) {
        ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(c.getPnroDocumento());
        ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(c.getPapePat() + " " + c.getPapeMat() + " " + c.getPnombre());
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        dpBO.ObtenerTodosClientes_Recarga();
//        lClientes.add(c);
    }


    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        String codigo = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
        String nombreCliente = ((JTextField) cbNombre.getEditor().getEditorComponent()).getText();
        if (nombreCliente.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "DEBE LLENAR EL CAMPO NOMBRE",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (nombreCliente.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "DEBE LLENAR EL CAMPO NOMBRE",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        Cliente cliente = null;
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        if (this.cbTipoPersona.getSelectedItem().toString().equals("CONTADOR")) {
            for (Cliente cl : lClientes) {
                if (cl.getTipoCliente().equals("C") && cl.getCcodigoCole().equals(codigo)) {
                    cliente = cl;
                    break;
                }
            }
            if (cliente == null) {
                JOptionPane.showMessageDialog(this,
                        "DEBE ELEGIR UN CONTADOR",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (this.cbTipoPersona.getSelectedItem().toString().equals("PERSONA")) {
            for (Cliente cl : lClientes) {
                if (cl.getTipoCliente().equals("P")) {
                    if (cl.getPnroDocumento() != null) {
                        if (cl.getPnroDocumento().equals(codigo)) {
                            cliente = cl;
                            break;
                        }
                    }
                }
            }
            if (cliente == null) {
                JOptionPane.showMessageDialog(this,
                        "DEBE ELEGIR UNA PERSONA",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        DefaultTableModel modelDetalle = (DefaultTableModel) tDetalle.getModel();
        if (modelDetalle.getRowCount() > this.detalle.getCantidad()) {
            JOptionPane.showMessageDialog(this,
                    "NO PUEDE HABER MAS DE " + this.detalle.getCantidad() + " PARTICIPANTES",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
        CongresoParticipantes cp = new CongresoParticipantes();
        cp.setTipoDocIdentidad(new TipoDocIdentidad(1));
        if (cliente.getPnroDocumento() != null) {
            cp.setNroDocIdentidad(cliente.getPnroDocumento());
        }
        if (cliente.getPapePat() != null) {
            cp.setApePat(cliente.getPapePat());
        }
        if (cliente.getPapeMat() != null) {
            cp.setApeMat(cliente.getPapeMat());
        }
        if (cliente.getPnombre() != null) {
            cp.setNombres(cliente.getPnombre());
        }
        cp.setCliente(cliente);
        cp.setCongreso((Congreso) cbCongreso.getSelectedItem());
        cp.setDocumentoPagoDet(this.detalle);
        cp.setEntregoMaterial("N");
        if (cbTipoParticipante.getSelectedItem().equals("ORDINARIO")) {
            cp.setTipoParticipante(1);
        }
        if (cbTipoParticipante.getSelectedItem().equals("OBSERVADOR")) {
            cp.setTipoParticipante(2);
        }
        if (cbTipoParticipante.getSelectedItem().equals("ACOMPAÃ‘ANTE")) {
            cp.setTipoParticipante(3);
        }
        if (cbTipoParticipante.getSelectedItem().equals("ESTUDIANTE")) {
            cp.setTipoParticipante(4);
        }
        int numFilas = modelDetalle.getRowCount();
        modelDetalle.setNumRows(numFilas);
        modelDetalle.addRow(new Object[numFilas]);
        tDetalle.setValueAt(numFilas + 1, numFilas, 0);
        tDetalle.setValueAt(cp.getNroDocIdentidad(), numFilas, 1);
        tDetalle.setValueAt(cp.getApePat(), numFilas, 2);
        tDetalle.setValueAt(cp.getApeMat(), numFilas, 3);
        tDetalle.setValueAt(cp.getNombres(), numFilas, 4);
        if (cp.getTipoParticipante() == 1) {
            tDetalle.setValueAt("ORDINARIO", numFilas, 5);
        }
        if (cp.getTipoParticipante() == 2) {
            tDetalle.setValueAt("OBSERVADOR", numFilas, 5);
        }
        if (cp.getTipoParticipante() == 3) {
            tDetalle.setValueAt("ACOMPAÃ‘ANTE", numFilas, 5);
        }
        if (cp.getTipoParticipante() == 4) {
            tDetalle.setValueAt("ESTUDIANTE", numFilas, 5);
        }
//        tDetalle.setValueAt(cp.getTipoParticipante(), numFilas, 5);
        tDetalle.setValueAt(cp, numFilas, 6);

        ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
        ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");

    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        CongresoBO cBO = CongresoBO.getInstance();
//        cBO.GuardarCongresoParticipantes(cp);

        DefaultTableModel modelDetalle = (DefaultTableModel) tDetalle.getModel();
        int numFilas = modelDetalle.getRowCount();
        if (numFilas > 0) {
            for (int i = 0; i < numFilas; i++) {
                CongresoParticipantes cp = (CongresoParticipantes) modelDetalle.getValueAt(i, 6);
                boolean seGuardo = cBO.GuardarCongresoParticipantes(cp);
                if (!seGuardo) {
                    JOptionPane.showMessageDialog(this,
                            "NO SE GUARDO EL DETALLE",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    JOptionPane.showMessageDialog(this,
                            "SE GUARDÃ“ LOS DATOS",
                            "OK",
                            JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "DEBE INGRESAR DETALLE AL COMPROBANTE",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void cbTipoPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoPersonaActionPerformed
        if (cbTipoPersona.getSelectedItem().equals("PERSONA")) {
            btnCrearPersona.setEnabled(true);
        } else {
            btnCrearPersona.setEnabled(false);
        }
    }//GEN-LAST:event_cbTipoPersonaActionPerformed

    private void ObtenerDatosSegunCodigo(String codigo) {
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        if (this.cbTipoPersona.getSelectedItem().toString().equals("CONTADOR")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("C")) {
                    if (cli.getCcodigoCole().equals(codigo)) {
                        String nombre = cli.getCcodigoCole() + " | " + cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                        ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(nombre);
//                        lbDireccion.setText(cli.getPdireccionDomicilio());
                        return;
                    }
                }
            }
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
//            lbDireccion.setText("");
        }

        if (this.cbTipoPersona.getSelectedItem().toString().equals("PERSONA")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("P")) {
                    if (cli.getPnroDocumento() != null) {
                        if (cli.getPnroDocumento().equals(codigo)) {
                            //System.out.println("ID: " + cli.getIdCliente());
                            String nombre = "";
                            String apePat = "";
                            String apeMat = "";
                            if (cli.getPnombre() != null) {
                                nombre = cli.getPnombre();
                            }
                            if (cli.getPapePat() != null) {
                                apePat = cli.getPapePat();
                            }
                            if (cli.getPapeMat() != null) {
                                apeMat = cli.getPapeMat();
                            }
                            String nombreCompleto = apePat + " " + apeMat + " " + nombre;
                            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(nombreCompleto);
//                            if (cli.getPdireccionDomicilio() != null) {
//                                lbDireccion.setText(cli.getPdireccionDomicilio());
//                            }
                            return;
                        }
                    }
                }
            }
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
//            lbDireccion.setText("");
        }
    }

    private void ObtenerDatosSegunNombre(String nombre) {
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        if (this.cbTipoPersona.getSelectedItem().toString().equals("CONTADOR")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("C")) {
                    String nombreContador = cli.getCcodigoCole() + " | " + cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                    if (nombreContador.equals(nombre)) {
                        ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(cli.getCcodigoCole());
//                        lbDireccion.setText(cli.getPdireccionDomicilio());
                        return;
                    }
                }
            }
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
//            lbDireccion.setText("");
        }

        if (this.cbTipoPersona.getSelectedItem().toString().equals("PERSONA")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("P")) {
                    String nombrePersona = cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                    String nombrePersonaDNI = cli.getPnroDocumento() + " | " + cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                    //String dni = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
                    if (nombrePersona.equals(nombre)) {
                        //if (cli.getPnroDocumento().equals(dni)) {
                        ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(cli.getPnroDocumento());
//                        lbDireccion.setText(cli.getPdireccionDomicilio());
                        return;
                    }
                    if (nombrePersonaDNI.equals(nombre)) {
                        //if (cli.getPnroDocumento().equals(dni)) {
                        ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(cli.getPnroDocumento());
//                        lbDireccion.setText(cli.getPdireccionDomicilio());
                        return;
                    }
                }
            }
            //((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
//            lbDireccion.setText("");
        }
    }


    private void cbCodigoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCodigoItemStateChanged
        String codigo = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
        this.ObtenerDatosSegunCodigo(codigo);
    }//GEN-LAST:event_cbCodigoItemStateChanged

    private void cbNombreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbNombreItemStateChanged
        String nombre = ((JTextField) cbNombre.getEditor().getEditorComponent()).getText();
        this.ObtenerDatosSegunNombre(nombre);
    }//GEN-LAST:event_cbNombreItemStateChanged

    private void tDetalleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tDetalleKeyPressed
//        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int fila = tDetalle.getSelectedRow();
            if (fila >= 0) {
                DefaultTableModel model = (DefaultTableModel) tDetalle.getModel();
                model.removeRow(fila);
            }
        }
    }//GEN-LAST:event_tDetalleKeyPressed

    private void btnCrearPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearPersonaActionPerformed
        frmPrincipal f = (frmPrincipal) this.getParent();
        f.AbrirFormularioCrearPersonaCongreso(this);
    }//GEN-LAST:event_btnCrearPersonaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dIncripcionCongreso1BK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dIncripcionCongreso1BK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dIncripcionCongreso1BK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dIncripcionCongreso1BK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                dIncripcionCongreso1BK dialog = new dIncripcionCongreso1BK(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCrearPersona;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox cbCodigo;
    private javax.swing.JComboBox cbCongreso;
    private javax.swing.JComboBox cbNombre;
    private javax.swing.JComboBox cbTipoParticipante;
    private javax.swing.JComboBox cbTipoPersona;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tDetalle;
    private javax.swing.JTextField txtNombreConcepto;
    // End of variables declaration//GEN-END:variables
}
