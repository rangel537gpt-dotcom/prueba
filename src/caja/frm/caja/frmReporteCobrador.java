/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caja.frm.caja;

import caja.bo.ClienteBO;
import caja.bo.ContadorBO;
import caja.bo.DocumentoPagoBO;
//import caja.bo.ReporteCuentaCorriente;
import caja.bo.ReporteCuentaCorrienteCobrador;
import caja.bo.CuotasBO;
import caja.frm.frmPrincipal;
import caja.mapeo.entidades.Cliente;
import caja.mapeo.entidades.Cobrador;
import caja.mapeo.entidades.Cuotas;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Date;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author juan carlos
 */
public class frmReporteCobrador extends javax.swing.JInternalFrame {

    /**
     * Creates new form frmCobrador
     */
    public frmReporteCobrador() {
        initComponents();
        DocumentoPagoBO dBO = DocumentoPagoBO.getInstance();
        List<Cobrador> lCobrador = dBO.ObtenerTodosCobradores();
        cbCobrador.addItem("NINGUNO");
        for (Cobrador co : lCobrador) {
            if (co.getEstado() != null) {
                if (co.getEstado().equals("H")) {
                    cbCobrador.addItem(co);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnCobrador = new javax.swing.JButton();
        cbCobrador = new javax.swing.JComboBox();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reporte de Cobrador");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/icono.png"))); // NOI18N

        jLabel1.setText("Cobrador:");

        btnCobrador.setText("GENERAR REPORTE");
        btnCobrador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCobradorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(cbCobrador, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(btnCobrador, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(116, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbCobrador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCobrador)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCobradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCobradorActionPerformed
        frmPrincipal fPrin = (frmPrincipal) this.getParent().getParent().getParent().getParent().getParent();
        Thread queryThread = new Thread() {
            public void run() {
                frmCargando fCargando = new frmCargando();
                fPrin.AgregarFormulario(fCargando);
                int x = (fPrin.getWidth() - fCargando.getWidth()) / 2;
                int y = (fPrin.getHeight() - fCargando.getHeight()) / 2;
                fCargando.setLocation(x, y);
                fCargando.setVisible(true);
                fCargando.toFront();
                ImprimirReporteCobrador();
                fCargando.dispose();
            }
        };
        queryThread.start();
    }//GEN-LAST:event_btnCobradorActionPerformed

    private void LlenarCuentaCorriente(Cliente cliente, ReporteCuentaCorrienteCobrador pr, List listado) {
        CuotasBO cuBO = CuotasBO.getInstance();
        ContadorBO cBO = ContadorBO.getInstance();
        List<Object> lCuotas = cBO.ObtenerCuotasPendientesContador(cliente.getIdCliente());
        for (Object pobj : lCuotas) {
            ReporteCuentaCorrienteCobrador r = new ReporteCuentaCorrienteCobrador();
            r.setCodigoContador(pr.getCodigoContador());
            r.setNombre(pr.getNombre());
            r.setDireccionDomicilio(pr.getDireccionDomicilio());
            r.setDireccionTrabajo(pr.getDireccionTrabajo());
            r.setTelefonoDomicilio(pr.getTelefonoDomicilio());
            r.setTelefonoTrabajo(pr.getTelefonoTrabajo());
            r.setCentroTrabajo(pr.getCentroTrabajo());
            r.setCelular(pr.getCelular());
            r.setLugarCobranza(pr.getLugarCobranza());
            r.setLugar(pr.getLugar());
            r.setTituloLugarDomicilio(pr.getTituloLugarDomicilio());
            r.setTituloLugarTrabajo(pr.getTituloLugarTrabajo());
            Object[] obj = (Object[]) pobj;
            r.setConcepto("• CUOTA");
            r.setDescripcion((String) obj[0]);
            try {
                r.setMonto((double) obj[1]);
            } catch (Exception e) {
                try {
                    r.setMonto((int) obj[1]);
                } catch (Exception ex) {

                }
            }
            listado.add(r);
        }
        if (lCuotas.isEmpty()) {
            ReporteCuentaCorrienteCobrador r = new ReporteCuentaCorrienteCobrador();
            r.setCodigoContador(pr.getCodigoContador());
            r.setNombre(pr.getNombre());
            r.setDireccionDomicilio(pr.getDireccionDomicilio());
            r.setDireccionTrabajo(pr.getDireccionTrabajo());
            r.setTelefonoDomicilio(pr.getTelefonoDomicilio());
            r.setTelefonoTrabajo(pr.getTelefonoTrabajo());
            r.setCentroTrabajo(pr.getCentroTrabajo());
            r.setCelular(pr.getCelular());
            r.setLugarCobranza(pr.getLugarCobranza());
            r.setLugar(pr.getLugar());
            r.setTituloLugarDomicilio(pr.getTituloLugarDomicilio());
            r.setTituloLugarTrabajo(pr.getTituloLugarTrabajo());
            List lCuota = cuBO.ObtenerTodasCuotasCliente(cliente, 1);
            for (Object po : lCuota) {
                Object[] oCuota = (Object[])po;
                r.setConcepto("• CUOTA");
                r.setDescripcion(oCuota[2] + " - " + oCuota[3]);
                r.setMonto(0);
            }
            listado.add(r);
        }
        List<Object> lFinanciamiento = cBO.ObtenerFinanciamientoPendientesContador(cliente.getIdCliente());
        for (Object pobj : lFinanciamiento) {
            ReporteCuentaCorrienteCobrador r = new ReporteCuentaCorrienteCobrador();
            r.setCodigoContador(pr.getCodigoContador());
            r.setNombre(pr.getNombre());
            r.setDireccionDomicilio(pr.getDireccionDomicilio());
            r.setDireccionTrabajo(pr.getDireccionTrabajo());
            r.setTelefonoDomicilio(pr.getTelefonoDomicilio());
            r.setTelefonoTrabajo(pr.getTelefonoTrabajo());
            r.setCentroTrabajo(pr.getCentroTrabajo());
            r.setCelular(pr.getCelular());
            r.setLugarCobranza(pr.getLugarCobranza());
            r.setLugar(pr.getLugar());
            r.setTituloLugarDomicilio(pr.getTituloLugarDomicilio());
            r.setTituloLugarTrabajo(pr.getTituloLugarTrabajo());
            Object[] obj = (Object[]) pobj;
            if (!((String) obj[0]).equals("-")) {
                r.setConcepto("• FINANCIAMIENTO");
                r.setDescripcion((String) obj[0]);
                r.setMonto((double) obj[1]);
                listado.add(r);
            }
        }
        List<Object> lReincorporacion = cBO.ObtenerReincorporacionPendientesContador(cliente.getIdCliente());
        for (Object pobj : lReincorporacion) {
            ReporteCuentaCorrienteCobrador r = new ReporteCuentaCorrienteCobrador();
            r.setCodigoContador(pr.getCodigoContador());
            r.setNombre(pr.getNombre());
            r.setDireccionDomicilio(pr.getDireccionDomicilio());
            r.setDireccionTrabajo(pr.getDireccionTrabajo());
            r.setTelefonoDomicilio(pr.getTelefonoDomicilio());
            r.setTelefonoTrabajo(pr.getTelefonoTrabajo());
            r.setCentroTrabajo(pr.getCentroTrabajo());
            r.setCelular(pr.getCelular());
            r.setLugarCobranza(pr.getLugarCobranza());
            r.setLugar(pr.getLugar());
            r.setTituloLugarDomicilio(pr.getTituloLugarDomicilio());
            r.setTituloLugarTrabajo(pr.getTituloLugarTrabajo());
            Object[] obj = (Object[]) pobj;
            if (!((String) obj[0]).equals("-")) {
                r.setConcepto("• REINCORPORACION");
                r.setDescripcion((String) obj[0]);
                r.setMonto((double) obj[1]);
                listado.add(r);
            }
        }
        List<Object> lDeuda = cBO.ObtenerDeudasContador(cliente.getIdCliente());
        for (Object pobj : lDeuda) {
            ReporteCuentaCorrienteCobrador r = new ReporteCuentaCorrienteCobrador();
            r.setCodigoContador(pr.getCodigoContador());
            r.setNombre(pr.getNombre());
            r.setDireccionDomicilio(pr.getDireccionDomicilio());
            r.setDireccionTrabajo(pr.getDireccionTrabajo());
            r.setTelefonoDomicilio(pr.getTelefonoDomicilio());
            r.setTelefonoTrabajo(pr.getTelefonoTrabajo());
            r.setCentroTrabajo(pr.getCentroTrabajo());
            r.setCelular(pr.getCelular());
            r.setLugarCobranza(pr.getLugarCobranza());
            r.setLugar(pr.getLugar());
            r.setTituloLugarDomicilio(pr.getTituloLugarDomicilio());
            r.setTituloLugarTrabajo(pr.getTituloLugarTrabajo());
            Object[] obj = (Object[]) pobj;
            r.setConcepto("• DEUDA");
            r.setDescripcion((String) obj[0]);
            r.setMonto((double) obj[1]);
            listado.add(r);
        }
    }

    public void ImprimirReporteCobrador() {
        try {
            //------------------------------------------------------------------
            List<ReporteCuentaCorrienteCobrador> lReporte = new ArrayList();
            ClienteBO cliBO = ClienteBO.getInstance();
            List l = cliBO.ObtenerContadoresSegunCobrador(((Cobrador) cbCobrador.getSelectedItem()).getCodCobrador());
            for (Object pobj : l) {
                Object[] obj = (Object[]) pobj;
                int idCliente = (int) obj[0];
                String codigo = (String) obj[1];
                String nombre = (String) obj[2];
                String direccionDomicilio = (String) obj[3];
                String direccionTrabajo = (String) obj[4];
                String telefonoDomicilio = (String) obj[5];
                String telefonoTrabajo = (String) obj[6];
                String centroTrabajo = (String) obj[7];
                String celular = (String) obj[8];
                String lugarCobranza = (String) obj[9];
                String lugar = (String) obj[10];
                Date fechaAfiliacion = null;
                if (obj[11] != null) {
                    fechaAfiliacion = (Date) obj[11];
                }
                String lugarDomicilio = "DIR DOM:";
                String lugarTrabajo = "DIR TRAB:";
                if (lugarCobranza.equals("D")) {
                    lugarDomicilio = "DIR DOM(*):";
                } else {
                    if (lugarCobranza.equals("T")) {
                        lugarTrabajo = "DIR TRAB(*):";
                    }
                }
                ReporteCuentaCorrienteCobrador r = new ReporteCuentaCorrienteCobrador();
                r.setCodigoContador(codigo);
                r.setNombre(nombre);
                r.setDireccionDomicilio(direccionDomicilio);
                r.setDireccionTrabajo(direccionTrabajo);
                r.setTelefonoDomicilio(telefonoDomicilio);
                r.setTelefonoTrabajo(telefonoTrabajo);
                r.setCentroTrabajo(centroTrabajo);
                r.setCelular(celular);
                r.setLugarCobranza(lugarCobranza);
                r.setLugar(lugar);
                r.setTituloLugarDomicilio(lugarDomicilio);
                r.setTituloLugarTrabajo(lugarTrabajo);
                Cliente cliente = new Cliente();
                cliente.setIdCliente(idCliente);
                cliente.setCfechaAfiliacion(fechaAfiliacion);
                this.LlenarCuentaCorriente(cliente, r, lReporte);
            }
            //------------------------------------------------------------------
            String jdbcDriver = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
            Class.forName(jdbcDriver);
//            SeguridadBO sBO = SeguridadBO.getInstance();
//            String url = sBO.getUrlReporte();
//            String user = "sa";
            //String pass = "sajuancarlos";
//            String pass = "4dm1n1str4c10nGOB90570";
//            Connection con = DriverManager.getConnection(url, user, pass);
            String fullPath = "";
            Map param;
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(lReporte);
            fullPath = "reportes/cobrador01.jasper";
            param = new HashMap();
            Cliente cliente = (((Cobrador) cbCobrador.getSelectedItem()).getCliente());
            param.put("NOMBRECOBRADOR", cliente.getPapePat() + " " + cliente.getPapeMat() + " " + cliente.getPnombre());
            param.put("REPORT_LOCALE", new Locale("en", "EN"));
            JasperPrint JPrint = JasperFillManager.fillReport(fullPath, param, ds);

            JasperViewer.viewReport(JPrint, false);
            //JasperPrintManager.printReport(JPrint, true);
        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCobrador;
    private javax.swing.JComboBox cbCobrador;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
