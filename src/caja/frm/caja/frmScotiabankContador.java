/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caja.frm.caja;

import caja.bo.AnioMesBO;
import caja.bo.ClienteBO;
import caja.frm.frmPrincipal;
import caja.mapeo.entidades.AnioMes;
import caja.mapeo.entidades.Bbva;
import caja.mapeo.entidades.Scotiabank;
//import caja.mapeo.entidades.BbvaContador;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
//import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

/**
 *
 * @author user
 */
public class frmScotiabankContador extends javax.swing.JInternalFrame {

    private int nroOperacion = 0;
    private Scotiabank scotiabank = null;
    private List lista = null;

    /**
     * Creates new form frmBBVA
     */
    public frmScotiabankContador() {
        initComponents();
        TableColumn columna = tContador.getColumn("NRO");
        columna.setPreferredWidth(40);
        columna.setMinWidth(40);
        columna.setMaxWidth(40);
        columna = tContador.getColumn("COD");
        columna.setPreferredWidth(80);
        columna.setMinWidth(80);
        columna.setMaxWidth(80);
        columna = tContador.getColumn("OBJ");
        columna.setPreferredWidth(0);
        columna.setMinWidth(0);
        columna.setMaxWidth(0);
        columna = tDetalle.getColumn("NRO");
        columna.setPreferredWidth(40);
        columna.setMinWidth(40);
        columna.setMaxWidth(40);
        columna = tDetalle.getColumn("MONTO");
        columna.setPreferredWidth(70);
        columna.setMinWidth(70);
        columna.setMaxWidth(70);
        columna = tDetalle.getColumn("CODIGO");
        columna.setPreferredWidth(70);
        columna.setMinWidth(70);
        columna.setMaxWidth(70);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tContador = new javax.swing.JTable();
        lbDatos = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tDetalle = new javax.swing.JTable();
        txtFiltroNombre = new javax.swing.JTextField();
        txtFiltroNombre.addKeyListener(
            new KeyAdapter(){
                public void keyReleased (KeyEvent e){
                    FiltrarContadorNombre();
                }} );

                setClosable(true);
                setTitle("Scotiabank");
                setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/icono.png"))); // NOI18N
                setPreferredSize(new java.awt.Dimension(758, 605));

                tContador.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {

                    },
                    new String [] {
                        "NRO", "COD", "NOMBRE", "OBJ"
                    }
                ) {
                    boolean[] canEdit = new boolean [] {
                        false, false, false, false
                    };

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                tContador.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        tContadorMouseClicked(evt);
                    }
                });
                jScrollPane1.setViewportView(tContador);

                lbDatos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                lbDatos.setText("DATOS:");

                jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/txt_mini.png"))); // NOI18N
                jButton2.setText("GENERAR ARCHIVO");
                jButton2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton2ActionPerformed(evt);
                    }
                });

                tDetalle.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {

                    },
                    new String [] {
                        "NRO", "IDENTIFICADOR", "CODIGO", "DESCRIPCION", "MONTO"
                    }
                ) {
                    boolean[] canEdit = new boolean [] {
                        false, false, false, false, false
                    };

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                jScrollPane2.setViewportView(tDetalle);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2))
                                    .addComponent(txtFiltroNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbDatos)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFiltroNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                );

                pack();
            }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        frmPrincipal fPrin = (frmPrincipal) this.getParent().getParent().getParent().getParent().getParent();
        Thread queryThread = new Thread() {
            public void run() {
                frmCargando fCargando = new frmCargando();
                fPrin.AgregarFormulario(fCargando);
                int x = (fPrin.getWidth() - fCargando.getWidth()) / 2;
                int y = (fPrin.getHeight() - fCargando.getHeight()) / 2;
                fCargando.setLocation(x, y);
                fCargando.setVisible(true);
                fCargando.toFront();
                GenerarArchivo();
                fCargando.dispose();
            }
        };
        queryThread.start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tContadorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tContadorMouseClicked
        if (evt.getClickCount() == 2) {
            int fila = tContador.getSelectedRow();
            if (fila >= 0) {
                DefaultTableModel model = (DefaultTableModel) tContador.getModel();
//                DefaultTableModel m = (DefaultTableModel) tDetalle.getModel();
                int idBC = (int) model.getValueAt(fila, 3);
                ClienteBO cBO = ClienteBO.getInstance();
                List l = cBO.ObtenerScotiabankContadorDetalle(idBC);
                DefaultTableModel m = (DefaultTableModel) tDetalle.getModel();
                m.setRowCount(0);
                int contador = 0;
                for (Object p : l) {
                    Object[] o = (Object[]) p;
                    String identificador = (String) o[0];
                    String codigo = (String) o[1];
                    String Descripcion = (String) o[2];
                    double monto = (double) o[3];
                    m.addRow(new Object[contador]);
                    tDetalle.setValueAt(contador + 1, contador, 0);
                    tDetalle.setValueAt(identificador, contador, 1);
                    tDetalle.setValueAt(codigo, contador, 2);
                    tDetalle.setValueAt(Descripcion, contador, 3);
                    tDetalle.setValueAt(monto, contador, 4);
                    contador = contador + 1;
                }

            }
        }
    }//GEN-LAST:event_tContadorMouseClicked

    public void CargarDatos(Scotiabank b) {
        this.scotiabank = b;
        ClienteBO cBO = ClienteBO.getInstance();
//        Bbva b = cBO.ObtenerBbva(this.nroOperacion);
        lbDatos.setText("NRO OP: " + b.getNroOperacion() + " | FECHA OP: " + b.getFechaOperacion());
        this.lista = cBO.ObtenerScotiabankContador_SegunOperacion(b.getNroOperacion());
        DefaultTableModel model = (DefaultTableModel) tContador.getModel();
        model.setNumRows(0);
        int contador = 0;
        for (Object c : lista) {
            Object[] o = (Object[]) c;
            String cod = (String) o[0];
            String apePat = (String) o[1];
            String apeMat = (String) o[2];
            String nombre = (String) o[3];
            int id = (int) o[4];
            model.addRow(new Object[contador]);
            tContador.setValueAt(contador + 1, contador, 0);
            tContador.setValueAt(cod, contador, 1);
            tContador.setValueAt(apePat + " " + apeMat + " " + nombre, contador, 2);
            tContador.setValueAt(id, contador, 3);
            contador = contador + 1;
        }
    }

    public void GenerarOperacionBbva(int aDesde, int aHasta, int mDesde, int mHasta) {
        Thread queryThread = new Thread() {
            public void run() {
                ClienteBO cBO = ClienteBO.getInstance();
                String[] Movimientos = {"Carga Parcial", "Carga Total", "Eliminacion de Registros"};
                String TipoMovimiento = (String) JOptionPane.showInputDialog(null,
                        "Cual es el tipo de Movimiento?",
                        "Elegir",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        Movimientos,
                        Movimientos[0]);
                if (TipoMovimiento.equals("Carga Parcial")) {
                    TipoMovimiento = "P";
                } else {
                    if (TipoMovimiento.equals("Carga Total")) {
                        TipoMovimiento = "T";
                    } else {
                        TipoMovimiento = "E";
                    }
                }
                AnioMesBO amBO = AnioMesBO.getInstance();
                AnioMes amDesde = amBO.ObtenerAnioMes(aDesde, mDesde);
                AnioMes amHasta = amBO.ObtenerAnioMes(aHasta, mHasta);
//                cBO.GenerarEstructuraDatosCobranzaInstitucional_BBVA(jProgressBar1, TipoMovimiento, amDesde.getNroOrden(), amHasta.getNroOrden(), TipoMovimiento);
            }
        };
        queryThread.start();
    }

    private void FiltrarContadorNombre() {
        if (lista != null) {
            String pFiltro = txtFiltroNombre.getText();
            pFiltro = pFiltro.toUpperCase();
            txtFiltroNombre.setText(pFiltro);
            DefaultTableModel model = (DefaultTableModel) tContador.getModel();
            model.setNumRows(0);
            int contador = 0;
            for (Object c : lista) {
                Object[] o = (Object[]) c;
                String cod = (String) o[0];
                String apePat = (String) o[1];
                String apeMat = (String) o[2];
                String nombre = (String) o[3];
                int id = (int) o[4];
                String nombreCompleto = apePat + " " + apeMat + " " + nombre;
                if (nombreCompleto.contains(pFiltro)) {
                    model.addRow(new Object[contador]);
                    tContador.setValueAt(contador + 1, contador, 0);
                    tContador.setValueAt(cod, contador, 1);
                    tContador.setValueAt(nombreCompleto, contador, 2);
                    tContador.setValueAt(id, contador, 3);
                    contador = contador + 1;
                }
            }
        }
    }

    private void GenerarArchivo() {
        if (this.scotiabank != null) {
            try {
                File carpeta = new File("archivos");
                carpeta.mkdirs();
                carpeta = new File("archivos/SCOTIABANK");
                carpeta.mkdirs();
                BufferedWriter bw = null;
                PrintWriter wr = null;
                File f;
                Date fechaSistema = new Date();
                SimpleDateFormat formato = new SimpleDateFormat("yyyyMMdd");
                SimpleDateFormat fechaEnvio = new SimpleDateFormat("yyyyMMdd");
                String nombreArchivo = "archivos/SCOTIABANK/CCPAREQ" + formato.format(fechaSistema) + ".txt";
                f = new File(nombreArchivo);
                FileWriter w = new FileWriter(f);
                bw = new BufferedWriter(w);
                wr = new PrintWriter(bw);
                ClienteBO cBO = ClienteBO.getInstance();
//                Scotiabank b = cBO.ObtenerScotiabank(this.scotiabank.getNroOperacion());
                List<Object> listado = cBO.ObtenerListado_Scotiabank(this.scotiabank.getNroOperacion());
                String cuentaE = "591809000001  ";
                String secServicio = "001";
                String cantRegistro = String.valueOf(listado.size());
                cantRegistro = this.RellenarCerosIzquierda(cantRegistro, 7);
                double montoTotal = cBO.obtenerMontoTotal_SegunNroOperacionScotiabank(this.scotiabank.getNroOperacion());
                //--------------------------------------------------------------
                montoTotal = Math.round(montoTotal * Math.pow(10, 2)) / Math.pow(10, 2);
                double montoTemp = montoTotal;
                int valorEnteroCabecera = (int) montoTemp;
                double decimalesCabecera = montoTemp - (int) montoTemp;
                decimalesCabecera = Math.round(decimalesCabecera * Math.pow(10, 2)) / Math.pow(10, 2);
                int valorDecimalesCabecera = (int) (decimalesCabecera * 100);
//                valorDecimales = 10;
                String dCabecera = "";
                if (valorDecimalesCabecera == 0) {
                    dCabecera = "00";
                } else {
                    dCabecera = String.valueOf(valorDecimalesCabecera);
                }
                //--------------------------------------------------------------
                String tSoles = String.format("%015d", valorEnteroCabecera) + dCabecera;
                String tDolares = this.RellenarCerosIzquierda("", 17);
                String ruc = "20174327026";
                String fecEnvio = fechaEnvio.format(fechaSistema);
//                String fecVigencia = "";
                String filler = "000";
                String diasMora = "000";
                String tipoMora = "00";
                String moraFlat = "00000000000";
                String PorcMora = "00000000";
                String montFijo = "00000000000";
                String tipDesc = "00";
                String montDesc = "00000000000";
                String PorcDesc = "00000000";
                String diasDesc = "000";
                String fillerBlanco = this.RellenarEspacionBlanco("", 117);
                String cabecera = "H" + cuentaE + secServicio + cantRegistro + tSoles + tDolares + ruc + fecEnvio + fecEnvio + filler + diasMora + tipoMora + moraFlat + PorcMora + montFijo + tipDesc + montDesc + PorcDesc + diasDesc + fillerBlanco + "*";
//                String vacio = this.RellenarEspacionBlanco("", 322);
//                cabecera = cabecera + vacio;
                wr.write(cabecera + "\r\n");
                Calendar calendario = Calendar.getInstance();
//                double montoTotal = 0;
                for (Object pobj : listado) {
                    Object[] obj = (Object[]) pobj;
                    String codColegiado = (String) obj[0];
                    int cod = Integer.valueOf(codColegiado);
                    codColegiado = this.RellenarEspacionBlanco(String.valueOf(cod), 15);
                    String nombre = (String) obj[1];
                    String tipConcepto = (String) obj[2];
                    int anio = (int) obj[3];
                    int mes = (int) obj[4];
                    double monto = (double) obj[5];
                    String correlativo = String.valueOf((int) obj[6]);
                    correlativo = this.RellenarEspacionBlanco(correlativo, 15);
//                    montoTotal = montoTotal + monto;
//                    System.out.println(codColegiado + "|" + nombre + "|" + tipConcepto + "|" + anio + "|" + mes);
                    nombre = nombre.replace("'","");
                    nombre = nombre.replace("Ñ","N");
                    nombre = nombre.replace("-"," ");
                    if (nombre.length() > 20) {
                        nombre = nombre.substring(0, 20);
                    }
                    nombre = this.RellenarEspacionBlanco(nombre, 20);
                    if (tipConcepto.equals("CUOTA")) {
                        tipConcepto = "CUOTA-" + this.ObtenerMes(mes) + anio;
                    }
                    tipConcepto = this.RellenarEspacionBlanco(tipConcepto, 30);
                    //----------------------------------------------------------
                    monto = Math.round(monto * Math.pow(10, 2)) / Math.pow(10, 2);
                    double precioVenta = monto;
                    int valorEntero = (int) precioVenta;
                    double decimales = precioVenta - (int) precioVenta;
                    decimales = Math.round(decimales * Math.pow(10, 2)) / Math.pow(10, 2);
                    int valorDecimales = (int) (decimales * 100);
                    String d = "";
                    if (valorDecimales == 0) {
                        d = "00";
                    } else {
                        d = String.valueOf(valorDecimales);
                    }
                    //----------------------------------------------------------
                    calendario.set(anio, mes - 1, 1);
                    int ultimoDiaMes = calendario.getActualMaximum(Calendar.DAY_OF_MONTH);
                    calendario.set(anio, mes - 1, ultimoDiaMes);
                    String codAgrupacion = this.RellenarEspacionBlanco("", 11);
                    String situacion = "0";
                    String moneda = "0000";
                    String conCobrar = "01";
                    String conCobrar2 = "00";
                    String monto2 = "00000000000";
                    String monto1 = String.format("%09d", valorEntero) + d;
                    String total = String.format("%013d", valorEntero) + d;
                    String saldo = String.format("%013d", valorEntero) + d;
                    String porcentaje = "00000000";
                    String ordenCronologico = "0";
                    String fechaEmision = fechaEnvio.format(calendario.getTime());
                    String diasProrroga = "999";
                    String fillerDetalle = RellenarEspacionBlanco("", 15);
                    String detalle = "D" + cuentaE + secServicio + codColegiado + correlativo + codAgrupacion + situacion + moneda + nombre + tipConcepto + conCobrar + monto1 + conCobrar2 + monto2 + conCobrar2 + monto2 + conCobrar2 + monto2 + conCobrar2 + monto2 + conCobrar2 + monto2 + total + saldo + porcentaje + ordenCronologico + fechaEmision + fechaEmision + diasProrroga + fillerDetalle + "*";
//                    detalle = detalle + String.format("%013d", valorEntero) + d + String.format("%013d", valorEntero) + d;
                    wr.write(detalle + "\r\n");
                }
                //----------------------------------------------------------
//                montoTotal = Math.round(montoTotal * Math.pow(10, 2)) / Math.pow(10, 2);
//                double precioVenta = montoTotal;
//                int valorEntero = (int) precioVenta;
//                double decimales = precioVenta - (int) precioVenta;
//                decimales = Math.round(decimales * Math.pow(10, 2)) / Math.pow(10, 2);
//                int valorDecimales = (int) (decimales * 100);
//                valorDecimales = 10;
//                String d = "";
//                if (valorDecimales == 0) {
//                    d = "00";
//                } else {
//                    d = String.valueOf(valorDecimales);
//                }
                String cuentaAbono = "591809000001  ";
                String fillerPie = this.RellenarEspacionBlanco("", 200);
                //----------------------------------------------------------
                wr.write("C" + cuentaE + secServicio + "01" + "MENSUALIDAD                   " + "0" + cuentaAbono + fillerPie + "*" + "\r\n");
                //-------------------------------------            
                wr.close();
                bw.close();
                try {
                    File objetofile = new File(nombreArchivo);
                    Desktop.getDesktop().open(objetofile);
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            } catch (IOException e) {
            };
        } else {
            JOptionPane.showMessageDialog(this, "DEBE PONER UN NRO DE OPERACIÓN", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String RellenarEspacionBlanco(String cadena, int cant) {
        int contador = cadena.length();
        while (contador < cant) {
            cadena = cadena + " ";
            contador++;
        }
        return cadena;
    }

    private String RellenarEspacionBlancoIzquierda(String cadena, int cant) {
        int contador = cadena.length();
        while (contador < cant) {
            cadena = " " + cadena;
            contador++;
        }
        return cadena;
    }

    private String RellenarCeros(String cadena, int cant) {
        int contador = 0;
        while (contador < cant) {
            cadena = cadena + "0";
            contador++;
        }
        return cadena;
    }

    private String RellenarCerosIzquierda(String cadena, int cant) {
//        int contador = 0;
        while (cadena.length() < cant) {
            cadena = "0" + cadena;
//            contador++;
        }
        return cadena;
    }

    private String ObtenerMes(int mes) {
        String m = "";
        if (mes == 1) {
            m = "ENE";
        }
        if (mes == 2) {
            m = "FEB";
        }
        if (mes == 3) {
            m = "MAR";
        }
        if (mes == 4) {
            m = "ABR";
        }
        if (mes == 5) {
            m = "MAY";
        }
        if (mes == 6) {
            m = "JUN";
        }
        if (mes == 7) {
            m = "JUL";
        }
        if (mes == 8) {
            m = "AGO";
        }
        if (mes == 9) {
            m = "SEP";
        }
        if (mes == 10) {
            m = "OCT";
        }
        if (mes == 11) {
            m = "NOV";
        }
        if (mes == 12) {
            m = "DIC";
        }
        return m;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbDatos;
    private javax.swing.JTable tContador;
    private javax.swing.JTable tDetalle;
    private javax.swing.JTextField txtFiltroNombre;
    // End of variables declaration//GEN-END:variables
}
