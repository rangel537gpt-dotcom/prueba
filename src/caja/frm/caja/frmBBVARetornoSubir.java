/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caja.frm.caja;

import caja.bo.AnioMesBO;
import caja.bo.ClienteBO;
//import caja.bo.DocumentoPagoBO;
//import caja.bo.SeguridadBO;
import caja.frm.frmPrincipal;
import caja.mapeo.entidades.AnioMes;
import caja.mapeo.entidades.Bbva;
import caja.mapeo.entidades.BbvaRetorno;
import caja.mapeo.entidades.BbvaRetornoDetalle;
import caja.mapeo.entidades.Cliente;
//import caja.mapeo.entidades.ConceptoPagoDetalle;
//import caja.mapeo.entidades.DocumentoPago;
//import caja.mapeo.entidades.DocumentoPagoDet;
//import caja.mapeo.entidades.TipoDocSerie;
//import caja.mapeo.entidades.BbvaContador;
//import java.awt.Desktop;
//import java.io.BufferedWriter;
import java.io.File;
//import java.io.FileWriter;
//import java.io.IOException;
//import java.io.PrintWriter;
//import java.text.SimpleDateFormat;
//import java.util.Calendar;
//import java.util.Date;
import java.util.List;
//import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
//import java.util.logging.Level;
//import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author user
 */
public class frmBBVARetornoSubir extends javax.swing.JInternalFrame {

//    private int nroOperacion = 0;
    private Bbva bbva = null;
    private BbvaRetorno bbvaRetorno = null;
    private List<BbvaRetornoDetalle> lista = null;

    /**
     * Creates new form frmBBVA
     */
    public frmBBVARetornoSubir() {
        initComponents();
        tDetalle.setAutoResizeMode(tDetalle.AUTO_RESIZE_OFF);
        TableColumn columna = tDetalle.getColumn("NRO");
        columna.setPreferredWidth(40);
        columna.setMinWidth(40);
        columna.setMaxWidth(40);
        columna = tDetalle.getColumn("NOMBRE");
        columna.setPreferredWidth(200);
        columna.setMinWidth(200);
        columna.setMaxWidth(200);
        columna = tDetalle.getColumn("REFERENCIA");
        columna.setPreferredWidth(140);
        columna.setMinWidth(140);
        columna.setMaxWidth(140);
        columna = tDetalle.getColumn("I. ORIGEN");
        columna.setPreferredWidth(70);
        columna.setMinWidth(70);
        columna.setMaxWidth(70);
        columna = tDetalle.getColumn("I. DEPOSITO");
        columna.setPreferredWidth(70);
        columna.setMinWidth(70);
        columna.setMaxWidth(70);
        columna = tDetalle.getColumn("I. MORA");
        columna.setPreferredWidth(70);
        columna.setMinWidth(70);
        columna.setMaxWidth(70);
        columna = tDetalle.getColumn("OBJ");
        columna.setPreferredWidth(0);
        columna.setMinWidth(0);
        columna.setMaxWidth(0);
//        columna = tContador.getColumn("COD");
//        columna.setPreferredWidth(80);
//        columna.setMinWidth(80);
//        columna.setMaxWidth(80);
//        columna = tContador.getColumn("OBJ");
//        columna.setPreferredWidth(0);
//        columna.setMinWidth(0);
//        columna.setMaxWidth(0);
//        columna = tDetalle.getColumn("NRO");
//        columna.setPreferredWidth(40);
//        columna.setMinWidth(40);
//        columna.setMaxWidth(40);
//        columna = tDetalle.getColumn("MONTO");
//        columna.setPreferredWidth(70);
//        columna.setMinWidth(70);
//        columna.setMaxWidth(70);
//        columna = tDetalle.getColumn("CODIGO");
//        columna.setPreferredWidth(70);
//        columna.setMinWidth(70);
//        columna.setMaxWidth(70);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbUbicacion = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tDetalle = new javax.swing.JTable();
        txtFiltroNombre = new javax.swing.JTextField();
        txtFiltroNombre.addKeyListener(
            new KeyAdapter(){
                public void keyReleased (KeyEvent e){
                    FiltrarContadorNombre();
                }} );
                jScrollPane3 = new javax.swing.JScrollPane();
                txtCabecera = new javax.swing.JTextArea();

                setClosable(true);
                setTitle("BBVA");
                setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/icono.png"))); // NOI18N
                setPreferredSize(new java.awt.Dimension(900, 600));

                lbUbicacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                lbUbicacion.setText("DATOS:");

                jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/opciones.png"))); // NOI18N
                jButton2.setText("OPCIONES");
                jButton2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton2ActionPerformed(evt);
                    }
                });

                tDetalle.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {

                    },
                    new String [] {
                        "NRO", "NOMBRE", "REFERENCIA", "I. ORIGEN", "I. DEPOSITO", "I. MORA", "OFI. PAGO", "NRO. MOV", "FEC. PAGO", "T. VALOR", "C. ENTRADA", "OBJ"
                    }
                ) {
                    boolean[] canEdit = new boolean [] {
                        false, false, false, false, false, false, false, false, false, false, false, false
                    };

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                jScrollPane2.setViewportView(tDetalle);

                txtCabecera.setColumns(20);
                txtCabecera.setRows(5);
                jScrollPane3.setViewportView(txtCabecera);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 199, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtFiltroNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3))
                        .addContainerGap())
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbUbicacion)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFiltroNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                        .addContainerGap())
                );

                pack();
            }// </editor-fold>//GEN-END:initComponents

    public void SubirArchivo() {
        Object[] o = null;
        if (this.lista != null) {
            ClienteBO cBO = ClienteBO.getInstance();
            this.bbvaRetorno.setSeSubioArchivo("S");
            cBO.GuardarBbvaRetorno(this.bbvaRetorno);
            for (BbvaRetornoDetalle rd : this.lista) {
                rd.setIdBbvaRetorno(this.bbvaRetorno.getId());
                cBO.GuardarBbvaRetornoDetalle(rd);
            }
            JOptionPane.showMessageDialog(this, "SE SUBIÃ“ LOS DATOS", "OK", JOptionPane.INFORMATION_MESSAGE);
        }
    }

//    private void GenerarComprobantes() {
//        ClienteBO cBO = ClienteBO.getInstance();
//        List l = cBO.ObtenerBbvaRetornoDetalle_SegunIdBbvaRetorno(this.bbvaRetorno.getId());
//        for (Object pobj : l) {
//            Object[] obj = (Object[]) pobj;
//            int idCliente = (int) obj[0];
//            Date fechaPago = (Date) obj[1];
//            cBO.GenerarComprobantePago_SegunBbvaRetorno(this.bbvaRetorno.getId(), idCliente, fechaPago);
//        }
//    }
    public void GenerarComprobante() {
        frmPrincipal f = (frmPrincipal) this.getParent().getParent().getParent().getParent().getParent();
        if (this.bbvaRetorno != null) {
            if (this.bbvaRetorno.getSeGeneroComprobantes() != null) {
                if (this.bbvaRetorno.getId() != 0) {
                    if (this.bbvaRetorno.getSeGeneroComprobantes().equals("N")) {
                        f.AbrirFormularioGenerarOperacionBbva(this, this.bbva, this.bbvaRetorno, 2);
                    } else {
                        JOptionPane.showMessageDialog(this, "NO SE PUEDE VOLVER A GENERAR LOS COMPROBANTES", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "PRIMERO DEBE SUBIR LA INFORMACIÃ“N", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                f.AbrirFormularioGenerarOperacionBbva(this, this.bbva, this.bbvaRetorno, 2);
            }
        }
    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        frmPrincipal fPrin = (frmPrincipal) this.getParent().getParent().getParent().getParent().getParent();
        fPrin.AbrirFormularioBbvaOpciones(this, 1, this.bbvaRetorno);
    }//GEN-LAST:event_jButton2ActionPerformed

    public void CargarDatos(Bbva b) {
        this.bbva = b;
//        ClienteBO cBO = ClienteBO.getInstance();
//        Bbva b = cBO.ObtenerBbva(this.nroOperacion);
        lbUbicacion.setText("NRO OP: " + b.getNroOperacion() + " | FECHA OP: " + b.getFechaOperacion() + " | TIPO IDENTIFICACION: " + b.getTipoIdentificacion());
//        this.lista = cBO.ObtenerBbvaContador_SegunOperacion(b.getNroOperacion());
//        DefaultTableModel model = (DefaultTableModel) tRetorno.getModel();
//        model.setNumRows(0);
//        int contador = 0;
//        for (Object c : lista) {
//            Object[] o = (Object[]) c;
//            String cod = (String) o[0];
//            String apePat = (String) o[1];
//            String apeMat = (String) o[2];
//            String nombre = (String) o[3];
//            int id = (int) o[4];
//            model.addRow(new Object[contador]);
//            tRetorno.setValueAt(contador + 1, contador, 0);
//            tRetorno.setValueAt(cod, contador, 1);
//            tRetorno.setValueAt(apePat + " " + apeMat + " " + nombre, contador, 2);
//            tRetorno.setValueAt(id, contador, 3);
//            contador = contador + 1;
//        }
    }

    public void GenerarOperacionBbva(int aDesde, int aHasta, int mDesde, int mHasta) {
        Thread queryThread = new Thread() {
            public void run() {
                ClienteBO cBO = ClienteBO.getInstance();
                String[] Movimientos = {"Carga Parcial", "Carga Total", "Eliminacion de Registros"};
                String TipoMovimiento = (String) JOptionPane.showInputDialog(null,
                        "Cual es el tipo de Movimiento?",
                        "Elegir",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        Movimientos,
                        Movimientos[0]);
                if (TipoMovimiento.equals("Carga Parcial")) {
                    TipoMovimiento = "P";
                } else {
                    if (TipoMovimiento.equals("Carga Total")) {
                        TipoMovimiento = "T";
                    } else {
                        TipoMovimiento = "E";
                    }
                }
                AnioMesBO amBO = AnioMesBO.getInstance();
                AnioMes amDesde = amBO.ObtenerAnioMes(aDesde, mDesde);
                AnioMes amHasta = amBO.ObtenerAnioMes(aHasta, mHasta);
//                cBO.GenerarEstructuraDatosCobranzaInstitucional_BBVA(jProgressBar1, TipoMovimiento, amDesde.getNroOrden(), amHasta.getNroOrden(), TipoMovimiento);
            }
        };
        queryThread.start();
    }

    private void FiltrarContadorNombre() {
        if (lista != null) {
            String pFiltro = txtFiltroNombre.getText();
            pFiltro = pFiltro.toUpperCase();
            txtFiltroNombre.setText(pFiltro);
            DefaultTableModel model = (DefaultTableModel) tDetalle.getModel();
            model.setNumRows(0);
            int contador = 0;
            for (BbvaRetornoDetalle o : lista) {
                String nombreCompleto = o.getNombre();
                if (nombreCompleto.contains(pFiltro)) {
                    model.addRow(new Object[contador]);
                    tDetalle.setValueAt(contador + 1, contador, 0);
                    tDetalle.setValueAt(o.getNombre(), contador, 1);
                    tDetalle.setValueAt(o.getReferencia(), contador, 2);
                    tDetalle.setValueAt(o.getImporteOrigen(), contador, 3);
                    tDetalle.setValueAt(o.getImporteDeposito(), contador, 4);
                    tDetalle.setValueAt(o.getImporteMora(), contador, 5);
                    tDetalle.setValueAt(o.getOficinaPago(), contador, 6);
                    tDetalle.setValueAt(o.getNroMovimiento(), contador, 7);
                    tDetalle.setValueAt(o.getFechaPago(), contador, 8);
                    tDetalle.setValueAt(o.getTipoValor(), contador, 9);
                    tDetalle.setValueAt(o.getCanalEntrada(), contador, 10);
                    tDetalle.setValueAt(o, contador, 11);
                    contador = contador + 1;
                }
            }
        }
    }

    private void LeerRegistro(File abre, String registro) throws FileNotFoundException, IOException {
        AnioMesBO amBO = AnioMesBO.getInstance();
        ClienteBO cBO = ClienteBO.getInstance();
        String tipoRegistro = registro.substring(0, 2);
        if (tipoRegistro.equals("01")) {
//            DefaultTableModel modelDetalle = (DefaultTableModel) tRetorno.getModel();
//            int contador = modelDetalle.getRowCount();
            String ruc = registro.substring(2, 13);
            String codigoClase = registro.substring(13, 16);
            String tipoMoneda = registro.substring(16, 19);
            String fechaProceso = registro.substring(19, 27);
            String cuentaRecaudadora = registro.substring(27, 45);

            BbvaRetorno c = new BbvaRetorno();
            FileInputStream ficheroStream = new FileInputStream(abre);
            byte contenido[] = new byte[(int) abre.length()];
            ficheroStream.read(contenido);
            c.setArchivo(contenido);
            c.setNombreArchivo(abre.getName());
            c.setIdBbva(this.bbva.getId());
            c.setSeGeneroComprobantes("N");
            c.setMoneda(tipoMoneda);
            c.setCodigoClase(codigoClase);
            c.setCuentaRecaudadora(cuentaRecaudadora);
            c.setRuc(ruc);
//            cBO.GuardarBbvaRetorno(c);
            String cabecera = txtCabecera.getText();
            cabecera = "RUC:" + ruc + "\n";
            cabecera = cabecera + "CODIGO CLASE: " + codigoClase + "\n";
            cabecera = cabecera + "MONEDA: " + tipoMoneda + "\n";
            cabecera = cabecera + "FECHA PROCESO: " + fechaProceso + "\n";
            cabecera = cabecera + "CUENTA RECAUDADORA: " + cuentaRecaudadora + "\n";
            txtCabecera.setText(cabecera);
            this.bbvaRetorno = c;
        }
        if (tipoRegistro.equals("02")) {
            DefaultTableModel modelDetalle = (DefaultTableModel) tDetalle.getModel();
            int contador = modelDetalle.getRowCount();
            String nombre = registro.substring(2, 32);
            String referencia = registro.substring(32, 80);
            referencia = referencia.trim();
            String codColegiado = referencia.substring(0, 5);
            String tipoCobranza = referencia.substring(5, 10);
            String mes = referencia.substring(11, 14);
            String anio = referencia.substring(14, 18);
            int nroMes = this.ObtenerNroMes(mes);
            AnioMes am = amBO.ObtenerAnioMes(Integer.valueOf(anio), nroMes);
            String importeOrigen = registro.substring(80, 95);
            double iOrigen = Double.valueOf(importeOrigen) / 100;
            iOrigen = Math.round(iOrigen * Math.pow(10, 2)) / Math.pow(10, 2);
            String importeDestino = registro.substring(95, 110);
            double iDestino = Double.valueOf(importeDestino) / 100;
            iDestino = Math.round(iDestino * Math.pow(10, 2)) / Math.pow(10, 2);
            String importeMora = registro.substring(110, 125);
            double iMora = Double.valueOf(importeMora) / 100;
            iMora = Math.round(iMora * Math.pow(10, 2)) / Math.pow(10, 2);
            String oficinaPago = registro.substring(125, 129);
            String nroMovimiento = registro.substring(129, 135);
            String fechaPago = registro.substring(135, 143);
            String tipoValor = registro.substring(143, 145);
            String canalEntrada = registro.substring(145, 147);
            int codNumero = Integer.valueOf(codColegiado.trim());
            codColegiado = String.format("%05d", codNumero);
            Cliente c = cBO.ObtenerClienteSegunCodigoContador(codColegiado);
            BbvaRetornoDetalle r = new BbvaRetornoDetalle();
            r.setNombre(nombre);
            r.setReferencia(referencia);
            r.setCanalEntrada(Integer.valueOf(canalEntrada));
            r.setImporteOrigen(iOrigen);
            r.setImporteDeposito(iDestino);
            r.setNroMovimiento(Integer.valueOf(nroMovimiento));
            r.setOficinaPago(Integer.valueOf(oficinaPago));
            r.setTipoValor(Integer.valueOf(tipoValor));
            r.setIdCliente(c.getIdCliente());
            r.setTipoCobranza(tipoCobranza);
            r.setIdAnioMes(am.getId());
            SimpleDateFormat f = new SimpleDateFormat("yyyyMMdd");
            try {
                r.setFechaPago(f.parse(fechaPago));
            } catch (ParseException ex) {
                Date d = new Date();
                d.setYear(1900);
                d.setMonth(01);
                d.setDate(01);
                r.setFechaPago(d);
            }
            this.lista.add(r);
//            cBO.GuardarBbvaRetornoDetalle(r);
//            modelDetalle.setNumRows(contador);
            modelDetalle.addRow(new Object[contador]);
            tDetalle.setValueAt(contador + 1, contador, 0);
            tDetalle.setValueAt(nombre, contador, 1);
            tDetalle.setValueAt(referencia, contador, 2);
            tDetalle.setValueAt(iOrigen, contador, 3);
            tDetalle.setValueAt(iDestino, contador, 4);
            tDetalle.setValueAt(iMora, contador, 5);
            tDetalle.setValueAt(oficinaPago, contador, 6);
            tDetalle.setValueAt(nroMovimiento, contador, 7);
            tDetalle.setValueAt(fechaPago, contador, 8);
            tDetalle.setValueAt(tipoValor, contador, 9);
            tDetalle.setValueAt(canalEntrada, contador, 10);
            tDetalle.setValueAt(r, contador, 11);
        }
        if (tipoRegistro.equals("03")) {
//            DefaultTableModel modelDetalle = (DefaultTableModel) tRetorno.getModel();
//            int contador = modelDetalle.getRowCount();
            String totalRegistros = registro.substring(3, 11);
            String totalPagos = registro.substring(12, 26);
            String totalDeposito = registro.substring(27, 41);
            String cabecera = txtCabecera.getText();
            this.bbvaRetorno.setTotalRegistros(Integer.valueOf(tipoRegistro));
            this.bbvaRetorno.setTotalPagos(Integer.valueOf(totalPagos));
            this.bbvaRetorno.setTotalDepositos(Integer.valueOf(totalDeposito));
            cabecera = cabecera + "TOTAL REGISTROS:" + totalRegistros + "\n";
            cabecera = cabecera + "TOTAL PAGOS:" + totalPagos + "\n";
            cabecera = cabecera + "TOTAL DEPOSITOS:" + totalDeposito + "\n";
            txtCabecera.setText(cabecera);
        }
    }

    private void CargarArchivo() {
        try {
            JFileChooser file = new JFileChooser();
            file.showOpenDialog(this);
            File abre = file.getSelectedFile();
            DefaultTableModel modelDetalle = (DefaultTableModel) tDetalle.getModel();
            modelDetalle.setRowCount(0);
            if (abre != null) {
                if (abre.getName().endsWith(".txt") || abre.getName().endsWith(".TXT")) {
                    this.lista = new ArrayList();
                    txtCabecera.setText("UBICACION ARCHIVO: " + abre.toString());
                    String cadena;
                    FileReader f = new FileReader(abre.toString());
                    BufferedReader b = new BufferedReader(f);
                    while ((cadena = b.readLine()) != null) {
                        this.LeerRegistro(abre, cadena);
                    }
                    b.close();
                } else {
                    JOptionPane.showMessageDialog(null, "DEBE SELECCIONAR ARCHIVOS CON EXTENSION .PDF");
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex + ""
                    + "\nNo se ha encontrado el archivo",
                    "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        }
    }

    public void CargarArchivo(File abre) {
        try {
            DefaultTableModel modelDetalle = (DefaultTableModel) tDetalle.getModel();
            modelDetalle.setRowCount(0);
            if (abre != null) {
                if (abre.getName().endsWith(".txt") || abre.getName().endsWith(".TXT")) {
                    this.lista = new ArrayList();
                    txtCabecera.setText("UBICACION ARCHIVO: " + abre.toString());
                    String cadena;
                    FileReader f = new FileReader(abre.toString());
                    BufferedReader b = new BufferedReader(f);
                    while ((cadena = b.readLine()) != null) {
                        this.LeerRegistro(abre, cadena);
                    }
                    b.close();
                } else {
                    JOptionPane.showMessageDialog(null, "DEBE SELECCIONAR ARCHIVOS CON EXTENSION .PDF");
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex + ""
                    + "\nNo se ha encontrado el archivo",
                    "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        }
    }

    private String RellenarEspacionBlanco(String cadena, int cant) {
        int contador = cadena.length();
        while (contador < cant) {
            cadena = cadena + " ";
            contador++;
        }
        return cadena;
    }

    private String RellenarCeros(String cadena, int cant) {
        int contador = 0;
        while (contador < cant) {
            cadena = cadena + "0";
            contador++;
        }
        return cadena;
    }

    private String ObtenerMes(int mes) {
        String m = "";
        if (mes == 1) {
            m = "ENE";
        }
        if (mes == 2) {
            m = "FEB";
        }
        if (mes == 3) {
            m = "MAR";
        }
        if (mes == 4) {
            m = "ABR";
        }
        if (mes == 5) {
            m = "MAY";
        }
        if (mes == 6) {
            m = "JUN";
        }
        if (mes == 7) {
            m = "JUL";
        }
        if (mes == 8) {
            m = "AGO";
        }
        if (mes == 9) {
            m = "SEP";
        }
        if (mes == 10) {
            m = "OCT";
        }
        if (mes == 11) {
            m = "NOV";
        }
        if (mes == 12) {
            m = "DIC";
        }
        return m;
    }

    private int ObtenerNroMes(String mes) {
        int m = 1;
        if (mes.equals("ENE")) {
            m = 1;
        }
        if (mes.equals("FEB")) {
            m = 2;
        }
        if (mes.equals("MAR")) {
            m = 3;
        }
        if (mes.equals("ABR")) {
            m = 4;
        }
        if (mes.equals("MAY")) {
            m = 5;
        }
        if (mes.equals("JUN")) {
            m = 6;
        }
        if (mes.equals("JUL")) {
            m = 7;
        }
        if (mes.equals("AGO")) {
            m = 8;
        }
        if (mes.equals("SEP")) {
            m = 9;
        }
        if (mes.equals("OCT")) {
            m = 10;
        }
        if (mes.equals("NOV")) {
            m = 11;
        }
        if (mes.equals("DIC")) {
            m = 11;
        }
        return m;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbUbicacion;
    private javax.swing.JTable tDetalle;
    private javax.swing.JTextArea txtCabecera;
    private javax.swing.JTextField txtFiltroNombre;
    // End of variables declaration//GEN-END:variables
}
