/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caja.frm.caja;

import caja.bo.ContadorBO;
import caja.bo.DocumentoPagoBO;
import caja.bo.ManagerBO;
import caja.bo.SeguridadBO;
import caja.mapeo.entidades.Cliente;
import caja.mapeo.entidades.Cobrador;
import caja.mapeo.entidades.DocumentoPago;
import caja.mapeo.entidades.TipoDocPago;
import caja.mapeo.entidades.TipoDocSerie;
import caja.frm.frmPrincipal;
import caja.mapeo.entidades.CodigoMedioPago;
import caja.mapeo.entidades.Operacion;
import caja.mapeo.entidades.Serie;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyAdapter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import units.DatePicker;

/**
 *
 * @author user
 */
public class frmComprobantePagoCabecera extends javax.swing.JInternalFrame {

    /**
     * Creates new form frmNuevoComprobante
     */
    private String tipoPagador;
    private List<Operacion> lOperaciones = new ArrayList();

    public frmComprobantePagoCabecera() {
        initComponents();
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<TipoDocPago> lTipoDocPago = dpBO.ObtenerTodosTipoDocPago();
        for (TipoDocPago td : lTipoDocPago) {
            cbTipoComprobante.addItem(td.getNombreDocPago());
        }
        cbTipoComprobante.setSelectedIndex(1);
        Date ahora = new Date();
        SimpleDateFormat formateador = new SimpleDateFormat("yyyy-MM-dd");
        txtFecha.setText(formateador.format(ahora));
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.MONTH, 1);
        txtFechaVencimiento.setText(formateador.format(cal.getTime()));
        txtFechaVencimiento.setEnabled(false);
        btnFechaVencimiento.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbTipoComprobante = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cbSerie = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cbCodigo = new javax.swing.JComboBox();
        cbCodigo.getEditor().getEditorComponent().addKeyListener(
            new KeyAdapter(){
                //@Override
                public void keyReleased (KeyEvent e){
                    if (e.getKeyCode() < 37 || e.getKeyCode() > 40 ) {
                        String txt = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
                        if( e.getKeyCode() == KeyEvent.VK_ENTER && !txt.isEmpty() ){
                            cbNombre.requestFocus();
                        }else{
                            BuscarContadorPorCodigo();}
                    }
                }} );
                jLabel4 = new javax.swing.JLabel();
                jLabel5 = new javax.swing.JLabel();
                cbNombre = new javax.swing.JComboBox();
                cbNombre.getEditor().getEditorComponent().addKeyListener(
                    new KeyAdapter(){
                        //@Override
                        public void keyReleased (KeyEvent e){
                            if (e.getKeyCode() < 37 || e.getKeyCode() > 40 ) {
                                if( e.getKeyCode() !=KeyEvent.VK_ENTER )
                                {
                                    BuscarContadorPorNombre();
                                }
                                else
                                {
                                    String txt = ((JTextField) cbNombre.getEditor().getEditorComponent()).getText();
                                    if( !txt.isEmpty() ){
                                        cbCobrador.requestFocus();
                                    }
                                }
                            }
                        }} );
                        lbDireccion = new javax.swing.JLabel();
                        jLabel6 = new javax.swing.JLabel();
                        cbCobrador = new javax.swing.JComboBox();
                        cbCobrador.getEditor().getEditorComponent().addKeyListener(
                            new KeyAdapter(){
                                //@Override
                                public void keyReleased (KeyEvent e){
                                    if (e.getKeyCode() < 37 || e.getKeyCode() > 40 ) {
                                        if( e.getKeyCode() !=KeyEvent.VK_ENTER )
                                        { BuscarCobrador(); }
                                        else
                                        {
                                            String txt = ((JTextField) cbCobrador.getEditor().getEditorComponent()).getText();
                                            if( !txt.isEmpty() ){
                                                btnGenerarDocumentoPago.requestFocus();
                                            }
                                        }
                                    }
                                }} );
                                btnGenerarDocumentoPago = new javax.swing.JButton();
                                btnCancelar = new javax.swing.JButton();
                                jLabel7 = new javax.swing.JLabel();
                                jLabel9 = new javax.swing.JLabel();
                                txtNroCmp = new javax.swing.JTextField();
                                jPanel2 = new javax.swing.JPanel();
                                lbNroComprobanteTentativo = new javax.swing.JLabel();
                                cbMoneda = new javax.swing.JComboBox();
                                jLabel8 = new javax.swing.JLabel();
                                jLabel10 = new javax.swing.JLabel();
                                cbTipoPago = new javax.swing.JComboBox();
                                jLabel11 = new javax.swing.JLabel();
                                txtFechaVencimiento = new javax.swing.JTextField();
                                btnFechaVencimiento = new javax.swing.JButton();

                                setClosable(true);
                                setTitle("NUEVO COMPROBANTE");
                                setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/icono.png"))); // NOI18N
                                setPreferredSize(new java.awt.Dimension(522, 354));

                                jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                                jLabel1.setText("TIPO:");

                                cbTipoComprobante.setPreferredSize(new java.awt.Dimension(123, 20));
                                cbTipoComprobante.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        cbTipoComprobanteActionPerformed(evt);
                                    }
                                });
                                cbTipoComprobante.addKeyListener(new java.awt.event.KeyAdapter() {
                                    public void keyPressed(java.awt.event.KeyEvent evt) {
                                        cbTipoComprobanteKeyPressed(evt);
                                    }
                                });

                                jLabel2.setText("SERIE:");

                                cbSerie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0001", "0002", "0003", "0004", "0005", "0006", "0007", "0008" }));
                                cbSerie.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        cbSerieActionPerformed(evt);
                                    }
                                });
                                cbSerie.addKeyListener(new java.awt.event.KeyAdapter() {
                                    public void keyPressed(java.awt.event.KeyEvent evt) {
                                        cbSerieKeyPressed(evt);
                                    }
                                });

                                jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                                jLabel3.setText("FECHA:");

                                txtFecha.setEditable(false);

                                jButton1.setText("...");
                                jButton1.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        jButton1ActionPerformed(evt);
                                    }
                                });

                                jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

                                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                                jPanel1.setLayout(jPanel1Layout);
                                jPanel1Layout.setHorizontalGroup(
                                    jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGap(0, 133, Short.MAX_VALUE)
                                );
                                jPanel1Layout.setVerticalGroup(
                                    jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGap(0, 18, Short.MAX_VALUE)
                                );

                                cbCodigo.setEditable(true);
                                cbCodigo.addItemListener(new java.awt.event.ItemListener() {
                                    public void itemStateChanged(java.awt.event.ItemEvent evt) {
                                        cbCodigoItemStateChanged(evt);
                                    }
                                });
                                cbCodigo.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        cbCodigoActionPerformed(evt);
                                    }
                                });

                                jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                                jLabel4.setText("CODIGO:");

                                jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                                jLabel5.setText("NOMBRE:");

                                cbNombre.setEditable(true);
                                cbNombre.setPreferredSize(new java.awt.Dimension(383, 20));
                                cbNombre.addItemListener(new java.awt.event.ItemListener() {
                                    public void itemStateChanged(java.awt.event.ItemEvent evt) {
                                        cbNombreItemStateChanged(evt);
                                    }
                                });
                                cbNombre.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        cbNombreActionPerformed(evt);
                                    }
                                });

                                lbDireccion.setText("AV ARGENTICA 134");
                                lbDireccion.setPreferredSize(new java.awt.Dimension(380, 14));

                                jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                                jLabel6.setText("DIRECCIÓN:");

                                cbCobrador.addItemListener(new java.awt.event.ItemListener() {
                                    public void itemStateChanged(java.awt.event.ItemEvent evt) {
                                        cbCobradorItemStateChanged(evt);
                                    }
                                });
                                cbCobrador.addKeyListener(new java.awt.event.KeyAdapter() {
                                    public void keyPressed(java.awt.event.KeyEvent evt) {
                                        cbCobradorKeyPressed(evt);
                                    }
                                });

                                btnGenerarDocumentoPago.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/comproante.png"))); // NOI18N
                                btnGenerarDocumentoPago.setText("GENERAR COMPROBANTE");
                                btnGenerarDocumentoPago.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        btnGenerarDocumentoPagoActionPerformed(evt);
                                    }
                                });

                                btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/cancelar.png"))); // NOI18N
                                btnCancelar.setText("CANCELAR");
                                btnCancelar.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        btnCancelarActionPerformed(evt);
                                    }
                                });

                                jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                                jLabel7.setText("COBRADOR:");

                                jLabel9.setText("NRO CMP:");

                                txtNroCmp.addKeyListener(new java.awt.event.KeyAdapter() {
                                    public void keyPressed(java.awt.event.KeyEvent evt) {
                                        txtNroCmpKeyPressed(evt);
                                    }
                                    public void keyTyped(java.awt.event.KeyEvent evt) {
                                        txtNroCmpKeyTyped(evt);
                                    }
                                });

                                jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

                                lbNroComprobanteTentativo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                                lbNroComprobanteTentativo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                                lbNroComprobanteTentativo.setText("000000");

                                javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                                jPanel2.setLayout(jPanel2Layout);
                                jPanel2Layout.setHorizontalGroup(
                                    jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbNroComprobanteTentativo, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                                );
                                jPanel2Layout.setVerticalGroup(
                                    jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(lbNroComprobanteTentativo))
                                );

                                cbMoneda.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SOLES", "DOLARES" }));
                                cbMoneda.addKeyListener(new java.awt.event.KeyAdapter() {
                                    public void keyPressed(java.awt.event.KeyEvent evt) {
                                        cbMonedaKeyPressed(evt);
                                    }
                                });

                                jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                                jLabel8.setText("MONEDA:");

                                jLabel10.setText("TIPO PAGO:");

                                cbTipoPago.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CONTADO", "CREDITO", "VOUCHER/T. BANCARIA" }));
                                cbTipoPago.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        cbTipoPagoActionPerformed(evt);
                                    }
                                });
                                cbTipoPago.addKeyListener(new java.awt.event.KeyAdapter() {
                                    public void keyPressed(java.awt.event.KeyEvent evt) {
                                        cbTipoPagoKeyPressed(evt);
                                    }
                                });

                                jLabel11.setText("F. VENCI.:");

                                txtFechaVencimiento.setEditable(false);

                                btnFechaVencimiento.setText("...");
                                btnFechaVencimiento.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        btnFechaVencimientoActionPerformed(evt);
                                    }
                                });

                                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                                getContentPane().setLayout(layout);
                                layout.setHorizontalGroup(
                                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(txtFechaVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(btnFechaVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(0, 0, Short.MAX_VALUE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addGap(8, 8, 8)
                                                                .addComponent(cbCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addGap(275, 275, 275)
                                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(cbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(cbMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addComponent(lbDireccion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(cbCobrador, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                                                .addGap(4, 4, 4))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(1, 1, 1))
                                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(9, 9, 9)
                                                                .addComponent(cbTipoComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGap(9, 9, 9)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel2)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(cbSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel9)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(txtNroCmp, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(btnGenerarDocumentoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(3, 3, 3)
                                                        .addComponent(jLabel10)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(cbTipoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                        .addContainerGap())
                                );
                                layout.setVerticalGroup(
                                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jButton1)
                                                .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel3))
                                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel1)
                                            .addComponent(cbTipoComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2)
                                            .addComponent(cbSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel9)
                                            .addComponent(txtNroCmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(cbCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel5)
                                            .addComponent(cbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel6)
                                            .addComponent(lbDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(cbCobrador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(cbMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel10)
                                            .addComponent(cbTipoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(btnFechaVencimiento)
                                                .addComponent(txtFechaVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel11))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(btnGenerarDocumentoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addContainerGap())
                                );

                                pack();
                            }// </editor-fold>//GEN-END:initComponents

    public void CargarDatos(String tipoPagador) {
        this.tipoPagador = tipoPagador;
        DocumentoPagoBO dBO = DocumentoPagoBO.getInstance();
        //List<Cliente> lClientes = dBO.ObtenerTodosClientes();
        List<Cobrador> lCobrador = dBO.ObtenerTodosCobradores();
        cbCobrador.addItem("NINGUNO");
        for (Cobrador co : lCobrador) {
            if (co.getEstado() != null) {
                if (co.getEstado().equals("H")) {
                    cbCobrador.addItem(co.getCliente().getPapePat() + " " + co.getCliente().getPapeMat() + " " + co.getCliente().getPnombre());
                }
            }
        }
        cbCobrador.setSelectedIndex(0);
        ((JTextField) cbCobrador.getEditor().getEditorComponent()).setText("");
        cbCodigo.setPreferredSize(new Dimension(123, 20));
        cbTipoComprobante.requestFocus();

        this.ObtenerCorrelativo();
    }

    private void ObtenerCorrelativo() {
        if (cbSerie.getSelectedItem() != null) {
            String serieActual = cbSerie.getSelectedItem().toString();
            DocumentoPagoBO dBO = DocumentoPagoBO.getInstance();
            List<TipoDocPago> lDocPago = dBO.ObtenerTodosTipoDocPago();
            TipoDocPago docPago = null;
            for (TipoDocPago dp : lDocPago) {
                if (dp.getNombreDocPago().equals(cbTipoComprobante.getSelectedItem().toString())) {
                    docPago = dp;
                    break;
                }
            }
            List<Serie> l = dBO.ObtenerTodasSeries_SegunTipoDocumento(docPago.getIdTipoDocPago());
            cbSerie.removeAllItems();
            for (Serie s : l) {
                cbSerie.addItem(s.getSerie());
            }
            cbSerie.setSelectedItem(serieActual);
            TipoDocSerie tds = dBO.ObtenerTipoDocSerie(docPago.getIdTipoDocPago(), cbSerie.getSelectedItem().toString());
            int nroCorrelativo = dBO.ObtenerSolamenteCorrelativo_Metodo2(tds.getId());
//            int nroCorrelativo = dBO.ObtenerSolamenteCorrelativo(tds.getId());
            lbNroComprobanteTentativo.setText("NRO CMP: " + String.valueOf(nroCorrelativo));
            if (docPago.getEsElectronico() != null) {
                if (docPago.getEsElectronico().equals("S")) {
                    txtNroCmp.setEnabled(false);
                } else {
                    txtNroCmp.setEnabled(true);
                }
            } else {
                txtNroCmp.setEnabled(true);
            }
        }
    }

    private void BuscarContadorPorCodigo() {
        String txt = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
        txt = txt.toUpperCase();
        cbCodigo.removeAllItems();
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        if (this.tipoPagador.equals("C")) {
            for (Cliente cli : lClientes) {
                if (!Objects.isNull(cli.getTipoCliente())) {
                    if (cli.getTipoCliente().equals("C")) {
                        if (!Objects.isNull(cli.getCcodigoCole())) {
                            if (cli.getCcodigoCole().contains(txt)) {
                                cbCodigo.addItem(cli.getCcodigoCole());
                            }
                        }
                    }
                }
            }
            cbCodigo.setSelectedIndex(-1);
            cbCodigo.hidePopup();
            cbCodigo.showPopup();
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(txt);
        }
        if (this.tipoPagador.equals("S")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("S")) {
                    if (cli.getScodigoSoc().contains(txt)) {
                        cbCodigo.addItem(cli.getScodigoSoc());
                    }
                }
            }
            cbCodigo.setSelectedIndex(-1);
            cbCodigo.hidePopup();
            cbCodigo.showPopup();
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(txt);
        }
        if (this.tipoPagador.equals("E")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("E")) {
                    if (cli.getEruc().contains(txt)) {
                        cbCodigo.addItem(cli.getEruc());
                    }
                }
            }
            cbCodigo.setSelectedIndex(-1);
            cbCodigo.hidePopup();
            cbCodigo.showPopup();
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(txt);
        }
        if (this.tipoPagador.equals("P")) {
            for (Cliente cli : lClientes) {
                //System.out.println("ID: " + cli.getIdCliente());
                if (cli.getTipoCliente().equals("P")) {
                    if (cli.getPnroDocumento() != null) {
                        if (cli.getPnroDocumento().contains(txt)) {
                            cbCodigo.addItem(cli.getPnroDocumento());
                        }
                    }
                }
            }
            cbCodigo.setSelectedIndex(-1);
            cbCodigo.hidePopup();
            cbCodigo.showPopup();
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(txt);
        }
    }

    private void BuscarContadorPorNombre() {
        String txt = ((JTextField) cbNombre.getEditor().getEditorComponent()).getText();
        txt = txt.toUpperCase();
        cbNombre.removeAllItems();
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        if (this.tipoPagador.equals("C")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("C")) {
                    String nombre = cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                    if (nombre.contains(txt)) {
                        cbNombre.addItem(cli.getCcodigoCole() + " | " + cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre());
                    }
                }
            }
            cbNombre.setSelectedIndex(-1);
            cbNombre.hidePopup();
            cbNombre.showPopup();
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(txt);
        }
        if (this.tipoPagador.equals("S")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("S")) {
                    if (cli.getSnombreSociedad().contains(txt)) {
                        cbNombre.addItem(cli.getScodigoSoc() + " | " + cli.getSnombreSociedad());
                    }
                }
            }
            cbNombre.setSelectedIndex(-1);
            cbNombre.hidePopup();
            cbNombre.showPopup();
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(txt);
        }
        if (this.tipoPagador.equals("E")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("E")) {
                    if (cli.getEnombre().contains(txt)) {
                        cbNombre.addItem(cli.getEruc() + " | " + cli.getEnombre());
                    }
                }
            }
            cbNombre.setSelectedIndex(-1);
            cbNombre.hidePopup();
            cbNombre.showPopup();
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(txt);
        }
        if (this.tipoPagador.equals("P")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("P")) {
                    String nombre = cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                    if (nombre.contains(txt)) {
                        cbNombre.addItem(cli.getPnroDocumento() + " | " + nombre);
                    }
                }
            }
            cbNombre.setSelectedIndex(-1);
            cbNombre.hidePopup();
            cbNombre.showPopup();
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(txt);
        }
    }

    private void BuscarCobrador() {
        String txt = ((JTextField) cbCobrador.getEditor().getEditorComponent()).getText();
        txt = txt.toUpperCase();
        cbCobrador.removeAllItems();
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cobrador> lCobradores = dpBO.ObtenerTodosCobradores();
        for (Cobrador c : lCobradores) {
            String nombre = c.getCliente().getPapePat() + " " + c.getCliente().getPapeMat() + " " + c.getCliente().getPnombre();
            if (nombre.contains(txt)) {
                cbCobrador.addItem(nombre);
            }
        }
        cbCobrador.setSelectedIndex(-1);
        cbCobrador.hidePopup();
        cbCobrador.showPopup();
        ((JTextField) cbCobrador.getEditor().getEditorComponent()).setText(txt);
    }

    private void BuscarConceptoPago() {
        /*String txt = ((JTextField) cbConceptoPago.getEditor().getEditorComponent()).getText();
         txt = txt.toUpperCase();
         cbConceptoPago.removeAllItems();
         DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
         List<ConceptoPagoDetalle> lConceptos = dpBO.ObtenerTodosConceptoPago();
         for (ConceptoPagoDetalle concepto : lConceptos) {
         if (concepto.getDescripcion().contains(txt)) {
         cbConceptoPago.addItem(concepto.getDescripcion());
         }
         }
         cbConceptoPago.setSelectedIndex(-1);
         cbConceptoPago.hidePopup();
         cbConceptoPago.showPopup();
         ((JTextField) cbConceptoPago.getEditor().getEditorComponent()).setText(txt);*/
    }

    private boolean VerificarCierreDiario(DocumentoPagoBO dpBO) {
        try {
            boolean estaCerrado = dpBO.EstaCerradoElDia(txtFecha.getText());
            return estaCerrado;
        } catch (Exception e) {
            e.printStackTrace();
            return true;
        }
    }

    public void agregarNroOperacionFecha(List l) {
        this.lOperaciones = l;
    }


    private void btnGenerarDocumentoPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarDocumentoPagoActionPerformed
        try {
            DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
            boolean estaCerradoElDia = this.VerificarCierreDiario(dpBO);
            if (estaCerradoElDia) {
                JOptionPane.showMessageDialog(this,
                        "EL DÍA " + txtFecha.getText() + " ESTÁ CERRADO",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            //DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
            String codigo = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
            String nombreCliente = ((JTextField) cbNombre.getEditor().getEditorComponent()).getText();
            if (nombreCliente.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "DEBE LLENAR EL CAMPO NOMBRE",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            Cliente cliente = null;
            List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
            if (this.tipoPagador.equals("C")) {
                for (Cliente cl : lClientes) {
                    if (cl.getTipoCliente().equals("C") && cl.getCcodigoCole().equals(codigo)) {
                        cliente = cl;
                        break;
                    }
                }
                if (cliente == null) {
                    JOptionPane.showMessageDialog(this,
                            "DEBE ELEGIR UN CONTADOR",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            if (this.tipoPagador.equals("S")) {
                for (Cliente cl : lClientes) {
                    if (cl.getTipoCliente().equals("S") && cl.getScodigoSoc().equals(codigo)) {
                        cliente = cl;
                        break;
                    }
                }
                if (cliente == null) {
                    JOptionPane.showMessageDialog(this,
                            "DEBE ELEGIR UNA SOCIEDAD",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            if (this.tipoPagador.equals("E")) {
                for (Cliente cl : lClientes) {
                    if (cl.getTipoCliente().equals("E") && cl.getEruc().equals(codigo)) {
                        cliente = cl;
                        break;
                    }
                }
                if (cliente == null) {

                    int opcion = JOptionPane.showConfirmDialog(null, "LA EMPRESA NO EXISTE EN LA BASE DE DATOS ¿DESEA GENERAR EL COMPROBANTE DE TODAS MANERAS ?");
                    if (opcion != JOptionPane.YES_OPTION) {
                        return;
                    }
                }
            }

            if (this.tipoPagador.equals("P")) {
                for (Cliente cl : lClientes) {
                    if (cl.getTipoCliente().equals("P")) {
                        if (cl.getPnroDocumento() != null) {
                            if (cl.getPnroDocumento().equals(codigo)) {
                                cliente = cl;
                                break;
                            }
                        }
                    }
                }

                if (cliente == null) {
                    int opcion = JOptionPane.showConfirmDialog(null, "LA PERSONA NO EXISTE EN LA BASE DE DATOS, ¿DESEA GENERAR EL COMPROBANTE DE TODAS MANERAS ?");
                    if (opcion == JOptionPane.NO_OPTION) {
                        return;
                    }
                }
            }

            List<TipoDocPago> lDocPago = dpBO.ObtenerTodosTipoDocPago();
            TipoDocPago docPago = null;
            for (TipoDocPago dp : lDocPago) {
                if (dp.getNombreDocPago().equals(cbTipoComprobante.getSelectedItem().toString())) {
                    docPago = dp;
                    break;
                }
            }
            if (docPago == null) {
                JOptionPane.showMessageDialog(this,
                        "DEBE ELEGIR UN DOCUMENTO DE PAGO",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            String tieneDetraccion = "N";
            CodigoMedioPago cmp = null;
            if (docPago.getIdTipoDocPago() == 5) {
                int reply = JOptionPane.showConfirmDialog(null, "¿ Generar detracción ?", "Detracción", JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION) {
                    tieneDetraccion = "S";
                    ManagerBO mgBO = ManagerBO.getInstance();
                    List<CodigoMedioPago> lMedioPago = mgBO.ObtenerTodosCodigoMedioPago();
                    Object[] medioPago = new Object[lMedioPago.size() + 1];
                    for (int i = 0; i < lMedioPago.size(); i++) {
                        CodigoMedioPago cmpa = (CodigoMedioPago) lMedioPago.get(i);
                        medioPago[i] = cmpa;
                    }
                    Object opcion = JOptionPane.showInputDialog(null, "Selecciona un medio de pago", "Elegir", JOptionPane.QUESTION_MESSAGE, null, medioPago, medioPago[0]);
                    if (Objects.isNull(opcion)) {
                        JOptionPane.showMessageDialog(this, "Debe elegir un medio de pago", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (((CodigoMedioPago) opcion).getId() <= 0) {
                        JOptionPane.showMessageDialog(this, "Debe elegir un medio de pago", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    cmp = (CodigoMedioPago) opcion;
                }
            }

            List<Cobrador> lCobradores = dpBO.ObtenerTodosCobradores();
            Cobrador cobrador = null;
            String nombreCobrador;
            if (!cbCobrador.getSelectedItem().equals("NINGUNO")) {
                if (cbCobrador.getSelectedItem() != null) {
                    for (Cobrador cobr : lCobradores) {
                        nombreCobrador = cobr.getCliente().getPapePat() + " " + cobr.getCliente().getPapeMat() + " " + cobr.getCliente().getPnombre();
                        if (nombreCobrador.equals(cbCobrador.getSelectedItem().toString())) {
                            cobrador = cobr;
                            break;
                        }
                    }
                }
            }

            DocumentoPago doc = new DocumentoPago();
            if (cliente != null) {
                if (cliente.getTipoCliente().equals("C")) {
                    doc.setCliente(cliente);
                    doc.setNombreCliente(cliente.getPapePat() + " " + cliente.getPapeMat() + " " + cliente.getPnombre());
                    if (tieneDetraccion.equals("S")) {
                        if (!Objects.isNull(doc.getCliente().getCdisDomicilio())) {
                            if (doc.getCliente().getCdisDomicilio() > 0) {
                                ContadorBO cBO = ContadorBO.getInstance();
                                String codigoUbigeo = cBO.obteneroCodigoUbigeo(doc.getCliente().getCdisDomicilio());
                                if (codigoUbigeo.isEmpty() || codigoUbigeo.equals("000000")) {
                                    JOptionPane.showMessageDialog(this,
                                            "EL CLIENTE NO TIENE UBIGEO",
                                            "ERROR",
                                            JOptionPane.ERROR_MESSAGE);
                                    return;
                                } else {
                                    doc.setCodigoUbigeo(codigoUbigeo);
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(this,
                                    "EL CLIENTE NO TIENE UBIGEO",
                                    "ERROR",
                                    JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                }
                if (cliente.getTipoCliente().equals("S")) {
                    doc.setCliente(cliente);
                    doc.setNombreCliente(cliente.getSnombreSociedad());
                    if (tieneDetraccion.equals("S")) {
                        if (!Objects.isNull(doc.getCliente().getSdistrito())) {
                            if (doc.getCliente().getSdistrito() > 0) {
                                ContadorBO cBO = ContadorBO.getInstance();
                                String codigoUbigeo = cBO.obteneroCodigoUbigeo(doc.getCliente().getSdistrito());
                                if (codigoUbigeo.isEmpty() || codigoUbigeo.equals("000000")) {
                                    JOptionPane.showMessageDialog(this,
                                            "EL CLIENTE NO TIENE UBIGEO",
                                            "ERROR",
                                            JOptionPane.ERROR_MESSAGE);
                                    return;
                                } else {
                                    doc.setCodigoUbigeo(codigoUbigeo);
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(this,
                                    "EL CLIENTE NO TIENE UBIGEO",
                                    "ERROR",
                                    JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                }
                if (cliente.getTipoCliente().equals("E")) {
                    doc.setCliente(cliente);
                    doc.setNombreCliente(cliente.getEnombre());
                    if (tieneDetraccion.equals("S")) {
                        if (!Objects.isNull(doc.getCliente().getEdisDomicilio())) {
                            if (doc.getCliente().getEdisDomicilio() > 0) {
                                ContadorBO cBO = ContadorBO.getInstance();
                                String codigoUbigeo = cBO.obteneroCodigoUbigeo(doc.getCliente().getEdisDomicilio());
                                if (codigoUbigeo.isEmpty() || codigoUbigeo.equals("000000")) {
                                    JOptionPane.showMessageDialog(this,
                                            "EL CLIENTE NO TIENE UBIGEO",
                                            "ERROR",
                                            JOptionPane.ERROR_MESSAGE);
                                    return;
                                } else {
                                    doc.setCodigoUbigeo(codigoUbigeo);
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(this,
                                    "EL CLIENTE NO TIENE UBIGEO",
                                    "ERROR",
                                    JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                }
                if (cliente.getTipoCliente().equals("P")) {
                    doc.setCliente(cliente);
                    String nombre = "";
                    String apePat = "";
                    String apeMat = "";
                    if (cliente.getPapePat() != null) {
                        apePat = cliente.getPapePat();
                    }
                    if (cliente.getPapeMat() != null) {
                        apeMat = cliente.getPapeMat();
                    }
                    if (cliente.getPnombre() != null) {
                        nombre = cliente.getPnombre();
                    }
                    doc.setNombreCliente(apePat + " " + apeMat + " " + nombre);
                    if (tieneDetraccion.equals("S")) {
                        if (!Objects.isNull(doc.getCliente().getCdisDomicilio())) {
                            if (doc.getCliente().getCdisDomicilio() > 0) {
                                ContadorBO cBO = ContadorBO.getInstance();
                                String codigoUbigeo = cBO.obteneroCodigoUbigeo(doc.getCliente().getCdisDomicilio());
                                if (codigoUbigeo.isEmpty() || codigoUbigeo.equals("000000")) {
                                    JOptionPane.showMessageDialog(this,
                                            "EL CLIENTE NO TIENE UBIGEO",
                                            "ERROR",
                                            JOptionPane.ERROR_MESSAGE);
                                    return;
                                } else {
                                    doc.setCodigoUbigeo(codigoUbigeo);
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(this,
                                    "EL CLIENTE NO TIENE UBIGEO",
                                    "ERROR",
                                    JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                }
            } else {
                Cliente clienteNull = new Cliente();
                clienteNull.setIdCliente(13952);
                doc.setCliente(clienteNull);
                doc.setNombreCliente(((JTextField) cbNombre.getEditor().getEditorComponent()).getText());
            }
            doc.setTieneDetraccion(tieneDetraccion);
            doc.setCodigoMedioPago(!Objects.isNull(cmp) ? cmp.getCodigo() : "");
            doc.setNroSerie(cbSerie.getSelectedItem().toString());
            TipoDocSerie tds = dpBO.ObtenerTipoDocSerie(docPago.getIdTipoDocPago(), cbSerie.getSelectedItem().toString());
            int nroCMP = 0;
            if (!txtNroCmp.getText().isEmpty()) {
                nroCMP = Integer.valueOf(txtNroCmp.getText());
            }
            doc.setNroDocumentoPago(nroCMP);
            doc.setTipoDocSerie(tds);
            doc.setCobrador(cobrador);
            doc.setEstado("A");
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            if (cbMoneda.getSelectedItem().toString().equals("SOLES")) {
                doc.setMoneda("S");
            } else {
                doc.setMoneda("D");
            }
            if (cbTipoPago.getSelectedItem().toString().equals("CONTADO") || cbTipoPago.getSelectedItem().toString().equals("VOUCHER/T. BANCARIA")) {
                doc.setTipoPago("CON");
                doc.setFormaPagoSunat("Contado");
                Date ahora = new Date();
                doc.setFechaVencimientoSunat(ahora);
            } else {
                doc.setTipoPago("CRE");
                doc.setFormaPagoSunat("Credito");
                try {
                    Date fechaVencimiento = format.parse(txtFechaVencimiento.getText());
                    doc.setFechaVencimientoSunat(fechaVencimiento);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "TIENE QUE PONER LA FECHA DE VENCIMIENTO", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }

            SeguridadBO sBO = SeguridadBO.getInstance();
            Date fechaServer = sBO.ObtenerFechaHoraServidor();
            SimpleDateFormat formateador = new SimpleDateFormat("yyyy-MM-dd");
            Date date = formateador.parse(txtFecha.getText());
            doc.setFechaPago(date);
            doc.setFechaSunat(fechaServer);
            //------------------------AÑADIR NRO DE OPERACION---------------------
            if (cbTipoPago.getSelectedItem().equals("VOUCHER/T. BANCARIA")) {
                frmPrincipal f = (frmPrincipal) this.getParent().getParent().getParent().getParent().getParent();
                this.lOperaciones = new ArrayList();
                f.AbrirFormularioNroOperacion(this, doc);
                if (this.lOperaciones.isEmpty()) {
                    JOptionPane.showMessageDialog(this,
                            "DEBE INGRESAR POR LO MENOS UN NRO DE OPERACION",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    doc.setOperacions(new HashSet<Operacion>(this.lOperaciones));
                }
            }

            if (doc.getNroDocumentoPago() == 0) {
                int nroCMPCorrelativo = dpBO.ObtenerCorrelativoComprobante(doc);
                doc.setNroDocumentoPago(nroCMPCorrelativo);
            }
            boolean existeNroCMP = dpBO.VerificarNroComprobanteExiste(doc);
            if (existeNroCMP) {
                JOptionPane.showMessageDialog(this,
                        "EL NRO DE COMPROBANTE DE PAGO YA EXISTE",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            boolean seGuardo = dpBO.GuardarDocumentoPago_CualquierNro(doc);
            if (seGuardo) {
                cbCobrador.setEnabled(false);
                cbCodigo.setEnabled(false);
                cbNombre.setEnabled(false);
                this.lOperaciones = new ArrayList();
                frmPrincipal f = (frmPrincipal) this.getParent().getParent().getParent().getParent().getParent();
                f.AbrirFormularioDetalleComprobantePago(doc, this.tipoPagador, 1);
                this.dispose();
                //txtNroDoc.setText(String.format("%05d", doc.getNroDocumentoPago()));
            } else {
                JOptionPane.showMessageDialog(this,
                        "NO SE GENERO EL COMPROBANTE DE PAGO",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnGenerarDocumentoPagoActionPerformed

    private void cbTipoComprobanteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbTipoComprobanteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cbSerie.requestFocus();
        }
    }//GEN-LAST:event_cbTipoComprobanteKeyPressed

    private void cbSerieKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbSerieKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtNroCmp.requestFocus();
        }
    }//GEN-LAST:event_cbSerieKeyPressed

    private void cbCodigoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCodigoItemStateChanged
        String codigo = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
        this.ObtenerDatosSegunCodigo(codigo);
    }//GEN-LAST:event_cbCodigoItemStateChanged

    private void cbNombreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbNombreItemStateChanged
        String nombre = ((JTextField) cbNombre.getEditor().getEditorComponent()).getText();
        this.ObtenerDatosSegunNombre(nombre);
    }//GEN-LAST:event_cbNombreItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DatePicker dtp = new DatePicker(this);
        if (!dtp.setPickedDate().isEmpty()) {
            txtFecha.setText(dtp.setPickedDate());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cbCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCodigoActionPerformed

    private void cbCobradorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCobradorItemStateChanged
        String nombre = (String) evt.getItem();
        this.ObtenerDatosCobradorSegunNombre(nombre);
    }//GEN-LAST:event_cbCobradorItemStateChanged

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void txtNroCmpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroCmpKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cbCodigo.requestFocus();
        }
    }//GEN-LAST:event_txtNroCmpKeyPressed

    private void txtNroCmpKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroCmpKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            getToolkit().beep();
            evt.consume();
            //Error.setText("Ingresa Solo Numeros";
        }
    }//GEN-LAST:event_txtNroCmpKeyTyped

    private void cbTipoComprobanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoComprobanteActionPerformed
        this.ObtenerCorrelativo();
    }//GEN-LAST:event_cbTipoComprobanteActionPerformed

    private void cbSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSerieActionPerformed
        this.ObtenerCorrelativo();
    }//GEN-LAST:event_cbSerieActionPerformed

    private void cbNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbNombreActionPerformed

    private void cbMonedaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbMonedaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cbTipoPago.requestFocus();
        }
    }//GEN-LAST:event_cbMonedaKeyPressed

    private void cbTipoPagoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbTipoPagoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnGenerarDocumentoPago.requestFocus();
        }
    }//GEN-LAST:event_cbTipoPagoKeyPressed

    private void cbCobradorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbCobradorKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cbMoneda.requestFocus();
        }
    }//GEN-LAST:event_cbCobradorKeyPressed

    private void cbTipoPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoPagoActionPerformed
        if (cbTipoPago.getSelectedItem().toString().equals("CONTADO")) {
            txtFechaVencimiento.setEnabled(false);
            btnFechaVencimiento.setEnabled(false);
        } else {
            if (cbTipoPago.getSelectedItem().toString().equals("CREDITO")) {
                txtFechaVencimiento.setEnabled(true);
                btnFechaVencimiento.setEnabled(true);
            } else {
                if (cbTipoPago.getSelectedItem().toString().equals("VOUCHER/T. BANCARIA")) {
                    txtFechaVencimiento.setEnabled(false);
                    btnFechaVencimiento.setEnabled(false);
                } else {
                }
            }
        }
    }//GEN-LAST:event_cbTipoPagoActionPerformed

    private void btnFechaVencimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFechaVencimientoActionPerformed
        DatePicker dtp = new DatePicker(this);
        if (!dtp.setPickedDate().isEmpty()) {
            txtFechaVencimiento.setText(dtp.setPickedDate());
        }
    }//GEN-LAST:event_btnFechaVencimientoActionPerformed

    private void ObtenerDatosSegunCodigo(String codigo) {
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        if (this.tipoPagador.equals("C")) {
            for (Cliente cli : lClientes) {
                if (!Objects.isNull(cli.getTipoCliente())) {
                    if (cli.getTipoCliente().equals("C")) {
                        if (!Objects.isNull(cli.getCcodigoCole())) {
                            if (cli.getCcodigoCole().equals(codigo)) {
                                String nombre = cli.getCcodigoCole() + " | " + cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                                ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(nombre);
                                lbDireccion.setText(cli.getPdireccionDomicilio());
                                return;
                            }
                        }
                    }
                }
            }
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
            lbDireccion.setText("");
        }
        if (this.tipoPagador.equals("S")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("S")) {
                    if (cli.getScodigoSoc().equals(codigo)) {
                        ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(cli.getSnombreSociedad());
                        if (cli.getSdireccion() != null) {
                            lbDireccion.setText(cli.getSdireccion());
                        }
                        return;
                    }
                }
            }
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
            lbDireccion.setText("");
        }
        if (this.tipoPagador.equals("E")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("E")) {
                    if (cli.getEruc().equals(codigo)) {
                        ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(cli.getEruc() + " | " + cli.getEnombre());
                        if (cli.getEdireccion() != null) {
                            lbDireccion.setText(cli.getEdireccion());
                        }
                        return;
                    }
                }
            }
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
            lbDireccion.setText("");
        }
        if (this.tipoPagador.equals("P")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("P")) {
                    if (cli.getPnroDocumento() != null) {
                        if (cli.getPnroDocumento().equals(codigo)) {
                            //System.out.println("ID: " + cli.getIdCliente());
                            String nombre = "";
                            String apePat = "";
                            String apeMat = "";
                            if (cli.getPnombre() != null) {
                                nombre = cli.getPnombre();
                            }
                            if (cli.getPapePat() != null) {
                                apePat = cli.getPapePat();
                            }
                            if (cli.getPapeMat() != null) {
                                apeMat = cli.getPapeMat();
                            }
                            String nombreCompleto = apePat + " " + apeMat + " " + nombre;
                            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText(nombreCompleto);
                            if (cli.getPdireccionDomicilio() != null) {
                                lbDireccion.setText(cli.getPdireccionDomicilio());
                            }
                            return;
                        }
                    }
                }
            }
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
            lbDireccion.setText("");
        }
    }

    private void ObtenerDatosSegunNombre(String nombre) {
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cliente> lClientes = dpBO.ObtenerTodosClientes();
        if (this.tipoPagador.equals("C")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("C")) {
                    String nombreContador = cli.getCcodigoCole() + " | " + cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                    if (nombreContador.equals(nombre)) {
                        ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(cli.getCcodigoCole());
                        lbDireccion.setText(cli.getPdireccionDomicilio());
                        return;
                    }
                }
            }
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
            lbDireccion.setText("");
        }
        if (this.tipoPagador.equals("S")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("S")) {
                    if (cli.getSnombreSociedad().equals(nombre)) {
                        ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(cli.getScodigoSoc());
                        lbDireccion.setText(cli.getSdireccion());
                        return;
                    }
                }
            }
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
            lbDireccion.setText("");
        }
        if (this.tipoPagador.equals("E")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("E")) {
                    String nombreEmpresa = cli.getEruc() + " | " + cli.getEnombre();
                    if (nombreEmpresa.equals(nombre)) {
                        ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(cli.getEruc());
                        lbDireccion.setText(cli.getEdireccion());
                        return;
                    }
                }
            }
            ((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
            lbDireccion.setText("");
        }
        if (this.tipoPagador.equals("P")) {
            for (Cliente cli : lClientes) {
                if (cli.getTipoCliente().equals("P")) {
                    String nombrePersona = cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                    String nombrePersonaDNI = cli.getPnroDocumento() + " | " + cli.getPapePat() + " " + cli.getPapeMat() + " " + cli.getPnombre();
                    //String dni = ((JTextField) cbCodigo.getEditor().getEditorComponent()).getText();
                    if (nombrePersona.equals(nombre)) {
                        //if (cli.getPnroDocumento().equals(dni)) {
                        ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(cli.getPnroDocumento());
                        lbDireccion.setText(cli.getPdireccionDomicilio());
                        return;
                    }
                    if (nombrePersonaDNI.equals(nombre)) {
                        //if (cli.getPnroDocumento().equals(dni)) {
                        ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText(cli.getPnroDocumento());
                        lbDireccion.setText(cli.getPdireccionDomicilio());
                        return;
                    }
                }
            }
            //((JTextField) cbNombre.getEditor().getEditorComponent()).setText("");
            ((JTextField) cbCodigo.getEditor().getEditorComponent()).setText("");
            lbDireccion.setText("");
        }
    }

    private void ObtenerDatosCobradorSegunNombre(String nombre) {
        DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
        List<Cobrador> lCobradores = dpBO.ObtenerTodosCobradores();
        for (Cobrador co : lCobradores) {
            String nombreCobrador = co.getCliente().getPapePat() + " " + co.getCliente().getPapeMat() + " " + co.getCliente().getPnombre();
            if (nombreCobrador.equals(nombre)) {
                ((JTextField) cbCobrador.getEditor().getEditorComponent()).setText(nombreCobrador);
                return;
            }
        }
        ((JTextField) cbCobrador.getEditor().getEditorComponent()).setText("");
    }

    private void ObtenerDatosCobrador(String nombre) {
        /*DocumentoPagoBO dpBO = DocumentoPagoBO.getInstance();
         List<Cobrador> lCobradores = dpBO.ObtenerTodosCobradores();
         for (Cobrador c : lCobradores) {
         String nombreCobrador = c.getPersona().getApePat() + " " + c.getPersona().getApeMat() + " " + c.getPersona().getNombre();
         if (nombreCobrador.equals(nombre)) {
         return;
         }
         }
         ((JTextField) cbCobrador.getEditor().getEditorComponent()).setText("");*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnFechaVencimiento;
    private javax.swing.JButton btnGenerarDocumentoPago;
    private javax.swing.JComboBox cbCobrador;
    private javax.swing.JComboBox cbCodigo;
    private javax.swing.JComboBox cbMoneda;
    private javax.swing.JComboBox cbNombre;
    private javax.swing.JComboBox cbSerie;
    private javax.swing.JComboBox cbTipoComprobante;
    private javax.swing.JComboBox cbTipoPago;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lbDireccion;
    private javax.swing.JLabel lbNroComprobanteTentativo;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtFechaVencimiento;
    private javax.swing.JTextField txtNroCmp;
    // End of variables declaration//GEN-END:variables
}
