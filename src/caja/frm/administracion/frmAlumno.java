/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caja.frm.administracion;

import caja.bo.AdministracionCursoDTO;
import caja.bo.AlumnoBO;
import caja.bo.DocumentoPagoBO;
import caja.bo.SeguridadBO;
import caja.mapeo.entidades.Alumnos;
import caja.mapeo.entidades.Cliente;
import caja.mapeo.entidades.DocumentoPago;
import caja.mapeo.entidades.DocumentoPagoDet;
import caja.mapeo.entidades.Serie;
import caja.mapeo.entidades.TipoDocPago;
import caja.mapeo.entidades.TipoDocSerie;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author juan carlos
 */
public class frmAlumno extends javax.swing.JInternalFrame {

    private Object tDetalle;

    /**
     * Creates new form frmAlumno
     */
    public frmAlumno() {
        initComponents();

        TableColumn columna = tAlumnos.getColumn("NRO");
        columna.setPreferredWidth(40);
        columna.setMinWidth(40);
        //columna.setMaxWidth(40);

        columna = tAlumnos.getColumn("ID");
        columna.setPreferredWidth(0);
        columna.setMinWidth(0);
        columna.setMaxWidth(0);

        columna = tAlumnos.getColumn("IDALUMNO");
        columna.setPreferredWidth(0);
        columna.setMinWidth(0);
        columna.setMaxWidth(0);

        columna = tAlumnos.getColumn("ID DETALLE");
        columna.setPreferredWidth(0);
        columna.setMinWidth(0);
        columna.setMaxWidth(0);

        columna = tAlumnos.getColumn("N.DOCUMENTO");
        columna.setPreferredWidth(100);
        columna.setMinWidth(70);

        columna = tAlumnos.getColumn("COLEGIATURA");
        columna.setPreferredWidth(100);
        columna.setMinWidth(70);

        //columna.setMaxWidth(500);
        columna = tAlumnos.getColumn("APELLIDO PATERNO");
        columna.setPreferredWidth(200);
        columna.setMinWidth(70);
        //columna.setMaxWidth(70);
        columna = tAlumnos.getColumn("APELLIDO MATERNO");
        columna.setPreferredWidth(200);
        columna.setMinWidth(70);
        //columna.setMaxWidth(0);
        columna = tAlumnos.getColumn("NOMBRES");
        columna.setPreferredWidth(200);
        columna.setMinWidth(70);
        //columna.setMaxWidth(70);
        columna = tAlumnos.getColumn("CONCEPTO CURSOS");
        columna.setPreferredWidth(450);
        columna.setMinWidth(150);

        columna = tAlumnos.getColumn("CODIGO");
        columna.setPreferredWidth(0);
        columna.setMinWidth(0);
        columna.setMaxWidth(0);

        columna = tAlumnos.getColumn("MONTO");
        columna.setPreferredWidth(100);
        columna.setMinWidth(50);

        columna = tAlumnos.getColumn("T.PAGO");
        columna.setPreferredWidth(50);
        columna.setMinWidth(50);

        AlumnoBO aluBO = AlumnoBO.getInstance();
        List<TipoDocPago> lTipoDocPago = aluBO.ObtenerTodosTipoDocPago();
        for (TipoDocPago td : lTipoDocPago) {
            cbTipoDocumento.addItem(td);
        }
        cbTipoDocumento.setSelectedIndex(1);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBuscarCurso = new javax.swing.JButton();
        cbTipoDocumento = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbSerie = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        txtNroDoc = new javax.swing.JTextField();
        cbConceptoCursos = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cbTipoAlumno = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tAlumnos = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtMonto = new javax.swing.JTextField();
        txtIdDocPagoDet = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtCodigoColegiado = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cbTipoPago = new javax.swing.JComboBox();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Formulario del Alumno");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/icono.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("ADMINISTRACIÓN DE ALUMNOS");

        btnBuscarCurso.setText("BUSCAR");
        btnBuscarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCursoActionPerformed(evt);
            }
        });

        cbTipoDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoDocumentoActionPerformed(evt);
            }
        });

        jLabel2.setText("TIPO DOCUMENTO:");

        jLabel3.setText("SERIE:");

        cbSerie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0001", "0002", "0003", "0004", "0005", "0006", "0007", "0008", "0009", "0010" }));

        jLabel4.setText("NRO. DOC:");

        txtNroDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNroDocActionPerformed(evt);
            }
        });

        jLabel5.setText("CURSOS:");

        cbTipoAlumno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CONTADOR", "PERSONA" }));

        jLabel6.setText("TIPO ALUMNO:");

        jLabel7.setText("DNI:");

        btnAgregar.setText("AGREGAR");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        tAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NRO", "ID", "ID DETALLE", "N.DOCUMENTO", "COLEGIATURA", "APELLIDO PATERNO", "APELLIDO MATERNO", "NOMBRES", "CONCEPTO CURSOS", "CODIGO", "MONTO", "T.PAGO", "IDALUMNO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tAlumnos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tAlumnosKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tAlumnos);

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caja/images/Guardar2.png"))); // NOI18N
        btnGuardar.setText("GUARDAR");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jLabel8.setText("MONTO:");

        txtIdDocPagoDet.setEditable(false);

        jLabel10.setText("CÓDIGO:");

        jLabel11.setText("Tipo Pago");

        cbTipoPago.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CON", "CRE" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cbTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(81, 81, 81)
                                                .addComponent(jLabel3)
                                                .addGap(18, 18, 18)
                                                .addComponent(cbSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(99, 99, 99)
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtNroDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 40, Short.MAX_VALUE))
                                            .addComponent(cbConceptoCursos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(32, 32, 32)
                                        .addComponent(cbTipoAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtCodigoColegiado, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cbTipoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnBuscarCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(txtIdDocPagoDet)))
                                .addGap(27, 27, 27)
                                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(cbSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtNroDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarCurso))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbConceptoCursos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTipoAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregar)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdDocPagoDet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtCodigoColegiado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(cbTipoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void CargarDatos() {

        //cbCodigo.setPreferredSize(new Dimension(123, 20));
        cbTipoDocumento.requestFocus();

        this.ObtenerCorrelativo();
    }

    private void ObtenerCorrelativo() {
        AlumnoBO aBO = AlumnoBO.getInstance();
        List<TipoDocPago> lDocPago = aBO.ObtenerTodosTipoDocPago();
        TipoDocPago docPago = null;
        for (TipoDocPago dp : lDocPago) {
            if (dp.getNombreDocPago().equals(cbTipoDocumento.getSelectedItem().toString())) {
                docPago = dp;
                break;
            }
        }
        TipoDocSerie tds = aBO.ObtenerTipoDocSerie(docPago.getIdTipoDocPago(), Integer.valueOf(cbSerie.getSelectedItem().toString()));

    }

    private void BuscarConceptoCursos(int idTipoDocPago, String serie, int nroDocumentoPago) {
        String conceptoCursos = ((JTextField) cbConceptoCursos.getEditor().getEditorComponent()).getText();
        conceptoCursos = conceptoCursos.toUpperCase();
        cbConceptoCursos.removeAllItems();
        AlumnoBO alumBO = AlumnoBO.getInstance();
        //serie = serie.substring(2, 3);
        AdministracionCursoDTO ac;
        List<Object> lstCursos = alumBO.ObtenerConceptoCurso(idTipoDocPago, serie, nroDocumentoPago);
        for (Object pobj : lstCursos) {
            Object[] obj = (Object[]) pobj;
            ac = new AdministracionCursoDTO();
            ac.setNombreCurso(obj[0].toString());
            ac.setCodigoCurso(obj[1].toString() + obj[2].toString());
            cbConceptoCursos.addItem(ac);
//            txtCodigoCurso.setText(obj[1].toString() + obj[2].toString());
        }
        cbConceptoCursos.setSelectedIndex(-1);
        cbConceptoCursos.hidePopup();
        cbConceptoCursos.showPopup();
        ((JTextField) cbConceptoCursos.getEditor().getEditorComponent()).getText();
    }

//    private void BuscarIdDocumentoPagoDetalle(int nroDocumentoPago, String serie, String codigoCurso) {
//        codigoCurso = txtCodigoCurso.getText();
//        codigoCurso = codigoCurso.toUpperCase();
//        txtCodigoCurso.removeAll();
//        AlumnoBO alumBO = AlumnoBO.getInstance();
//        int idDpd = alumBO.ObtenerIdDocumentoPagoDetalle(nroDocumentoPago, serie, codigoCurso);
//    }

    private void txtNroDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNroDocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNroDocActionPerformed

    private void btnBuscarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCursoActionPerformed
        int idTipoDoc = 0;
        String serie;
        int nroDoc = 0;
        idTipoDoc = ((TipoDocPago) cbTipoDocumento.getSelectedItem()).getIdTipoDocPago();
        serie = cbSerie.getSelectedItem().toString();
        nroDoc = Integer.parseInt(txtNroDoc.getText().trim());
        BuscarConceptoCursos(idTipoDoc, serie, nroDoc);
        DocumentoPagoBO dBO = DocumentoPagoBO.getInstance();
        DocumentoPago doc = dBO.ObtenerComprobantePago_SegunTipoDocumentoSerieNro(idTipoDoc, serie, nroDoc);
        if (doc != null) {
            MostrarAlumnosIngresados(doc);
        }
    }//GEN-LAST:event_btnBuscarCursoActionPerformed

    private void MostrarAlumnosIngresados(DocumentoPago doc) {
        AlumnoBO a = AlumnoBO.getInstance();
        List<Alumnos> l = a.BuscarAlumnoPorIdComprobantePago(doc.getIdDocumentoPago());
        DefaultTableModel modelo = (DefaultTableModel) tAlumnos.getModel();
        modelo = (DefaultTableModel) tAlumnos.getModel();
        modelo.setRowCount(l.size());
        int contador = 0;
        for (Alumnos alu : l) {
            modelo.setNumRows(contador);
            modelo.addRow(new Object[contador]);
            tAlumnos.setValueAt(contador + 1, contador, 0);
            tAlumnos.setValueAt(0, contador, 1);//IDCLIENTE
            tAlumnos.setValueAt(alu.getDocumentoPagoDet().getIdDocumentoPagoDet(), contador, 2);//IDDETALLE
            tAlumnos.setValueAt(alu.getDni(), contador, 3);
            tAlumnos.setValueAt(alu.getCodigo(), contador, 4);
            tAlumnos.setValueAt(alu.getApellidoPaterno(), contador, 5);
            tAlumnos.setValueAt(alu.getApellidoMaterno(), contador, 6);
            tAlumnos.setValueAt(alu.getNombres(), contador, 7);
            tAlumnos.setValueAt(alu.getConceptoCurso(), contador, 8);
            tAlumnos.setValueAt(alu.getCodigoCurso(), contador, 9);
            tAlumnos.setValueAt(alu.getMonto(), contador, 10);
            tAlumnos.setValueAt(alu.getTipoPago(), contador, 11);
            tAlumnos.setValueAt(alu.getIdAlumno(), contador, 12);//IDALUMNO
            contador++;
        }
    }


    private void tAlumnosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tAlumnosKeyPressed
        //AlumnoBO aluBO = AlumnoBO.getInstance();
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int fila = tAlumnos.getSelectedRow();
            if (fila >= 0) {
                AlumnoBO aluBO = AlumnoBO.getInstance();
                DefaultTableModel model = (DefaultTableModel) tAlumnos.getModel();
                if (tAlumnos.getValueAt(fila, 12) != null) {
                    if (!tAlumnos.getValueAt(fila, 12).toString().isEmpty()) {
                        int idAlumno = (int) tAlumnos.getValueAt(fila, 12);
                        SeguridadBO sBO = SeguridadBO.getINSTANCE();
                        Alumnos a = (Alumnos) sBO.CargarObjeto("Alumnos", idAlumno);
                        aluBO.EliminarAlumnos(a);
                    }
                }
                model.removeRow(fila);
            }
        }
    }//GEN-LAST:event_tAlumnosKeyPressed

    private void InsertarDetalle() {
        int nroDoc = 0;
        String serie;
        String codigoCurso;
        nroDoc = Integer.parseInt(txtNroDoc.getText());
        serie = cbSerie.getSelectedItem().toString();
        //codigoCurso = txtCodigoCurso.getText();

        if (cbConceptoCursos.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this,
                    "DEBE ELEGIR UN CONCEPTO",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        codigoCurso = ((AdministracionCursoDTO) cbConceptoCursos.getSelectedItem()).getCodigoCurso();
        codigoCurso = codigoCurso.toUpperCase();
//        txtCodigoCurso.removeAll();

        AlumnoBO alumBO = AlumnoBO.getInstance();
        int idDpd = alumBO.ObtenerIdDocumentoPagoDetalle(nroDoc, serie, codigoCurso);
        //int idDocumentoPagoDetalle = BuscarIdDocumentoPagoDetalle(nroDoc, serie, codigoCurso);

        //AlumnoBO dBO = AlumnoBO.getInstance();
        if (cbTipoAlumno.getSelectedItem() == "PERSONA") {
            if (!txtDNI.getText().isEmpty()) {
                if (txtDNI.getText().length() != 8) {
                    JOptionPane.showMessageDialog(this, "El DNI debe tener 8 digitos", "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            Cliente cliente = alumBO.ObtenerPersonaPorDNI_Colegiatura(1, txtDNI.getText(),
                    txtCodigoColegiado.getText());

            if (cliente == null) {
                JOptionPane.showMessageDialog(this,
                        "EL CONTADOR/PERSONA NO EXISTE",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            String nomDetalle = ((JTextField) cbConceptoCursos.getEditor().getEditorComponent()).getText();
            DefaultTableModel model = (DefaultTableModel) tAlumnos.getModel();

//            List<Cliente> lClientes = dBO.ObtenerPersonaPorDNI_Colegiatura(txtDNI.getText(),
//                    txtCodigoColegiado.getText());
            if (cbConceptoCursos.getSelectedItem() == null || cbConceptoCursos.getSelectedItem().toString() == "") {
                JOptionPane.showMessageDialog(this,
                        "DEBE ELEGIR UN CONCEPTO DE CURSO",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 1).toString().equals(txtDNI.getText())) {
                    JOptionPane.showMessageDialog(this,
                            "EL DNI FUE INGRESADO ANTERIORMENTE",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            this.VizualizarIngresoDetalle(cliente, idDpd,
                    Double.valueOf(txtMonto.getText()), txtDNI.getText(), txtCodigoColegiado.getText(),
                    ((AdministracionCursoDTO) cbConceptoCursos.getSelectedItem()).getNombreCurso(), cbTipoPago.getSelectedItem().toString(),
                    ((AdministracionCursoDTO) cbConceptoCursos.getSelectedItem()).getCodigoCurso());

            ((JTextField) cbConceptoCursos.getEditor().getEditorComponent()).setText("");
            txtDNI.setEnabled(true);
            txtDNI.setText("");
            //cbConceptoCursos.setSelectedIndex(1);

        } else if (cbTipoAlumno.getSelectedItem() == "CONTADOR") {
            if (!txtDNI.getText().isEmpty()) {
                if (txtDNI.getText().length() != 5) {
                    JOptionPane.showMessageDialog(this, "El CÓDIGO debe tener 5 digitos", "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            Cliente cliente = alumBO.ObtenerPersonaPorDNI_Colegiatura(2, txtDNI.getText(),
                    txtCodigoColegiado.getText());

            if (cliente == null) {
                JOptionPane.showMessageDialog(this,
                        "EL CONTADOR/PERSONA NO EXISTE",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            String nomDetalle = ((JTextField) cbConceptoCursos.getEditor().getEditorComponent()).getText();
            DefaultTableModel model = (DefaultTableModel) tAlumnos.getModel();

            AlumnoBO dBO = AlumnoBO.getInstance();
            //List<Cliente> lClientes = dBO.ObtenerPersonaPorDNI_Colegiatura(txtDNI.getText(),
            //        txtCodigoColegiado.getText());

            //List<Cliente> lClientes1 = dBO.ObtenerPersonaPorCodigoColegiatura(txtDocumento1.getText());
            //int Iddpd = Integer.valueOf(txtIdDocPagoDet.getText());
            if (cbConceptoCursos.getSelectedItem() == null || cbConceptoCursos.getSelectedItem().toString() == "") {
                JOptionPane.showMessageDialog(this,
                        "DEBE ELEGIR UN CONCEPTO DE CURSO",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 1).toString().equals(txtDNI.getText())) {
                    JOptionPane.showMessageDialog(this,
                            "EL CÓDIGO FUE INGRESADO ANTERIORMENTE",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            this.VizualizarIngresoDetalle(cliente, idDpd,
                    Double.valueOf(txtMonto.getText()), txtDNI.getText(), txtCodigoColegiado.getText(),
                    ((AdministracionCursoDTO) cbConceptoCursos.getSelectedItem()).getNombreCurso(), cbTipoPago.getSelectedItem().toString(),
                    ((AdministracionCursoDTO) cbConceptoCursos.getSelectedItem()).getCodigoCurso());

            ((JTextField) cbConceptoCursos.getEditor().getEditorComponent()).setText("");
            txtDNI.setEnabled(true);
            txtDNI.setText("");
            //cbConceptoCursos.setSelectedIndex(1);
        } else {
            JOptionPane.showMessageDialog(this, "DEBE LLENAR LOS CAMPOS", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }

    }


    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        this.InsertarDetalle();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void VizualizarIngresoDetalle(Cliente c, int IdDocPagoDet, double monto, String dni,
            String codigoCole, String curso, String tipoPago, String codigoCurso) {

        DefaultTableModel modelDetalle = (DefaultTableModel) tAlumnos.getModel();
        int numFilas = modelDetalle.getRowCount();
        modelDetalle.setNumRows(numFilas);
        modelDetalle.addRow(new Object[numFilas]);
        tAlumnos.setValueAt(numFilas + 1, numFilas, 0);
        tAlumnos.setValueAt(c.getIdCliente(), numFilas, 1);
        tAlumnos.setValueAt(IdDocPagoDet, numFilas, 2);
        tAlumnos.setValueAt(dni, numFilas, 3);
        tAlumnos.setValueAt(codigoCole, numFilas, 4);
        tAlumnos.setValueAt(c.getPapePat(), numFilas, 5);
        tAlumnos.setValueAt(c.getPapeMat(), numFilas, 6);
        tAlumnos.setValueAt(c.getPnombre(), numFilas, 7);
        tAlumnos.setValueAt(curso, numFilas, 8);
        tAlumnos.setValueAt(codigoCurso, numFilas, 9);
        tAlumnos.setValueAt(monto, numFilas, 10);
        tAlumnos.setValueAt(tipoPago, numFilas, 11);
        tAlumnos.setValueAt(0, numFilas, 12);

        cbTipoAlumno.requestFocus();
        txtDNI.setEditable(true);
        //((JTextField) cbTipoAlumno.getEditor().getEditorComponent()).setText("");
//        ((JTextField) cbConceptoCursos.getEditor().getEditorComponent()).setText("");

    }

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        AlumnoBO aluBO = AlumnoBO.getInstance();
        DefaultTableModel modelDetalle = (DefaultTableModel) tAlumnos.getModel();

        int nroFilas = modelDetalle.getRowCount();
        if (nroFilas > 0) {
            for (int i = 0; i < nroFilas; i++) {
                int idAlumno = 0;
                if (modelDetalle.getValueAt(i, 12) != null) {
                    if (!modelDetalle.getValueAt(i, 12).toString().isEmpty()) {
                        idAlumno = (int) modelDetalle.getValueAt(i, 12);
                    }
                }
                if (idAlumno == 0) {
                    int idCliente = (Integer.valueOf(modelDetalle.getValueAt(i, 1).toString()));
                    int idDocPagoDet = (Integer.valueOf(modelDetalle.getValueAt(i, 2).toString()));
                    String dni = (String) modelDetalle.getValueAt(i, 3);
                    String codigo = (String) modelDetalle.getValueAt(i, 4);
                    String ApePaterno = (String) modelDetalle.getValueAt(i, 5);
                    String ApeMaterno = (String) modelDetalle.getValueAt(i, 6);
                    String Nombres = (String) modelDetalle.getValueAt(i, 7);
                    String conceptoCursos = String.valueOf(modelDetalle.getValueAt(i, 8));
                    String codigoCurso = (String) modelDetalle.getValueAt(i, 9);
                    double monto = (double) modelDetalle.getValueAt(i, 10); //monto total
                    String tipoPago = (String) modelDetalle.getValueAt(i, 11);

                    if (monto > 0) {

                        Alumnos alu = new Alumnos();

                        alu.setCliente(new Cliente(idCliente));
                        DocumentoPagoDet dp = new DocumentoPagoDet();
                        dp.setIdDocumentoPagoDet(idDocPagoDet);
                        alu.setDocumentoPagoDet(dp);
                        alu.setDni(dni);
                        alu.setCodigo(codigo);
                        alu.setApellidoPaterno(ApePaterno);
                        alu.setApellidoMaterno(ApeMaterno);
                        alu.setNombres(Nombres);
                        alu.setConceptoCurso(conceptoCursos);
                        alu.setMonto(monto);
                        alu.setCodigoCurso(codigoCurso);
                        alu.setTipoPago(tipoPago);

                        boolean seGuardo = aluBO.GuardarAlumnos(alu);
                        if (!seGuardo) {
                            String msg = "NO SE SE GUARDO CORRECTAMENTE DNI:" + dni;
                            JOptionPane.showMessageDialog(this, msg, "OK", JOptionPane.ERROR_MESSAGE);
                            tAlumnos.setRowSelectionInterval(i, i);

                            return;
                        }

                    }
                }
            }

//            txtNroDoc.setText("");
//            cbConceptoCursos.removeAllItems();
//            txtCodigoCurso.setText("");
//            txtDocumento.setText("");
//            txtDocumento1.setText("");
//            txtMonto.setText("");
            JOptionPane.showMessageDialog(this,
                    " SE GUARDÓ CORRECTAMENTE",
                    "OK",
                    JOptionPane.INFORMATION_MESSAGE);

            btnBuscarCurso.setEnabled(true);
            btnAgregar.setEnabled(true);

        }

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void cbTipoDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoDocumentoActionPerformed
        if (cbSerie.getSelectedItem() != null) {
            String serieActual = cbSerie.getSelectedItem().toString();
            DocumentoPagoBO dBO = DocumentoPagoBO.getInstance();
            List<TipoDocPago> lDocPago = dBO.ObtenerTodosTipoDocPago();
            TipoDocPago docPago = null;
            for (TipoDocPago dp : lDocPago) {
                if (dp.getNombreDocPago().equals(cbTipoDocumento.getSelectedItem().toString())) {
                    docPago = dp;
                    break;
                }
            }
            List<Serie> l = dBO.ObtenerTodasSeries_SegunTipoDocumento(docPago.getIdTipoDocPago());
            cbSerie.removeAllItems();
            for (Serie s : l) {
                cbSerie.addItem(s.getSerie());
            }
            cbSerie.setSelectedItem(serieActual);
        }
    }//GEN-LAST:event_cbTipoDocumentoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscarCurso;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox cbConceptoCursos;
    private javax.swing.JComboBox cbSerie;
    private javax.swing.JComboBox cbTipoAlumno;
    private javax.swing.JComboBox cbTipoDocumento;
    private javax.swing.JComboBox cbTipoPago;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tAlumnos;
    private javax.swing.JTextField txtCodigoColegiado;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtIdDocPagoDet;
    private javax.swing.JTextField txtMonto;
    private javax.swing.JTextField txtNroDoc;
    // End of variables declaration//GEN-END:variables
}
